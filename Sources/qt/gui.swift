class Gui {
    private static var inited = false
    public static func initModule() {
        if inited { return }
        inited = true
        constructorTable["gui.QAbstractTextDocumentLayout"] = NewQAbstractTextDocumentLayoutFromPointer
        constructorTable["gui.QAbstractUndoItem"] = NewQAbstractUndoItemFromPointer
        constructorTable["gui.QAccessible"] = NewQAccessibleFromPointer
        constructorTable["gui.QAccessibleActionInterface"] = NewQAccessibleActionInterfaceFromPointer
        constructorTable["gui.QAccessibleEditableTextInterface"] = NewQAccessibleEditableTextInterfaceFromPointer
        constructorTable["gui.QAccessibleEvent"] = NewQAccessibleEventFromPointer
        constructorTable["gui.QAccessibleInterface"] = NewQAccessibleInterfaceFromPointer
        constructorTable["gui.QAccessibleObject"] = NewQAccessibleObjectFromPointer
        constructorTable["gui.QAccessiblePlugin"] = NewQAccessiblePluginFromPointer
        constructorTable["gui.QAccessibleStateChangeEvent"] = NewQAccessibleStateChangeEventFromPointer
        constructorTable["gui.QAccessibleTableCellInterface"] = NewQAccessibleTableCellInterfaceFromPointer
        constructorTable["gui.QAccessibleTableInterface"] = NewQAccessibleTableInterfaceFromPointer
        constructorTable["gui.QAccessibleTableModelChangeEvent"] = NewQAccessibleTableModelChangeEventFromPointer
        constructorTable["gui.QAccessibleTextCursorEvent"] = NewQAccessibleTextCursorEventFromPointer
        constructorTable["gui.QAccessibleTextInsertEvent"] = NewQAccessibleTextInsertEventFromPointer
        constructorTable["gui.QAccessibleTextInterface"] = NewQAccessibleTextInterfaceFromPointer
        constructorTable["gui.QAccessibleTextRemoveEvent"] = NewQAccessibleTextRemoveEventFromPointer
        constructorTable["gui.QAccessibleTextSelectionEvent"] = NewQAccessibleTextSelectionEventFromPointer
        constructorTable["gui.QAccessibleTextUpdateEvent"] = NewQAccessibleTextUpdateEventFromPointer
        constructorTable["gui.QAccessibleValueChangeEvent"] = NewQAccessibleValueChangeEventFromPointer
        constructorTable["gui.QAccessibleValueInterface"] = NewQAccessibleValueInterfaceFromPointer
        constructorTable["gui.QActionEvent"] = NewQActionEventFromPointer
        constructorTable["gui.QApplicationStateChangeEvent"] = NewQApplicationStateChangeEventFromPointer
        constructorTable["gui.QBackingStore"] = NewQBackingStoreFromPointer
        constructorTable["gui.QBitmap"] = NewQBitmapFromPointer
        constructorTable["gui.QBrush"] = NewQBrushFromPointer
        constructorTable["gui.QClipboard"] = NewQClipboardFromPointer
        constructorTable["gui.QCloseEvent"] = NewQCloseEventFromPointer
        constructorTable["gui.QColor"] = NewQColorFromPointer
        constructorTable["gui.QColorDialogOptions"] = NewQColorDialogOptionsFromPointer
        constructorTable["gui.QConicalGradient"] = NewQConicalGradientFromPointer
        constructorTable["gui.QContextMenuEvent"] = NewQContextMenuEventFromPointer
        constructorTable["gui.QCursor"] = NewQCursorFromPointer
        constructorTable["gui.QDesktopServices"] = NewQDesktopServicesFromPointer
        constructorTable["gui.QDoubleValidator"] = NewQDoubleValidatorFromPointer
        constructorTable["gui.QDrag"] = NewQDragFromPointer
        constructorTable["gui.QDragEnterEvent"] = NewQDragEnterEventFromPointer
        constructorTable["gui.QDragLeaveEvent"] = NewQDragLeaveEventFromPointer
        constructorTable["gui.QDragMoveEvent"] = NewQDragMoveEventFromPointer
        constructorTable["gui.QDropEvent"] = NewQDropEventFromPointer
        constructorTable["gui.QEnterEvent"] = NewQEnterEventFromPointer
        constructorTable["gui.QExposeEvent"] = NewQExposeEventFromPointer
        constructorTable["gui.QFileOpenEvent"] = NewQFileOpenEventFromPointer
        constructorTable["gui.QFocusEvent"] = NewQFocusEventFromPointer
        constructorTable["gui.QFont"] = NewQFontFromPointer
        constructorTable["gui.QFontDatabase"] = NewQFontDatabaseFromPointer
        constructorTable["gui.QFontDialogOptions"] = NewQFontDialogOptionsFromPointer
        constructorTable["gui.QFontInfo"] = NewQFontInfoFromPointer
        constructorTable["gui.QFontMetrics"] = NewQFontMetricsFromPointer
        constructorTable["gui.QFontMetricsF"] = NewQFontMetricsFFromPointer
        constructorTable["gui.QGenericPlugin"] = NewQGenericPluginFromPointer
        constructorTable["gui.QGenericPluginFactory"] = NewQGenericPluginFactoryFromPointer
        constructorTable["gui.QGlyphRun"] = NewQGlyphRunFromPointer
        constructorTable["gui.QGradient"] = NewQGradientFromPointer
        constructorTable["gui.QGuiApplication"] = NewQGuiApplicationFromPointer
        constructorTable["gui.QHelpEvent"] = NewQHelpEventFromPointer
        constructorTable["gui.QHideEvent"] = NewQHideEventFromPointer
        constructorTable["gui.QHoverEvent"] = NewQHoverEventFromPointer
        constructorTable["gui.QIcon"] = NewQIconFromPointer
        constructorTable["gui.QIconDragEvent"] = NewQIconDragEventFromPointer
        constructorTable["gui.QIconEngine"] = NewQIconEngineFromPointer
        constructorTable["gui.QIconEnginePlugin"] = NewQIconEnginePluginFromPointer
        constructorTable["gui.QImage"] = NewQImageFromPointer
        constructorTable["gui.QImageIOHandler"] = NewQImageIOHandlerFromPointer
        constructorTable["gui.QImageIOPlugin"] = NewQImageIOPluginFromPointer
        constructorTable["gui.QImageReader"] = NewQImageReaderFromPointer
        constructorTable["gui.QImageTextKeyLang"] = NewQImageTextKeyLangFromPointer
        constructorTable["gui.QImageWriter"] = NewQImageWriterFromPointer
        constructorTable["gui.QInputEvent"] = NewQInputEventFromPointer
        constructorTable["gui.QInputMethod"] = NewQInputMethodFromPointer
        constructorTable["gui.QInputMethodEvent"] = NewQInputMethodEventFromPointer
        constructorTable["gui.QInputMethodQueryEvent"] = NewQInputMethodQueryEventFromPointer
        constructorTable["gui.QIntValidator"] = NewQIntValidatorFromPointer
        constructorTable["gui.QKeyEvent"] = NewQKeyEventFromPointer
        constructorTable["gui.QKeySequence"] = NewQKeySequenceFromPointer
        constructorTable["gui.QLinearGradient"] = NewQLinearGradientFromPointer
        constructorTable["gui.QMatrix"] = NewQMatrixFromPointer
        constructorTable["gui.QMatrix4x4"] = NewQMatrix4x4FromPointer
        constructorTable["gui.QMouseEvent"] = NewQMouseEventFromPointer
        constructorTable["gui.QMoveEvent"] = NewQMoveEventFromPointer
        constructorTable["gui.QMovie"] = NewQMovieFromPointer
        constructorTable["gui.QNativeGestureEvent"] = NewQNativeGestureEventFromPointer
        constructorTable["gui.QOffscreenSurface"] = NewQOffscreenSurfaceFromPointer
        constructorTable["gui.QOpenGLBuffer"] = NewQOpenGLBufferFromPointer
        constructorTable["gui.QOpenGLContext"] = NewQOpenGLContextFromPointer
        constructorTable["gui.QOpenGLContextGroup"] = NewQOpenGLContextGroupFromPointer
        constructorTable["gui.QOpenGLDebugLogger"] = NewQOpenGLDebugLoggerFromPointer
        constructorTable["gui.QOpenGLDebugMessage"] = NewQOpenGLDebugMessageFromPointer
        constructorTable["gui.QOpenGLExtraFunctions"] = NewQOpenGLExtraFunctionsFromPointer
        constructorTable["gui.QOpenGLFramebufferObject"] = NewQOpenGLFramebufferObjectFromPointer
        constructorTable["gui.QOpenGLFramebufferObjectFormat"] = NewQOpenGLFramebufferObjectFormatFromPointer
        constructorTable["gui.QOpenGLFunctions"] = NewQOpenGLFunctionsFromPointer
        constructorTable["gui.QOpenGLPaintDevice"] = NewQOpenGLPaintDeviceFromPointer
        constructorTable["gui.QOpenGLPixelTransferOptions"] = NewQOpenGLPixelTransferOptionsFromPointer
        constructorTable["gui.QOpenGLShader"] = NewQOpenGLShaderFromPointer
        constructorTable["gui.QOpenGLShaderProgram"] = NewQOpenGLShaderProgramFromPointer
        constructorTable["gui.QOpenGLTexture"] = NewQOpenGLTextureFromPointer
        constructorTable["gui.QOpenGLTextureBlitter"] = NewQOpenGLTextureBlitterFromPointer
        constructorTable["gui.QOpenGLTimeMonitor"] = NewQOpenGLTimeMonitorFromPointer
        constructorTable["gui.QOpenGLTimerQuery"] = NewQOpenGLTimerQueryFromPointer
        constructorTable["gui.QOpenGLVersionFunctionsBackend"] = NewQOpenGLVersionFunctionsBackendFromPointer
        constructorTable["gui.QOpenGLVersionFunctionsStorage"] = NewQOpenGLVersionFunctionsStorageFromPointer
        constructorTable["gui.QOpenGLVersionProfile"] = NewQOpenGLVersionProfileFromPointer
        constructorTable["gui.QOpenGLVersionStatus"] = NewQOpenGLVersionStatusFromPointer
        constructorTable["gui.QOpenGLVertexArrayObject"] = NewQOpenGLVertexArrayObjectFromPointer
        constructorTable["gui.QOpenGLWindow"] = NewQOpenGLWindowFromPointer
        constructorTable["gui.QPageLayout"] = NewQPageLayoutFromPointer
        constructorTable["gui.QPageSize"] = NewQPageSizeFromPointer
        constructorTable["gui.QPagedPaintDevice"] = NewQPagedPaintDeviceFromPointer
        constructorTable["gui.QPaintDevice"] = NewQPaintDeviceFromPointer
        constructorTable["gui.QPaintDeviceWindow"] = NewQPaintDeviceWindowFromPointer
        constructorTable["gui.QPaintEngine"] = NewQPaintEngineFromPointer
        constructorTable["gui.QPaintEngineState"] = NewQPaintEngineStateFromPointer
        constructorTable["gui.QPaintEvent"] = NewQPaintEventFromPointer
        constructorTable["gui.QPainter"] = NewQPainterFromPointer
        constructorTable["gui.QPainterPath"] = NewQPainterPathFromPointer
        constructorTable["gui.QPainterPathStroker"] = NewQPainterPathStrokerFromPointer
        constructorTable["gui.QPalette"] = NewQPaletteFromPointer
        constructorTable["gui.QPdfWriter"] = NewQPdfWriterFromPointer
        constructorTable["gui.QPen"] = NewQPenFromPointer
        constructorTable["gui.QPicture"] = NewQPictureFromPointer
        constructorTable["gui.QPictureFormatPlugin"] = NewQPictureFormatPluginFromPointer
        constructorTable["gui.QPictureIO"] = NewQPictureIOFromPointer
        constructorTable["gui.QPixelFormat"] = NewQPixelFormatFromPointer
        constructorTable["gui.QPixmap"] = NewQPixmapFromPointer
        constructorTable["gui.QPixmapCache"] = NewQPixmapCacheFromPointer
        constructorTable["gui.QPlatformSurfaceEvent"] = NewQPlatformSurfaceEventFromPointer
        constructorTable["gui.QPointingDeviceUniqueId"] = NewQPointingDeviceUniqueIdFromPointer
        constructorTable["gui.QPolygon"] = NewQPolygonFromPointer
        constructorTable["gui.QPolygonF"] = NewQPolygonFFromPointer
        constructorTable["gui.QQuaternion"] = NewQQuaternionFromPointer
        constructorTable["gui.QRadialGradient"] = NewQRadialGradientFromPointer
        constructorTable["gui.QRasterWindow"] = NewQRasterWindowFromPointer
        constructorTable["gui.QRawFont"] = NewQRawFontFromPointer
        constructorTable["gui.QRegExpValidator"] = NewQRegExpValidatorFromPointer
        constructorTable["gui.QRegion"] = NewQRegionFromPointer
        constructorTable["gui.QRegularExpressionValidator"] = NewQRegularExpressionValidatorFromPointer
        constructorTable["gui.QResizeEvent"] = NewQResizeEventFromPointer
        constructorTable["gui.QRgba64"] = NewQRgba64FromPointer
        constructorTable["gui.QScreen"] = NewQScreenFromPointer
        constructorTable["gui.QScreenOrientationChangeEvent"] = NewQScreenOrientationChangeEventFromPointer
        constructorTable["gui.QScrollEvent"] = NewQScrollEventFromPointer
        constructorTable["gui.QScrollPrepareEvent"] = NewQScrollPrepareEventFromPointer
        constructorTable["gui.QSessionManager"] = NewQSessionManagerFromPointer
        constructorTable["gui.QShortcutEvent"] = NewQShortcutEventFromPointer
        constructorTable["gui.QShowEvent"] = NewQShowEventFromPointer
        constructorTable["gui.QStandardItem"] = NewQStandardItemFromPointer
        constructorTable["gui.QStandardItemModel"] = NewQStandardItemModelFromPointer
        constructorTable["gui.QStaticText"] = NewQStaticTextFromPointer
        constructorTable["gui.QStatusTipEvent"] = NewQStatusTipEventFromPointer
        constructorTable["gui.QStyleHints"] = NewQStyleHintsFromPointer
        constructorTable["gui.QSurface"] = NewQSurfaceFromPointer
        constructorTable["gui.QSurfaceFormat"] = NewQSurfaceFormatFromPointer
        constructorTable["gui.QSyntaxHighlighter"] = NewQSyntaxHighlighterFromPointer
        constructorTable["gui.QTabletEvent"] = NewQTabletEventFromPointer
        constructorTable["gui.QTextBlock"] = NewQTextBlockFromPointer
        constructorTable["gui.QTextBlockFormat"] = NewQTextBlockFormatFromPointer
        constructorTable["gui.QTextBlockGroup"] = NewQTextBlockGroupFromPointer
        constructorTable["gui.QTextBlockUserData"] = NewQTextBlockUserDataFromPointer
        constructorTable["gui.QTextCharFormat"] = NewQTextCharFormatFromPointer
        constructorTable["gui.QTextCursor"] = NewQTextCursorFromPointer
        constructorTable["gui.QTextDocument"] = NewQTextDocumentFromPointer
        constructorTable["gui.QTextDocumentFragment"] = NewQTextDocumentFragmentFromPointer
        constructorTable["gui.QTextDocumentWriter"] = NewQTextDocumentWriterFromPointer
        constructorTable["gui.QTextFormat"] = NewQTextFormatFromPointer
        constructorTable["gui.QTextFragment"] = NewQTextFragmentFromPointer
        constructorTable["gui.QTextFrame"] = NewQTextFrameFromPointer
        constructorTable["gui.QTextFrameFormat"] = NewQTextFrameFormatFromPointer
        constructorTable["gui.QTextFrameLayoutData"] = NewQTextFrameLayoutDataFromPointer
        constructorTable["gui.QTextImageFormat"] = NewQTextImageFormatFromPointer
        constructorTable["gui.QTextInlineObject"] = NewQTextInlineObjectFromPointer
        constructorTable["gui.QTextItem"] = NewQTextItemFromPointer
        constructorTable["gui.QTextLayout"] = NewQTextLayoutFromPointer
        constructorTable["gui.QTextLength"] = NewQTextLengthFromPointer
        constructorTable["gui.QTextLine"] = NewQTextLineFromPointer
        constructorTable["gui.QTextList"] = NewQTextListFromPointer
        constructorTable["gui.QTextListFormat"] = NewQTextListFormatFromPointer
        constructorTable["gui.QTextObject"] = NewQTextObjectFromPointer
        constructorTable["gui.QTextObjectInterface"] = NewQTextObjectInterfaceFromPointer
        constructorTable["gui.QTextOption"] = NewQTextOptionFromPointer
        constructorTable["gui.QTextTable"] = NewQTextTableFromPointer
        constructorTable["gui.QTextTableCell"] = NewQTextTableCellFromPointer
        constructorTable["gui.QTextTableCellFormat"] = NewQTextTableCellFormatFromPointer
        constructorTable["gui.QTextTableFormat"] = NewQTextTableFormatFromPointer
        constructorTable["gui.QTouchDevice"] = NewQTouchDeviceFromPointer
        constructorTable["gui.QTouchEvent"] = NewQTouchEventFromPointer
        constructorTable["gui.QTransform"] = NewQTransformFromPointer
        constructorTable["gui.QValidator"] = NewQValidatorFromPointer
        constructorTable["gui.QVector2D"] = NewQVector2DFromPointer
        constructorTable["gui.QVector3D"] = NewQVector3DFromPointer
        constructorTable["gui.QVector4D"] = NewQVector4DFromPointer
        constructorTable["gui.QWhatsThisClickedEvent"] = NewQWhatsThisClickedEventFromPointer
        constructorTable["gui.QWheelEvent"] = NewQWheelEventFromPointer
        constructorTable["gui.QWindow"] = NewQWindowFromPointer
        constructorTable["gui.QWindowStateChangeEvent"] = NewQWindowStateChangeEventFromPointer

        Init()
        Core.initModule()
    }
}

public protocol QAbstractOpenGLFunctions_ITF {
    func QAbstractOpenGLFunctions_PTR() -> QAbstractOpenGLFunctions
}

public class QAbstractOpenGLFunctions: Internal, QAbstractOpenGLFunctions_ITF {
    public func QAbstractOpenGLFunctions_PTR() -> QAbstractOpenGLFunctions { callLocalFunction(l: ["", Pointer(), ___className, "QAbstractOpenGLFunctions_PTR"]) as! QAbstractOpenGLFunctions }
}

public protocol QAbstractTextDocumentLayout_ITF: QObject_ITF {
    func QAbstractTextDocumentLayout_PTR() -> QAbstractTextDocumentLayout
}

public class QAbstractTextDocumentLayout: QObject, QAbstractTextDocumentLayout_ITF {
    public func QAbstractTextDocumentLayout_PTR() -> QAbstractTextDocumentLayout { callLocalFunction(l: ["", Pointer(), ___className, "QAbstractTextDocumentLayout_PTR"]) as! QAbstractTextDocumentLayout }
    public func AnchorAt(position: QPointF_ITF? = nil) -> String { callLocalFunction(l: ["", Pointer(), ___className, "AnchorAt", position as Any]) as! String }
    public func ConnectBlockBoundingRect(f: @escaping (_ block: QTextBlock) -> QRectF) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectBlockBoundingRect", "___REMOTE_CALLBACK___"], f: { (inp: [Any]) -> Any in f(inp[0] as! QTextBlock) } as Any) }
    public func DisconnectBlockBoundingRect() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectBlockBoundingRect"]) }
    public func BlockBoundingRect(block: QTextBlock_ITF? = nil) -> QRectF { callLocalFunction(l: ["", Pointer(), ___className, "BlockBoundingRect", block as Any]) as! QRectF }
    public func Document() -> QTextDocument { callLocalFunction(l: ["", Pointer(), ___className, "Document"]) as! QTextDocument }
    public func ConnectDocumentChanged(f: @escaping (_ position: Int, _ charsRemoved: Int, _ charsAdded: Int) -> Void) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectDocumentChanged", "___REMOTE_CALLBACK___"], f: { (inp: [Any]) -> Any in f(Int(inp[0] as! Float), Int(inp[1] as! Float), Int(inp[2] as! Float)) } as Any) }
    public func DisconnectDocumentChanged() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectDocumentChanged"]) }
    public func DocumentChanged(position: Int, charsRemoved: Int, charsAdded: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "DocumentChanged", position as Any, charsRemoved as Any, charsAdded as Any]) }
    public func ConnectDocumentSize(f: @escaping () -> QSizeF) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectDocumentSize", "___REMOTE_CALLBACK___"], f: { (_: [Any]) -> Any in f() } as Any) }
    public func DisconnectDocumentSize() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectDocumentSize"]) }
    public func DocumentSize() -> QSizeF { callLocalFunction(l: ["", Pointer(), ___className, "DocumentSize"]) as! QSizeF }
    public func ConnectDocumentSizeChanged(f: @escaping (_ newSize: QSizeF) -> Void) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectDocumentSizeChanged", "___REMOTE_CALLBACK___"], f: { (inp: [Any]) -> Any in f(inp[0] as! QSizeF) } as Any) }
    public func DisconnectDocumentSizeChanged() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectDocumentSizeChanged"]) }
    public func DocumentSizeChanged(newSize: QSizeF_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "DocumentSizeChanged", newSize as Any]) }
    public func ConnectDrawInlineObject(f: @escaping (_ painter: QPainter, _ rect: QRectF, _ object: QTextInlineObject, _ posInDocument: Int, _ format: QTextFormat) -> Void) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectDrawInlineObject", "___REMOTE_CALLBACK___"], f: { (inp: [Any]) -> Any in f(inp[0] as! QPainter, inp[1] as! QRectF, inp[2] as! QTextInlineObject, Int(inp[3] as! Float), inp[4] as! QTextFormat) } as Any) }
    public func DisconnectDrawInlineObject() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectDrawInlineObject"]) }
    public func DrawInlineObject(painter: QPainter_ITF? = nil, rect: QRectF_ITF? = nil, object: QTextInlineObject_ITF? = nil, posInDocument: Int, format: QTextFormat_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "DrawInlineObject", painter as Any, rect as Any, object as Any, posInDocument as Any, format as Any]) }
    public func DrawInlineObjectDefault(painter: QPainter_ITF? = nil, rect: QRectF_ITF? = nil, object: QTextInlineObject_ITF? = nil, posInDocument: Int, format: QTextFormat_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "DrawInlineObjectDefault", painter as Any, rect as Any, object as Any, posInDocument as Any, format as Any]) }
    public func Format(position: Int) -> QTextCharFormat { callLocalFunction(l: ["", Pointer(), ___className, "Format", position as Any]) as! QTextCharFormat }
    public func FormatAt(pos: QPointF_ITF? = nil) -> QTextFormat { callLocalFunction(l: ["", Pointer(), ___className, "FormatAt", pos as Any]) as! QTextFormat }
    public func ConnectFrameBoundingRect(f: @escaping (_ frame: QTextFrame) -> QRectF) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectFrameBoundingRect", "___REMOTE_CALLBACK___"], f: { (inp: [Any]) -> Any in f(inp[0] as! QTextFrame) } as Any) }
    public func DisconnectFrameBoundingRect() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectFrameBoundingRect"]) }
    public func FrameBoundingRect(frame: QTextFrame_ITF? = nil) -> QRectF { callLocalFunction(l: ["", Pointer(), ___className, "FrameBoundingRect", frame as Any]) as! QRectF }
    public func HandlerForObject(objectType: Int) -> QTextObjectInterface { callLocalFunction(l: ["", Pointer(), ___className, "HandlerForObject", objectType as Any]) as! QTextObjectInterface }
    public func ConnectHitTest(f: @escaping (_ point: QPointF, _ accuracy: Int) -> Int) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectHitTest", "___REMOTE_CALLBACK___"], f: { (inp: [Any]) -> Any in f(inp[0] as! QPointF, Int(inp[1] as! Float)) } as Any) }
    public func DisconnectHitTest() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectHitTest"]) }
    public func HitTest(point: QPointF_ITF? = nil, accuracy: Int) -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "HitTest", point as Any, accuracy as Any]) as! Float) }
    public func ImageAt(pos: QPointF_ITF? = nil) -> String { callLocalFunction(l: ["", Pointer(), ___className, "ImageAt", pos as Any]) as! String }
    public func ConnectPageCount(f: @escaping () -> Int) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectPageCount", "___REMOTE_CALLBACK___"], f: { (_: [Any]) -> Any in f() } as Any) }
    public func DisconnectPageCount() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectPageCount"]) }
    public func PageCount() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "PageCount"]) as! Float) }
    public func ConnectPageCountChanged(f: @escaping (_ newPages: Int) -> Void) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectPageCountChanged", "___REMOTE_CALLBACK___"], f: { (inp: [Any]) -> Any in f(Int(inp[0] as! Float)) } as Any) }
    public func DisconnectPageCountChanged() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectPageCountChanged"]) }
    public func PageCountChanged(newPages: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "PageCountChanged", newPages as Any]) }
    public func PaintDevice() -> QPaintDevice { callLocalFunction(l: ["", Pointer(), ___className, "PaintDevice"]) as! QPaintDevice }
    public func ConnectPositionInlineObject(f: @escaping (_ item: QTextInlineObject, _ posInDocument: Int, _ format: QTextFormat) -> Void) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectPositionInlineObject", "___REMOTE_CALLBACK___"], f: { (inp: [Any]) -> Any in f(inp[0] as! QTextInlineObject, Int(inp[1] as! Float), inp[2] as! QTextFormat) } as Any) }
    public func DisconnectPositionInlineObject() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectPositionInlineObject"]) }
    public func PositionInlineObject(item: QTextInlineObject_ITF? = nil, posInDocument: Int, format: QTextFormat_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "PositionInlineObject", item as Any, posInDocument as Any, format as Any]) }
    public func PositionInlineObjectDefault(item: QTextInlineObject_ITF? = nil, posInDocument: Int, format: QTextFormat_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "PositionInlineObjectDefault", item as Any, posInDocument as Any, format as Any]) }
    public func RegisterHandler(objectType: Int, component: QObject_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "RegisterHandler", objectType as Any, component as Any]) }
    public func ConnectResizeInlineObject(f: @escaping (_ item: QTextInlineObject, _ posInDocument: Int, _ format: QTextFormat) -> Void) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectResizeInlineObject", "___REMOTE_CALLBACK___"], f: { (inp: [Any]) -> Any in f(inp[0] as! QTextInlineObject, Int(inp[1] as! Float), inp[2] as! QTextFormat) } as Any) }
    public func DisconnectResizeInlineObject() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectResizeInlineObject"]) }
    public func ResizeInlineObject(item: QTextInlineObject_ITF? = nil, posInDocument: Int, format: QTextFormat_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "ResizeInlineObject", item as Any, posInDocument as Any, format as Any]) }
    public func ResizeInlineObjectDefault(item: QTextInlineObject_ITF? = nil, posInDocument: Int, format: QTextFormat_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "ResizeInlineObjectDefault", item as Any, posInDocument as Any, format as Any]) }
    public func SetPaintDevice(device: QPaintDevice_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetPaintDevice", device as Any]) }
    public func UnregisterHandler(objectType: Int, component: QObject_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "UnregisterHandler", objectType as Any, component as Any]) }
    public func ConnectUpdate(f: @escaping (_ rect: QRectF) -> Void) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectUpdate", "___REMOTE_CALLBACK___"], f: { (inp: [Any]) -> Any in f(inp[0] as! QRectF) } as Any) }
    public func DisconnectUpdate() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectUpdate"]) }
    public func Update(rect: QRectF_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "Update", rect as Any]) }
    public func ConnectUpdateBlock(f: @escaping (_ block: QTextBlock) -> Void) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectUpdateBlock", "___REMOTE_CALLBACK___"], f: { (inp: [Any]) -> Any in f(inp[0] as! QTextBlock) } as Any) }
    public func DisconnectUpdateBlock() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectUpdateBlock"]) }
    public func UpdateBlock(block: QTextBlock_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "UpdateBlock", block as Any]) }
    override public func ChildEventDefault(event: QChildEvent_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "ChildEventDefault", event as Any]) }
    override public func ConnectNotifyDefault(sign: QMetaMethod_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "ConnectNotifyDefault", sign as Any]) }
    override public func CustomEventDefault(event: QEvent_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "CustomEventDefault", event as Any]) }
    override public func DeleteLaterDefault() { _ = callLocalFunction(l: ["", Pointer(), ___className, "DeleteLaterDefault"]) }
    override public func DisconnectNotifyDefault(sign: QMetaMethod_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "DisconnectNotifyDefault", sign as Any]) }
    override public func EventDefault(e: QEvent_ITF? = nil) -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "EventDefault", e as Any]) as! Bool }
    override public func EventFilterDefault(watched: QObject_ITF? = nil, event: QEvent_ITF? = nil) -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "EventFilterDefault", watched as Any, event as Any]) as! Bool }
    override public func MetaObjectDefault() -> QMetaObject { callLocalFunction(l: ["", Pointer(), ___className, "MetaObjectDefault"]) as! QMetaObject }
    override public func TimerEventDefault(event: QTimerEvent_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "TimerEventDefault", event as Any]) }
}

public func NewQAbstractTextDocumentLayoutFromPointer(ptr: String) -> QAbstractTextDocumentLayout { let r = QAbstractTextDocumentLayout(); r.initFrom(p: ptr, n: "gui.QAbstractTextDocumentLayout"); return r }
public protocol QAbstractUndoItem_ITF {
    func QAbstractUndoItem_PTR() -> QAbstractUndoItem
}

public class QAbstractUndoItem: Internal, QAbstractUndoItem_ITF {
    public func QAbstractUndoItem_PTR() -> QAbstractUndoItem { callLocalFunction(l: ["", Pointer(), ___className, "QAbstractUndoItem_PTR"]) as! QAbstractUndoItem }
    public func DestroyQAbstractUndoItem() { _ = callLocalFunction(l: ["", Pointer(), ___className, "DestroyQAbstractUndoItem"]) }
}

public func NewQAbstractUndoItemFromPointer(ptr: String) -> QAbstractUndoItem { let r = QAbstractUndoItem(); r.initFrom(p: ptr, n: "gui.QAbstractUndoItem"); return r }
public protocol QAccessible_ITF {
    func QAccessible_PTR() -> QAccessible
}

public class QAccessible: Internal, QAccessible_ITF {
    public func QAccessible_PTR() -> QAccessible { callLocalFunction(l: ["", Pointer(), ___className, "QAccessible_PTR"]) as! QAccessible }
    public func DestroyQAccessible() { _ = callLocalFunction(l: ["", Pointer(), ___className, "DestroyQAccessible"]) }
    public func IsActive() -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "IsActive"]) as! Bool }
    public func QueryAccessibleInterface(object: QObject_ITF? = nil) -> QAccessibleInterface { callLocalFunction(l: ["", Pointer(), ___className, "QueryAccessibleInterface", object as Any]) as! QAccessibleInterface }
    public func SetRootObject(object: QObject_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetRootObject", object as Any]) }
    public func UpdateAccessibility2(event: QAccessibleEvent_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "UpdateAccessibility2", event as Any]) }
}

public func NewQAccessibleFromPointer(ptr: String) -> QAccessible { let r = QAccessible(); r.initFrom(p: ptr, n: "gui.QAccessible"); return r }
public func QAccessible_IsActive() -> Bool { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.QAccessible_IsActive", ""]) as! Bool }
public func QAccessible_QueryAccessibleInterface(object: QObject_ITF? = nil) -> QAccessibleInterface { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.QAccessible_QueryAccessibleInterface", "", object as Any]) as! QAccessibleInterface }
public func QAccessible_SetRootObject(object: QObject_ITF? = nil) { Gui.initModule(); _ = callLocalFunction(l: ["", "", "gui.QAccessible_SetRootObject", "", object as Any]) }
public func QAccessible_UpdateAccessibility2(event: QAccessibleEvent_ITF? = nil) { Gui.initModule(); _ = callLocalFunction(l: ["", "", "gui.QAccessible_UpdateAccessibility2", "", event as Any]) }
public protocol QAccessibleActionInterface_ITF {
    func QAccessibleActionInterface_PTR() -> QAccessibleActionInterface
}

public class QAccessibleActionInterface: Internal, QAccessibleActionInterface_ITF {
    public func QAccessibleActionInterface_PTR() -> QAccessibleActionInterface { callLocalFunction(l: ["", Pointer(), ___className, "QAccessibleActionInterface_PTR"]) as! QAccessibleActionInterface }
    public func ConnectActionNames(f: @escaping () -> [String]) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectActionNames", "___REMOTE_CALLBACK___"], f: { (_: [Any]) -> Any in f() } as Any) }
    public func DisconnectActionNames() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectActionNames"]) }
    public func ActionNames() -> [String] { callLocalFunction(l: ["", Pointer(), ___className, "ActionNames"]) as! [String] }
    public func DecreaseAction() -> String { callLocalFunction(l: ["", Pointer(), ___className, "DecreaseAction"]) as! String }
    public func ConnectDoAction(f: @escaping (_ actionName: String) -> Void) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectDoAction", "___REMOTE_CALLBACK___"], f: { (inp: [Any]) -> Any in f(inp[0] as! String) } as Any) }
    public func DisconnectDoAction() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectDoAction"]) }
    public func DoAction(actionName: String) { _ = callLocalFunction(l: ["", Pointer(), ___className, "DoAction", actionName as Any]) }
    public func IncreaseAction() -> String { callLocalFunction(l: ["", Pointer(), ___className, "IncreaseAction"]) as! String }
    public func ConnectKeyBindingsForAction(f: @escaping (_ actionName: String) -> [String]) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectKeyBindingsForAction", "___REMOTE_CALLBACK___"], f: { (inp: [Any]) -> Any in f(inp[0] as! String) } as Any) }
    public func DisconnectKeyBindingsForAction() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectKeyBindingsForAction"]) }
    public func KeyBindingsForAction(actionName: String) -> [String] { callLocalFunction(l: ["", Pointer(), ___className, "KeyBindingsForAction", actionName as Any]) as! [String] }
    public func ConnectLocalizedActionDescription(f: @escaping (_ actionName: String) -> String) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectLocalizedActionDescription", "___REMOTE_CALLBACK___"], f: { (inp: [Any]) -> Any in f(inp[0] as! String) } as Any) }
    public func DisconnectLocalizedActionDescription() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectLocalizedActionDescription"]) }
    public func LocalizedActionDescription(actionName: String) -> String { callLocalFunction(l: ["", Pointer(), ___className, "LocalizedActionDescription", actionName as Any]) as! String }
    public func LocalizedActionDescriptionDefault(actionName: String) -> String { callLocalFunction(l: ["", Pointer(), ___className, "LocalizedActionDescriptionDefault", actionName as Any]) as! String }
    public func ConnectLocalizedActionName(f: @escaping (_ actionName: String) -> String) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectLocalizedActionName", "___REMOTE_CALLBACK___"], f: { (inp: [Any]) -> Any in f(inp[0] as! String) } as Any) }
    public func DisconnectLocalizedActionName() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectLocalizedActionName"]) }
    public func LocalizedActionName(actionName: String) -> String { callLocalFunction(l: ["", Pointer(), ___className, "LocalizedActionName", actionName as Any]) as! String }
    public func LocalizedActionNameDefault(actionName: String) -> String { callLocalFunction(l: ["", Pointer(), ___className, "LocalizedActionNameDefault", actionName as Any]) as! String }
    public func NextPageAction() -> String { callLocalFunction(l: ["", Pointer(), ___className, "NextPageAction"]) as! String }
    public func PressAction() -> String { callLocalFunction(l: ["", Pointer(), ___className, "PressAction"]) as! String }
    public func PreviousPageAction() -> String { callLocalFunction(l: ["", Pointer(), ___className, "PreviousPageAction"]) as! String }
    public func ScrollDownAction() -> String { callLocalFunction(l: ["", Pointer(), ___className, "ScrollDownAction"]) as! String }
    public func ScrollLeftAction() -> String { callLocalFunction(l: ["", Pointer(), ___className, "ScrollLeftAction"]) as! String }
    public func ScrollRightAction() -> String { callLocalFunction(l: ["", Pointer(), ___className, "ScrollRightAction"]) as! String }
    public func ScrollUpAction() -> String { callLocalFunction(l: ["", Pointer(), ___className, "ScrollUpAction"]) as! String }
    public func SetFocusAction() -> String { callLocalFunction(l: ["", Pointer(), ___className, "SetFocusAction"]) as! String }
    public func ShowMenuAction() -> String { callLocalFunction(l: ["", Pointer(), ___className, "ShowMenuAction"]) as! String }
    public func ToggleAction() -> String { callLocalFunction(l: ["", Pointer(), ___className, "ToggleAction"]) as! String }
    public func ConnectDestroyQAccessibleActionInterface(f: @escaping () -> Void) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectDestroyQAccessibleActionInterface", "___REMOTE_CALLBACK___"], f: { (_: [Any]) -> Any in f() } as Any) }
    public func DisconnectDestroyQAccessibleActionInterface() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectDestroyQAccessibleActionInterface"]) }
    public func DestroyQAccessibleActionInterface() { _ = callLocalFunction(l: ["", Pointer(), ___className, "DestroyQAccessibleActionInterface"]) }
    public func DestroyQAccessibleActionInterfaceDefault() { _ = callLocalFunction(l: ["", Pointer(), ___className, "DestroyQAccessibleActionInterfaceDefault"]) }
}

public func NewQAccessibleActionInterfaceFromPointer(ptr: String) -> QAccessibleActionInterface { let r = QAccessibleActionInterface(); r.initFrom(p: ptr, n: "gui.QAccessibleActionInterface"); return r }
public func QAccessibleActionInterface_DecreaseAction() -> String { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.QAccessibleActionInterface_DecreaseAction", ""]) as! String }
public func QAccessibleActionInterface_IncreaseAction() -> String { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.QAccessibleActionInterface_IncreaseAction", ""]) as! String }
public func QAccessibleActionInterface_NextPageAction() -> String { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.QAccessibleActionInterface_NextPageAction", ""]) as! String }
public func QAccessibleActionInterface_PressAction() -> String { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.QAccessibleActionInterface_PressAction", ""]) as! String }
public func QAccessibleActionInterface_PreviousPageAction() -> String { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.QAccessibleActionInterface_PreviousPageAction", ""]) as! String }
public func QAccessibleActionInterface_ScrollDownAction() -> String { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.QAccessibleActionInterface_ScrollDownAction", ""]) as! String }
public func QAccessibleActionInterface_ScrollLeftAction() -> String { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.QAccessibleActionInterface_ScrollLeftAction", ""]) as! String }
public func QAccessibleActionInterface_ScrollRightAction() -> String { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.QAccessibleActionInterface_ScrollRightAction", ""]) as! String }
public func QAccessibleActionInterface_ScrollUpAction() -> String { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.QAccessibleActionInterface_ScrollUpAction", ""]) as! String }
public func QAccessibleActionInterface_SetFocusAction() -> String { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.QAccessibleActionInterface_SetFocusAction", ""]) as! String }
public func QAccessibleActionInterface_ShowMenuAction() -> String { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.QAccessibleActionInterface_ShowMenuAction", ""]) as! String }
public func QAccessibleActionInterface_ToggleAction() -> String { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.QAccessibleActionInterface_ToggleAction", ""]) as! String }
public protocol QAccessibleEditableTextInterface_ITF {
    func QAccessibleEditableTextInterface_PTR() -> QAccessibleEditableTextInterface
}

public class QAccessibleEditableTextInterface: Internal, QAccessibleEditableTextInterface_ITF {
    public func QAccessibleEditableTextInterface_PTR() -> QAccessibleEditableTextInterface { callLocalFunction(l: ["", Pointer(), ___className, "QAccessibleEditableTextInterface_PTR"]) as! QAccessibleEditableTextInterface }
    public func ConnectDeleteText(f: @escaping (_ startOffset: Int, _ endOffset: Int) -> Void) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectDeleteText", "___REMOTE_CALLBACK___"], f: { (inp: [Any]) -> Any in f(Int(inp[0] as! Float), Int(inp[1] as! Float)) } as Any) }
    public func DisconnectDeleteText() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectDeleteText"]) }
    public func DeleteText(startOffset: Int, endOffset: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "DeleteText", startOffset as Any, endOffset as Any]) }
    public func ConnectInsertText(f: @escaping (_ offset: Int, _ text: String) -> Void) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectInsertText", "___REMOTE_CALLBACK___"], f: { (inp: [Any]) -> Any in f(Int(inp[0] as! Float), inp[1] as! String) } as Any) }
    public func DisconnectInsertText() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectInsertText"]) }
    public func InsertText(offset: Int, text: String) { _ = callLocalFunction(l: ["", Pointer(), ___className, "InsertText", offset as Any, text as Any]) }
    public func ConnectReplaceText(f: @escaping (_ startOffset: Int, _ endOffset: Int, _ text: String) -> Void) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectReplaceText", "___REMOTE_CALLBACK___"], f: { (inp: [Any]) -> Any in f(Int(inp[0] as! Float), Int(inp[1] as! Float), inp[2] as! String) } as Any) }
    public func DisconnectReplaceText() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectReplaceText"]) }
    public func ReplaceText(startOffset: Int, endOffset: Int, text: String) { _ = callLocalFunction(l: ["", Pointer(), ___className, "ReplaceText", startOffset as Any, endOffset as Any, text as Any]) }
    public func ConnectDestroyQAccessibleEditableTextInterface(f: @escaping () -> Void) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectDestroyQAccessibleEditableTextInterface", "___REMOTE_CALLBACK___"], f: { (_: [Any]) -> Any in f() } as Any) }
    public func DisconnectDestroyQAccessibleEditableTextInterface() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectDestroyQAccessibleEditableTextInterface"]) }
    public func DestroyQAccessibleEditableTextInterface() { _ = callLocalFunction(l: ["", Pointer(), ___className, "DestroyQAccessibleEditableTextInterface"]) }
    public func DestroyQAccessibleEditableTextInterfaceDefault() { _ = callLocalFunction(l: ["", Pointer(), ___className, "DestroyQAccessibleEditableTextInterfaceDefault"]) }
}

public func NewQAccessibleEditableTextInterfaceFromPointer(ptr: String) -> QAccessibleEditableTextInterface { let r = QAccessibleEditableTextInterface(); r.initFrom(p: ptr, n: "gui.QAccessibleEditableTextInterface"); return r }
public protocol QAccessibleEvent_ITF {
    func QAccessibleEvent_PTR() -> QAccessibleEvent
}

public class QAccessibleEvent: Internal, QAccessibleEvent_ITF {
    public func QAccessibleEvent_PTR() -> QAccessibleEvent { callLocalFunction(l: ["", Pointer(), ___className, "QAccessibleEvent_PTR"]) as! QAccessibleEvent }
    public func ConnectAccessibleInterface(f: @escaping () -> QAccessibleInterface) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectAccessibleInterface", "___REMOTE_CALLBACK___"], f: { (_: [Any]) -> Any in f() } as Any) }
    public func DisconnectAccessibleInterface() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectAccessibleInterface"]) }
    public func AccessibleInterface() -> QAccessibleInterface { callLocalFunction(l: ["", Pointer(), ___className, "AccessibleInterface"]) as! QAccessibleInterface }
    public func AccessibleInterfaceDefault() -> QAccessibleInterface { callLocalFunction(l: ["", Pointer(), ___className, "AccessibleInterfaceDefault"]) as! QAccessibleInterface }
    public func Child() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "Child"]) as! Float) }
    public func Object() -> QObject { callLocalFunction(l: ["", Pointer(), ___className, "Object"]) as! QObject }
    public func SetChild(child: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetChild", child as Any]) }
    public func Type() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "Type"]) as! Float) }
    public func ConnectDestroyQAccessibleEvent(f: @escaping () -> Void) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectDestroyQAccessibleEvent", "___REMOTE_CALLBACK___"], f: { (_: [Any]) -> Any in f() } as Any) }
    public func DisconnectDestroyQAccessibleEvent() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectDestroyQAccessibleEvent"]) }
    public func DestroyQAccessibleEvent() { _ = callLocalFunction(l: ["", Pointer(), ___className, "DestroyQAccessibleEvent"]) }
    public func DestroyQAccessibleEventDefault() { _ = callLocalFunction(l: ["", Pointer(), ___className, "DestroyQAccessibleEventDefault"]) }
}

public func NewQAccessibleEventFromPointer(ptr: String) -> QAccessibleEvent { let r = QAccessibleEvent(); r.initFrom(p: ptr, n: "gui.QAccessibleEvent"); return r }
public func NewQAccessibleEvent2(object: QObject_ITF? = nil, ty: Int) -> QAccessibleEvent { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.NewQAccessibleEvent2", "", object as Any, ty as Any]) as! QAccessibleEvent }
public func NewQAccessibleEvent3(interfa: QAccessibleInterface_ITF? = nil, ty: Int) -> QAccessibleEvent { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.NewQAccessibleEvent3", "", interfa as Any, ty as Any]) as! QAccessibleEvent }
public protocol QAccessibleInterface_ITF {
    func QAccessibleInterface_PTR() -> QAccessibleInterface
}

public class QAccessibleInterface: Internal, QAccessibleInterface_ITF {
    public func QAccessibleInterface_PTR() -> QAccessibleInterface { callLocalFunction(l: ["", Pointer(), ___className, "QAccessibleInterface_PTR"]) as! QAccessibleInterface }
    public func ActionInterface() -> QAccessibleActionInterface { callLocalFunction(l: ["", Pointer(), ___className, "ActionInterface"]) as! QAccessibleActionInterface }
    public func ConnectBackgroundColor(f: @escaping () -> QColor) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectBackgroundColor", "___REMOTE_CALLBACK___"], f: { (_: [Any]) -> Any in f() } as Any) }
    public func DisconnectBackgroundColor() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectBackgroundColor"]) }
    public func BackgroundColor() -> QColor { callLocalFunction(l: ["", Pointer(), ___className, "BackgroundColor"]) as! QColor }
    public func BackgroundColorDefault() -> QColor { callLocalFunction(l: ["", Pointer(), ___className, "BackgroundColorDefault"]) as! QColor }
    public func ConnectChild(f: @escaping (_ index: Int) -> QAccessibleInterface) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectChild", "___REMOTE_CALLBACK___"], f: { (inp: [Any]) -> Any in f(Int(inp[0] as! Float)) } as Any) }
    public func DisconnectChild() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectChild"]) }
    public func Child(index: Int) -> QAccessibleInterface { callLocalFunction(l: ["", Pointer(), ___className, "Child", index as Any]) as! QAccessibleInterface }
    public func ConnectChildAt(f: @escaping (_ x: Int, _ y: Int) -> QAccessibleInterface) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectChildAt", "___REMOTE_CALLBACK___"], f: { (inp: [Any]) -> Any in f(Int(inp[0] as! Float), Int(inp[1] as! Float)) } as Any) }
    public func DisconnectChildAt() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectChildAt"]) }
    public func ChildAt(x: Int, y: Int) -> QAccessibleInterface { callLocalFunction(l: ["", Pointer(), ___className, "ChildAt", x as Any, y as Any]) as! QAccessibleInterface }
    public func ConnectChildCount(f: @escaping () -> Int) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectChildCount", "___REMOTE_CALLBACK___"], f: { (_: [Any]) -> Any in f() } as Any) }
    public func DisconnectChildCount() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectChildCount"]) }
    public func ChildCount() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "ChildCount"]) as! Float) }
    public func ConnectFocusChild(f: @escaping () -> QAccessibleInterface) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectFocusChild", "___REMOTE_CALLBACK___"], f: { (_: [Any]) -> Any in f() } as Any) }
    public func DisconnectFocusChild() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectFocusChild"]) }
    public func FocusChild() -> QAccessibleInterface { callLocalFunction(l: ["", Pointer(), ___className, "FocusChild"]) as! QAccessibleInterface }
    public func FocusChildDefault() -> QAccessibleInterface { callLocalFunction(l: ["", Pointer(), ___className, "FocusChildDefault"]) as! QAccessibleInterface }
    public func ConnectForegroundColor(f: @escaping () -> QColor) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectForegroundColor", "___REMOTE_CALLBACK___"], f: { (_: [Any]) -> Any in f() } as Any) }
    public func DisconnectForegroundColor() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectForegroundColor"]) }
    public func ForegroundColor() -> QColor { callLocalFunction(l: ["", Pointer(), ___className, "ForegroundColor"]) as! QColor }
    public func ForegroundColorDefault() -> QColor { callLocalFunction(l: ["", Pointer(), ___className, "ForegroundColorDefault"]) as! QColor }
    public func ConnectIndexOfChild(f: @escaping (_ child: QAccessibleInterface) -> Int) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectIndexOfChild", "___REMOTE_CALLBACK___"], f: { (inp: [Any]) -> Any in f(inp[0] as! QAccessibleInterface) } as Any) }
    public func DisconnectIndexOfChild() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectIndexOfChild"]) }
    public func IndexOfChild(child: QAccessibleInterface_ITF? = nil) -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "IndexOfChild", child as Any]) as! Float) }
    public func ConnectInterface_cast(f: @escaping (_ ty: Int) -> Int) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectInterface_cast", "___REMOTE_CALLBACK___"], f: { (inp: [Any]) -> Any in f(Int(inp[0] as! Float)) } as Any) }
    public func DisconnectInterface_cast() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectInterface_cast"]) }
    public func Interface_cast(ty: Int) -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "Interface_cast", ty as Any]) as! Float) }
    public func Interface_castDefault(ty: Int) -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "Interface_castDefault", ty as Any]) as! Float) }
    public func ConnectIsValid(f: @escaping () -> Bool) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectIsValid", "___REMOTE_CALLBACK___"], f: { (_: [Any]) -> Any in f() } as Any) }
    public func DisconnectIsValid() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectIsValid"]) }
    public func IsValid() -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "IsValid"]) as! Bool }
    public func ConnectObject(f: @escaping () -> QObject) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectObject", "___REMOTE_CALLBACK___"], f: { (_: [Any]) -> Any in f() } as Any) }
    public func DisconnectObject() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectObject"]) }
    public func Object() -> QObject { callLocalFunction(l: ["", Pointer(), ___className, "Object"]) as! QObject }
    public func ConnectParent(f: @escaping () -> QAccessibleInterface) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectParent", "___REMOTE_CALLBACK___"], f: { (_: [Any]) -> Any in f() } as Any) }
    public func DisconnectParent() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectParent"]) }
    public func Parent() -> QAccessibleInterface { callLocalFunction(l: ["", Pointer(), ___className, "Parent"]) as! QAccessibleInterface }
    public func ConnectRect(f: @escaping () -> QRect) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectRect", "___REMOTE_CALLBACK___"], f: { (_: [Any]) -> Any in f() } as Any) }
    public func DisconnectRect() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectRect"]) }
    public func Rect() -> QRect { callLocalFunction(l: ["", Pointer(), ___className, "Rect"]) as! QRect }
    public func ConnectRole(f: @escaping () -> Int) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectRole", "___REMOTE_CALLBACK___"], f: { (_: [Any]) -> Any in f() } as Any) }
    public func DisconnectRole() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectRole"]) }
    public func Role() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "Role"]) as! Float) }
    public func ConnectSetText(f: @escaping (_ t: Int, _ text: String) -> Void) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectSetText", "___REMOTE_CALLBACK___"], f: { (inp: [Any]) -> Any in f(Int(inp[0] as! Float), inp[1] as! String) } as Any) }
    public func DisconnectSetText() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectSetText"]) }
    public func SetText(t: Int, text: String) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetText", t as Any, text as Any]) }
    public func TableCellInterface() -> QAccessibleTableCellInterface { callLocalFunction(l: ["", Pointer(), ___className, "TableCellInterface"]) as! QAccessibleTableCellInterface }
    public func TableInterface() -> QAccessibleTableInterface { callLocalFunction(l: ["", Pointer(), ___className, "TableInterface"]) as! QAccessibleTableInterface }
    public func ConnectText(f: @escaping (_ t: Int) -> String) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectText", "___REMOTE_CALLBACK___"], f: { (inp: [Any]) -> Any in f(Int(inp[0] as! Float)) } as Any) }
    public func DisconnectText() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectText"]) }
    public func Text(t: Int) -> String { callLocalFunction(l: ["", Pointer(), ___className, "Text", t as Any]) as! String }
    public func TextInterface() -> QAccessibleTextInterface { callLocalFunction(l: ["", Pointer(), ___className, "TextInterface"]) as! QAccessibleTextInterface }
    public func ValueInterface() -> QAccessibleValueInterface { callLocalFunction(l: ["", Pointer(), ___className, "ValueInterface"]) as! QAccessibleValueInterface }
    public func ConnectWindow(f: @escaping () -> QWindow) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectWindow", "___REMOTE_CALLBACK___"], f: { (_: [Any]) -> Any in f() } as Any) }
    public func DisconnectWindow() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectWindow"]) }
    public func Window() -> QWindow { callLocalFunction(l: ["", Pointer(), ___className, "Window"]) as! QWindow }
    public func WindowDefault() -> QWindow { callLocalFunction(l: ["", Pointer(), ___className, "WindowDefault"]) as! QWindow }
    public func ConnectDestroyQAccessibleInterface(f: @escaping () -> Void) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectDestroyQAccessibleInterface", "___REMOTE_CALLBACK___"], f: { (_: [Any]) -> Any in f() } as Any) }
    public func DisconnectDestroyQAccessibleInterface() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectDestroyQAccessibleInterface"]) }
    public func DestroyQAccessibleInterface() { _ = callLocalFunction(l: ["", Pointer(), ___className, "DestroyQAccessibleInterface"]) }
    public func DestroyQAccessibleInterfaceDefault() { _ = callLocalFunction(l: ["", Pointer(), ___className, "DestroyQAccessibleInterfaceDefault"]) }
}

public func NewQAccessibleInterfaceFromPointer(ptr: String) -> QAccessibleInterface { let r = QAccessibleInterface(); r.initFrom(p: ptr, n: "gui.QAccessibleInterface"); return r }
public protocol QAccessibleObject_ITF: QAccessibleInterface_ITF {
    func QAccessibleObject_PTR() -> QAccessibleObject
}

public class QAccessibleObject: QAccessibleInterface, QAccessibleObject_ITF {
    public func QAccessibleObject_PTR() -> QAccessibleObject { callLocalFunction(l: ["", Pointer(), ___className, "QAccessibleObject_PTR"]) as! QAccessibleObject }
    override public func ConnectChildAt(f: @escaping (_ x: Int, _ y: Int) -> QAccessibleInterface) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectChildAt", "___REMOTE_CALLBACK___"], f: { (inp: [Any]) -> Any in f(Int(inp[0] as! Float), Int(inp[1] as! Float)) } as Any) }
    override public func DisconnectChildAt() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectChildAt"]) }
    override public func ChildAt(x: Int, y: Int) -> QAccessibleInterface { callLocalFunction(l: ["", Pointer(), ___className, "ChildAt", x as Any, y as Any]) as! QAccessibleInterface }
    public func ChildAtDefault(x: Int, y: Int) -> QAccessibleInterface { callLocalFunction(l: ["", Pointer(), ___className, "ChildAtDefault", x as Any, y as Any]) as! QAccessibleInterface }
    override public func ConnectIsValid(f: @escaping () -> Bool) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectIsValid", "___REMOTE_CALLBACK___"], f: { (_: [Any]) -> Any in f() } as Any) }
    override public func DisconnectIsValid() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectIsValid"]) }
    override public func IsValid() -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "IsValid"]) as! Bool }
    public func IsValidDefault() -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "IsValidDefault"]) as! Bool }
    override public func ConnectObject(f: @escaping () -> QObject) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectObject", "___REMOTE_CALLBACK___"], f: { (_: [Any]) -> Any in f() } as Any) }
    override public func DisconnectObject() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectObject"]) }
    override public func Object() -> QObject { callLocalFunction(l: ["", Pointer(), ___className, "Object"]) as! QObject }
    public func ObjectDefault() -> QObject { callLocalFunction(l: ["", Pointer(), ___className, "ObjectDefault"]) as! QObject }
    override public func ConnectRect(f: @escaping () -> QRect) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectRect", "___REMOTE_CALLBACK___"], f: { (_: [Any]) -> Any in f() } as Any) }
    override public func DisconnectRect() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectRect"]) }
    override public func Rect() -> QRect { callLocalFunction(l: ["", Pointer(), ___className, "Rect"]) as! QRect }
    public func RectDefault() -> QRect { callLocalFunction(l: ["", Pointer(), ___className, "RectDefault"]) as! QRect }
    override public func ConnectSetText(f: @escaping (_ t: Int, _ text: String) -> Void) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectSetText", "___REMOTE_CALLBACK___"], f: { (inp: [Any]) -> Any in f(Int(inp[0] as! Float), inp[1] as! String) } as Any) }
    override public func DisconnectSetText() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectSetText"]) }
    override public func SetText(t: Int, text: String) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetText", t as Any, text as Any]) }
    public func SetTextDefault(t: Int, text: String) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetTextDefault", t as Any, text as Any]) }
    public func ConnectDestroyQAccessibleObject(f: @escaping () -> Void) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectDestroyQAccessibleObject", "___REMOTE_CALLBACK___"], f: { (_: [Any]) -> Any in f() } as Any) }
    public func DisconnectDestroyQAccessibleObject() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectDestroyQAccessibleObject"]) }
    public func DestroyQAccessibleObject() { _ = callLocalFunction(l: ["", Pointer(), ___className, "DestroyQAccessibleObject"]) }
    public func DestroyQAccessibleObjectDefault() { _ = callLocalFunction(l: ["", Pointer(), ___className, "DestroyQAccessibleObjectDefault"]) }
    override public func Child(index: Int) -> QAccessibleInterface { callLocalFunction(l: ["", Pointer(), ___className, "Child", index as Any]) as! QAccessibleInterface }
    public func ChildDefault(index: Int) -> QAccessibleInterface { callLocalFunction(l: ["", Pointer(), ___className, "ChildDefault", index as Any]) as! QAccessibleInterface }
    override public func ChildCount() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "ChildCount"]) as! Float) }
    public func ChildCountDefault() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "ChildCountDefault"]) as! Float) }
    override public func IndexOfChild(child: QAccessibleInterface_ITF? = nil) -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "IndexOfChild", child as Any]) as! Float) }
    public func IndexOfChildDefault(child: QAccessibleInterface_ITF? = nil) -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "IndexOfChildDefault", child as Any]) as! Float) }
    override public func Parent() -> QAccessibleInterface { callLocalFunction(l: ["", Pointer(), ___className, "Parent"]) as! QAccessibleInterface }
    public func ParentDefault() -> QAccessibleInterface { callLocalFunction(l: ["", Pointer(), ___className, "ParentDefault"]) as! QAccessibleInterface }
    override public func Role() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "Role"]) as! Float) }
    public func RoleDefault() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "RoleDefault"]) as! Float) }
    override public func Text(t: Int) -> String { callLocalFunction(l: ["", Pointer(), ___className, "Text", t as Any]) as! String }
    public func TextDefault(t: Int) -> String { callLocalFunction(l: ["", Pointer(), ___className, "TextDefault", t as Any]) as! String }
}

public func NewQAccessibleObjectFromPointer(ptr: String) -> QAccessibleObject { let r = QAccessibleObject(); r.initFrom(p: ptr, n: "gui.QAccessibleObject"); return r }
public protocol QAccessiblePlugin_ITF: QObject_ITF {
    func QAccessiblePlugin_PTR() -> QAccessiblePlugin
}

public class QAccessiblePlugin: QObject, QAccessiblePlugin_ITF {
    public func QAccessiblePlugin_PTR() -> QAccessiblePlugin { callLocalFunction(l: ["", Pointer(), ___className, "QAccessiblePlugin_PTR"]) as! QAccessiblePlugin }
    public func ConnectCreate(f: @escaping (_ key: String, _ object: QObject) -> QAccessibleInterface) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectCreate", "___REMOTE_CALLBACK___"], f: { (inp: [Any]) -> Any in f(inp[0] as! String, inp[1] as! QObject) } as Any) }
    public func DisconnectCreate() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectCreate"]) }
    public func Create(key: String, object: QObject_ITF? = nil) -> QAccessibleInterface { callLocalFunction(l: ["", Pointer(), ___className, "Create", key as Any, object as Any]) as! QAccessibleInterface }
    public func ConnectDestroyQAccessiblePlugin(f: @escaping () -> Void) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectDestroyQAccessiblePlugin", "___REMOTE_CALLBACK___"], f: { (_: [Any]) -> Any in f() } as Any) }
    public func DisconnectDestroyQAccessiblePlugin() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectDestroyQAccessiblePlugin"]) }
    public func DestroyQAccessiblePlugin() { _ = callLocalFunction(l: ["", Pointer(), ___className, "DestroyQAccessiblePlugin"]) }
    public func DestroyQAccessiblePluginDefault() { _ = callLocalFunction(l: ["", Pointer(), ___className, "DestroyQAccessiblePluginDefault"]) }
    override public func ChildEventDefault(event: QChildEvent_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "ChildEventDefault", event as Any]) }
    override public func ConnectNotifyDefault(sign: QMetaMethod_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "ConnectNotifyDefault", sign as Any]) }
    override public func CustomEventDefault(event: QEvent_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "CustomEventDefault", event as Any]) }
    override public func DeleteLaterDefault() { _ = callLocalFunction(l: ["", Pointer(), ___className, "DeleteLaterDefault"]) }
    override public func DisconnectNotifyDefault(sign: QMetaMethod_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "DisconnectNotifyDefault", sign as Any]) }
    override public func EventDefault(e: QEvent_ITF? = nil) -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "EventDefault", e as Any]) as! Bool }
    override public func EventFilterDefault(watched: QObject_ITF? = nil, event: QEvent_ITF? = nil) -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "EventFilterDefault", watched as Any, event as Any]) as! Bool }
    override public func MetaObjectDefault() -> QMetaObject { callLocalFunction(l: ["", Pointer(), ___className, "MetaObjectDefault"]) as! QMetaObject }
    override public func TimerEventDefault(event: QTimerEvent_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "TimerEventDefault", event as Any]) }
}

public func NewQAccessiblePluginFromPointer(ptr: String) -> QAccessiblePlugin { let r = QAccessiblePlugin(); r.initFrom(p: ptr, n: "gui.QAccessiblePlugin"); return r }
public func NewQAccessiblePlugin(parent: QObject_ITF? = nil) -> QAccessiblePlugin { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.NewQAccessiblePlugin", "", parent as Any]) as! QAccessiblePlugin }
public protocol QAccessibleStateChangeEvent_ITF: QAccessibleEvent_ITF {
    func QAccessibleStateChangeEvent_PTR() -> QAccessibleStateChangeEvent
}

public class QAccessibleStateChangeEvent: QAccessibleEvent, QAccessibleStateChangeEvent_ITF {
    public func QAccessibleStateChangeEvent_PTR() -> QAccessibleStateChangeEvent { callLocalFunction(l: ["", Pointer(), ___className, "QAccessibleStateChangeEvent_PTR"]) as! QAccessibleStateChangeEvent }
    public func DestroyQAccessibleStateChangeEvent() { _ = callLocalFunction(l: ["", Pointer(), ___className, "DestroyQAccessibleStateChangeEvent"]) }
}

public func NewQAccessibleStateChangeEventFromPointer(ptr: String) -> QAccessibleStateChangeEvent { let r = QAccessibleStateChangeEvent(); r.initFrom(p: ptr, n: "gui.QAccessibleStateChangeEvent"); return r }
public protocol QAccessibleTableCellInterface_ITF {
    func QAccessibleTableCellInterface_PTR() -> QAccessibleTableCellInterface
}

public class QAccessibleTableCellInterface: Internal, QAccessibleTableCellInterface_ITF {
    public func QAccessibleTableCellInterface_PTR() -> QAccessibleTableCellInterface { callLocalFunction(l: ["", Pointer(), ___className, "QAccessibleTableCellInterface_PTR"]) as! QAccessibleTableCellInterface }
    public func ConnectColumnExtent(f: @escaping () -> Int) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectColumnExtent", "___REMOTE_CALLBACK___"], f: { (_: [Any]) -> Any in f() } as Any) }
    public func DisconnectColumnExtent() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectColumnExtent"]) }
    public func ColumnExtent() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "ColumnExtent"]) as! Float) }
    public func ConnectColumnHeaderCells(f: @escaping () -> [QAccessibleInterface]) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectColumnHeaderCells", "___REMOTE_CALLBACK___"], f: { (_: [Any]) -> Any in f() } as Any) }
    public func DisconnectColumnHeaderCells() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectColumnHeaderCells"]) }
    public func ColumnHeaderCells() -> [QAccessibleInterface] { callLocalFunction(l: ["", Pointer(), ___className, "ColumnHeaderCells"]) as! [QAccessibleInterface] }
    public func ConnectColumnIndex(f: @escaping () -> Int) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectColumnIndex", "___REMOTE_CALLBACK___"], f: { (_: [Any]) -> Any in f() } as Any) }
    public func DisconnectColumnIndex() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectColumnIndex"]) }
    public func ColumnIndex() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "ColumnIndex"]) as! Float) }
    public func ConnectIsSelected(f: @escaping () -> Bool) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectIsSelected", "___REMOTE_CALLBACK___"], f: { (_: [Any]) -> Any in f() } as Any) }
    public func DisconnectIsSelected() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectIsSelected"]) }
    public func IsSelected() -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "IsSelected"]) as! Bool }
    public func ConnectRowExtent(f: @escaping () -> Int) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectRowExtent", "___REMOTE_CALLBACK___"], f: { (_: [Any]) -> Any in f() } as Any) }
    public func DisconnectRowExtent() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectRowExtent"]) }
    public func RowExtent() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "RowExtent"]) as! Float) }
    public func ConnectRowHeaderCells(f: @escaping () -> [QAccessibleInterface]) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectRowHeaderCells", "___REMOTE_CALLBACK___"], f: { (_: [Any]) -> Any in f() } as Any) }
    public func DisconnectRowHeaderCells() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectRowHeaderCells"]) }
    public func RowHeaderCells() -> [QAccessibleInterface] { callLocalFunction(l: ["", Pointer(), ___className, "RowHeaderCells"]) as! [QAccessibleInterface] }
    public func ConnectRowIndex(f: @escaping () -> Int) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectRowIndex", "___REMOTE_CALLBACK___"], f: { (_: [Any]) -> Any in f() } as Any) }
    public func DisconnectRowIndex() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectRowIndex"]) }
    public func RowIndex() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "RowIndex"]) as! Float) }
    public func ConnectTable(f: @escaping () -> QAccessibleInterface) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectTable", "___REMOTE_CALLBACK___"], f: { (_: [Any]) -> Any in f() } as Any) }
    public func DisconnectTable() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectTable"]) }
    public func Table() -> QAccessibleInterface { callLocalFunction(l: ["", Pointer(), ___className, "Table"]) as! QAccessibleInterface }
    public func ConnectDestroyQAccessibleTableCellInterface(f: @escaping () -> Void) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectDestroyQAccessibleTableCellInterface", "___REMOTE_CALLBACK___"], f: { (_: [Any]) -> Any in f() } as Any) }
    public func DisconnectDestroyQAccessibleTableCellInterface() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectDestroyQAccessibleTableCellInterface"]) }
    public func DestroyQAccessibleTableCellInterface() { _ = callLocalFunction(l: ["", Pointer(), ___className, "DestroyQAccessibleTableCellInterface"]) }
    public func DestroyQAccessibleTableCellInterfaceDefault() { _ = callLocalFunction(l: ["", Pointer(), ___className, "DestroyQAccessibleTableCellInterfaceDefault"]) }
}

public func NewQAccessibleTableCellInterfaceFromPointer(ptr: String) -> QAccessibleTableCellInterface { let r = QAccessibleTableCellInterface(); r.initFrom(p: ptr, n: "gui.QAccessibleTableCellInterface"); return r }
public protocol QAccessibleTableInterface_ITF {
    func QAccessibleTableInterface_PTR() -> QAccessibleTableInterface
}

public class QAccessibleTableInterface: Internal, QAccessibleTableInterface_ITF {
    public func QAccessibleTableInterface_PTR() -> QAccessibleTableInterface { callLocalFunction(l: ["", Pointer(), ___className, "QAccessibleTableInterface_PTR"]) as! QAccessibleTableInterface }
    public func ConnectCaption(f: @escaping () -> QAccessibleInterface) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectCaption", "___REMOTE_CALLBACK___"], f: { (_: [Any]) -> Any in f() } as Any) }
    public func DisconnectCaption() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectCaption"]) }
    public func Caption() -> QAccessibleInterface { callLocalFunction(l: ["", Pointer(), ___className, "Caption"]) as! QAccessibleInterface }
    public func ConnectCellAt(f: @escaping (_ row: Int, _ column: Int) -> QAccessibleInterface) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectCellAt", "___REMOTE_CALLBACK___"], f: { (inp: [Any]) -> Any in f(Int(inp[0] as! Float), Int(inp[1] as! Float)) } as Any) }
    public func DisconnectCellAt() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectCellAt"]) }
    public func CellAt(row: Int, column: Int) -> QAccessibleInterface { callLocalFunction(l: ["", Pointer(), ___className, "CellAt", row as Any, column as Any]) as! QAccessibleInterface }
    public func ConnectColumnCount(f: @escaping () -> Int) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectColumnCount", "___REMOTE_CALLBACK___"], f: { (_: [Any]) -> Any in f() } as Any) }
    public func DisconnectColumnCount() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectColumnCount"]) }
    public func ColumnCount() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "ColumnCount"]) as! Float) }
    public func ConnectColumnDescription(f: @escaping (_ column: Int) -> String) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectColumnDescription", "___REMOTE_CALLBACK___"], f: { (inp: [Any]) -> Any in f(Int(inp[0] as! Float)) } as Any) }
    public func DisconnectColumnDescription() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectColumnDescription"]) }
    public func ColumnDescription(column: Int) -> String { callLocalFunction(l: ["", Pointer(), ___className, "ColumnDescription", column as Any]) as! String }
    public func ConnectIsColumnSelected(f: @escaping (_ column: Int) -> Bool) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectIsColumnSelected", "___REMOTE_CALLBACK___"], f: { (inp: [Any]) -> Any in f(Int(inp[0] as! Float)) } as Any) }
    public func DisconnectIsColumnSelected() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectIsColumnSelected"]) }
    public func IsColumnSelected(column: Int) -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "IsColumnSelected", column as Any]) as! Bool }
    public func ConnectIsRowSelected(f: @escaping (_ row: Int) -> Bool) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectIsRowSelected", "___REMOTE_CALLBACK___"], f: { (inp: [Any]) -> Any in f(Int(inp[0] as! Float)) } as Any) }
    public func DisconnectIsRowSelected() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectIsRowSelected"]) }
    public func IsRowSelected(row: Int) -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "IsRowSelected", row as Any]) as! Bool }
    public func ConnectModelChange(f: @escaping (_ event: QAccessibleTableModelChangeEvent) -> Void) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectModelChange", "___REMOTE_CALLBACK___"], f: { (inp: [Any]) -> Any in f(inp[0] as! QAccessibleTableModelChangeEvent) } as Any) }
    public func DisconnectModelChange() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectModelChange"]) }
    public func ModelChange(event: QAccessibleTableModelChangeEvent_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "ModelChange", event as Any]) }
    public func ConnectRowCount(f: @escaping () -> Int) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectRowCount", "___REMOTE_CALLBACK___"], f: { (_: [Any]) -> Any in f() } as Any) }
    public func DisconnectRowCount() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectRowCount"]) }
    public func RowCount() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "RowCount"]) as! Float) }
    public func ConnectRowDescription(f: @escaping (_ row: Int) -> String) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectRowDescription", "___REMOTE_CALLBACK___"], f: { (inp: [Any]) -> Any in f(Int(inp[0] as! Float)) } as Any) }
    public func DisconnectRowDescription() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectRowDescription"]) }
    public func RowDescription(row: Int) -> String { callLocalFunction(l: ["", Pointer(), ___className, "RowDescription", row as Any]) as! String }
    public func ConnectSelectColumn(f: @escaping (_ column: Int) -> Bool) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectSelectColumn", "___REMOTE_CALLBACK___"], f: { (inp: [Any]) -> Any in f(Int(inp[0] as! Float)) } as Any) }
    public func DisconnectSelectColumn() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectSelectColumn"]) }
    public func SelectColumn(column: Int) -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "SelectColumn", column as Any]) as! Bool }
    public func ConnectSelectRow(f: @escaping (_ row: Int) -> Bool) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectSelectRow", "___REMOTE_CALLBACK___"], f: { (inp: [Any]) -> Any in f(Int(inp[0] as! Float)) } as Any) }
    public func DisconnectSelectRow() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectSelectRow"]) }
    public func SelectRow(row: Int) -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "SelectRow", row as Any]) as! Bool }
    public func ConnectSelectedCellCount(f: @escaping () -> Int) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectSelectedCellCount", "___REMOTE_CALLBACK___"], f: { (_: [Any]) -> Any in f() } as Any) }
    public func DisconnectSelectedCellCount() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectSelectedCellCount"]) }
    public func SelectedCellCount() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "SelectedCellCount"]) as! Float) }
    public func ConnectSelectedCells(f: @escaping () -> [QAccessibleInterface]) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectSelectedCells", "___REMOTE_CALLBACK___"], f: { (_: [Any]) -> Any in f() } as Any) }
    public func DisconnectSelectedCells() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectSelectedCells"]) }
    public func SelectedCells() -> [QAccessibleInterface] { callLocalFunction(l: ["", Pointer(), ___className, "SelectedCells"]) as! [QAccessibleInterface] }
    public func ConnectSelectedColumnCount(f: @escaping () -> Int) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectSelectedColumnCount", "___REMOTE_CALLBACK___"], f: { (_: [Any]) -> Any in f() } as Any) }
    public func DisconnectSelectedColumnCount() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectSelectedColumnCount"]) }
    public func SelectedColumnCount() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "SelectedColumnCount"]) as! Float) }
    public func ConnectSelectedColumns(f: @escaping () -> [Int]) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectSelectedColumns", "___REMOTE_CALLBACK___"], f: { (_: [Any]) -> Any in f() } as Any) }
    public func DisconnectSelectedColumns() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectSelectedColumns"]) }
    public func SelectedColumns() -> [Int] { callLocalFunction(l: ["", Pointer(), ___className, "SelectedColumns"]) as! [Int] }
    public func ConnectSelectedRowCount(f: @escaping () -> Int) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectSelectedRowCount", "___REMOTE_CALLBACK___"], f: { (_: [Any]) -> Any in f() } as Any) }
    public func DisconnectSelectedRowCount() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectSelectedRowCount"]) }
    public func SelectedRowCount() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "SelectedRowCount"]) as! Float) }
    public func ConnectSelectedRows(f: @escaping () -> [Int]) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectSelectedRows", "___REMOTE_CALLBACK___"], f: { (_: [Any]) -> Any in f() } as Any) }
    public func DisconnectSelectedRows() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectSelectedRows"]) }
    public func SelectedRows() -> [Int] { callLocalFunction(l: ["", Pointer(), ___className, "SelectedRows"]) as! [Int] }
    public func ConnectSummary(f: @escaping () -> QAccessibleInterface) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectSummary", "___REMOTE_CALLBACK___"], f: { (_: [Any]) -> Any in f() } as Any) }
    public func DisconnectSummary() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectSummary"]) }
    public func Summary() -> QAccessibleInterface { callLocalFunction(l: ["", Pointer(), ___className, "Summary"]) as! QAccessibleInterface }
    public func ConnectUnselectColumn(f: @escaping (_ column: Int) -> Bool) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectUnselectColumn", "___REMOTE_CALLBACK___"], f: { (inp: [Any]) -> Any in f(Int(inp[0] as! Float)) } as Any) }
    public func DisconnectUnselectColumn() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectUnselectColumn"]) }
    public func UnselectColumn(column: Int) -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "UnselectColumn", column as Any]) as! Bool }
    public func ConnectUnselectRow(f: @escaping (_ row: Int) -> Bool) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectUnselectRow", "___REMOTE_CALLBACK___"], f: { (inp: [Any]) -> Any in f(Int(inp[0] as! Float)) } as Any) }
    public func DisconnectUnselectRow() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectUnselectRow"]) }
    public func UnselectRow(row: Int) -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "UnselectRow", row as Any]) as! Bool }
    public func ConnectDestroyQAccessibleTableInterface(f: @escaping () -> Void) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectDestroyQAccessibleTableInterface", "___REMOTE_CALLBACK___"], f: { (_: [Any]) -> Any in f() } as Any) }
    public func DisconnectDestroyQAccessibleTableInterface() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectDestroyQAccessibleTableInterface"]) }
    public func DestroyQAccessibleTableInterface() { _ = callLocalFunction(l: ["", Pointer(), ___className, "DestroyQAccessibleTableInterface"]) }
    public func DestroyQAccessibleTableInterfaceDefault() { _ = callLocalFunction(l: ["", Pointer(), ___className, "DestroyQAccessibleTableInterfaceDefault"]) }
}

public func NewQAccessibleTableInterfaceFromPointer(ptr: String) -> QAccessibleTableInterface { let r = QAccessibleTableInterface(); r.initFrom(p: ptr, n: "gui.QAccessibleTableInterface"); return r }
public protocol QAccessibleTableModelChangeEvent_ITF: QAccessibleEvent_ITF {
    func QAccessibleTableModelChangeEvent_PTR() -> QAccessibleTableModelChangeEvent
}

public class QAccessibleTableModelChangeEvent: QAccessibleEvent, QAccessibleTableModelChangeEvent_ITF {
    public func QAccessibleTableModelChangeEvent_PTR() -> QAccessibleTableModelChangeEvent { callLocalFunction(l: ["", Pointer(), ___className, "QAccessibleTableModelChangeEvent_PTR"]) as! QAccessibleTableModelChangeEvent }
    public func DestroyQAccessibleTableModelChangeEvent() { _ = callLocalFunction(l: ["", Pointer(), ___className, "DestroyQAccessibleTableModelChangeEvent"]) }
    public func FirstColumn() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "FirstColumn"]) as! Float) }
    public func FirstRow() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "FirstRow"]) as! Float) }
    public func LastColumn() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "LastColumn"]) as! Float) }
    public func LastRow() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "LastRow"]) as! Float) }
    public func ModelChangeType() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "ModelChangeType"]) as! Float) }
    public func SetFirstColumn(column: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetFirstColumn", column as Any]) }
    public func SetFirstRow(row: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetFirstRow", row as Any]) }
    public func SetLastColumn(column: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetLastColumn", column as Any]) }
    public func SetLastRow(row: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetLastRow", row as Any]) }
    public func SetModelChangeType(changeType: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetModelChangeType", changeType as Any]) }
}

public func NewQAccessibleTableModelChangeEventFromPointer(ptr: String) -> QAccessibleTableModelChangeEvent { let r = QAccessibleTableModelChangeEvent(); r.initFrom(p: ptr, n: "gui.QAccessibleTableModelChangeEvent"); return r }
public func NewQAccessibleTableModelChangeEvent(object: QObject_ITF? = nil, changeType: Int) -> QAccessibleTableModelChangeEvent { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.NewQAccessibleTableModelChangeEvent", "", object as Any, changeType as Any]) as! QAccessibleTableModelChangeEvent }
public func NewQAccessibleTableModelChangeEvent2(iface: QAccessibleInterface_ITF? = nil, changeType: Int) -> QAccessibleTableModelChangeEvent { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.NewQAccessibleTableModelChangeEvent2", "", iface as Any, changeType as Any]) as! QAccessibleTableModelChangeEvent }
public protocol QAccessibleTextCursorEvent_ITF: QAccessibleEvent_ITF {
    func QAccessibleTextCursorEvent_PTR() -> QAccessibleTextCursorEvent
}

public class QAccessibleTextCursorEvent: QAccessibleEvent, QAccessibleTextCursorEvent_ITF {
    public func QAccessibleTextCursorEvent_PTR() -> QAccessibleTextCursorEvent { callLocalFunction(l: ["", Pointer(), ___className, "QAccessibleTextCursorEvent_PTR"]) as! QAccessibleTextCursorEvent }
    public func DestroyQAccessibleTextCursorEvent() { _ = callLocalFunction(l: ["", Pointer(), ___className, "DestroyQAccessibleTextCursorEvent"]) }
    public func CursorPosition() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "CursorPosition"]) as! Float) }
    public func SetCursorPosition(position: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetCursorPosition", position as Any]) }
}

public func NewQAccessibleTextCursorEventFromPointer(ptr: String) -> QAccessibleTextCursorEvent { let r = QAccessibleTextCursorEvent(); r.initFrom(p: ptr, n: "gui.QAccessibleTextCursorEvent"); return r }
public func NewQAccessibleTextCursorEvent(object: QObject_ITF? = nil, cursorPos: Int) -> QAccessibleTextCursorEvent { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.NewQAccessibleTextCursorEvent", "", object as Any, cursorPos as Any]) as! QAccessibleTextCursorEvent }
public func NewQAccessibleTextCursorEvent2(iface: QAccessibleInterface_ITF? = nil, cursorPos: Int) -> QAccessibleTextCursorEvent { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.NewQAccessibleTextCursorEvent2", "", iface as Any, cursorPos as Any]) as! QAccessibleTextCursorEvent }
public protocol QAccessibleTextInsertEvent_ITF: QAccessibleTextCursorEvent_ITF {
    func QAccessibleTextInsertEvent_PTR() -> QAccessibleTextInsertEvent
}

public class QAccessibleTextInsertEvent: QAccessibleTextCursorEvent, QAccessibleTextInsertEvent_ITF {
    public func QAccessibleTextInsertEvent_PTR() -> QAccessibleTextInsertEvent { callLocalFunction(l: ["", Pointer(), ___className, "QAccessibleTextInsertEvent_PTR"]) as! QAccessibleTextInsertEvent }
    public func DestroyQAccessibleTextInsertEvent() { _ = callLocalFunction(l: ["", Pointer(), ___className, "DestroyQAccessibleTextInsertEvent"]) }
    public func ChangePosition() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "ChangePosition"]) as! Float) }
    public func TextInserted() -> String { callLocalFunction(l: ["", Pointer(), ___className, "TextInserted"]) as! String }
}

public func NewQAccessibleTextInsertEventFromPointer(ptr: String) -> QAccessibleTextInsertEvent { let r = QAccessibleTextInsertEvent(); r.initFrom(p: ptr, n: "gui.QAccessibleTextInsertEvent"); return r }
public func NewQAccessibleTextInsertEvent(object: QObject_ITF? = nil, position: Int, text: String) -> QAccessibleTextInsertEvent { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.NewQAccessibleTextInsertEvent", "", object as Any, position as Any, text as Any]) as! QAccessibleTextInsertEvent }
public func NewQAccessibleTextInsertEvent2(iface: QAccessibleInterface_ITF? = nil, position: Int, text: String) -> QAccessibleTextInsertEvent { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.NewQAccessibleTextInsertEvent2", "", iface as Any, position as Any, text as Any]) as! QAccessibleTextInsertEvent }
public protocol QAccessibleTextInterface_ITF {
    func QAccessibleTextInterface_PTR() -> QAccessibleTextInterface
}

public class QAccessibleTextInterface: Internal, QAccessibleTextInterface_ITF {
    public func QAccessibleTextInterface_PTR() -> QAccessibleTextInterface { callLocalFunction(l: ["", Pointer(), ___className, "QAccessibleTextInterface_PTR"]) as! QAccessibleTextInterface }
    public func ConnectAddSelection(f: @escaping (_ startOffset: Int, _ endOffset: Int) -> Void) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectAddSelection", "___REMOTE_CALLBACK___"], f: { (inp: [Any]) -> Any in f(Int(inp[0] as! Float), Int(inp[1] as! Float)) } as Any) }
    public func DisconnectAddSelection() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectAddSelection"]) }
    public func AddSelection(startOffset: Int, endOffset: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "AddSelection", startOffset as Any, endOffset as Any]) }
    public func ConnectCharacterCount(f: @escaping () -> Int) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectCharacterCount", "___REMOTE_CALLBACK___"], f: { (_: [Any]) -> Any in f() } as Any) }
    public func DisconnectCharacterCount() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectCharacterCount"]) }
    public func CharacterCount() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "CharacterCount"]) as! Float) }
    public func ConnectCharacterRect(f: @escaping (_ offset: Int) -> QRect) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectCharacterRect", "___REMOTE_CALLBACK___"], f: { (inp: [Any]) -> Any in f(Int(inp[0] as! Float)) } as Any) }
    public func DisconnectCharacterRect() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectCharacterRect"]) }
    public func CharacterRect(offset: Int) -> QRect { callLocalFunction(l: ["", Pointer(), ___className, "CharacterRect", offset as Any]) as! QRect }
    public func ConnectCursorPosition(f: @escaping () -> Int) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectCursorPosition", "___REMOTE_CALLBACK___"], f: { (_: [Any]) -> Any in f() } as Any) }
    public func DisconnectCursorPosition() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectCursorPosition"]) }
    public func CursorPosition() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "CursorPosition"]) as! Float) }
    public func ConnectOffsetAtPoint(f: @escaping (_ point: QPoint) -> Int) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectOffsetAtPoint", "___REMOTE_CALLBACK___"], f: { (inp: [Any]) -> Any in f(inp[0] as! QPoint) } as Any) }
    public func DisconnectOffsetAtPoint() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectOffsetAtPoint"]) }
    public func OffsetAtPoint(point: QPoint_ITF? = nil) -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "OffsetAtPoint", point as Any]) as! Float) }
    public func ConnectRemoveSelection(f: @escaping (_ selectionIndex: Int) -> Void) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectRemoveSelection", "___REMOTE_CALLBACK___"], f: { (inp: [Any]) -> Any in f(Int(inp[0] as! Float)) } as Any) }
    public func DisconnectRemoveSelection() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectRemoveSelection"]) }
    public func RemoveSelection(selectionIndex: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "RemoveSelection", selectionIndex as Any]) }
    public func ConnectScrollToSubstring(f: @escaping (_ startIndex: Int, _ endIndex: Int) -> Void) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectScrollToSubstring", "___REMOTE_CALLBACK___"], f: { (inp: [Any]) -> Any in f(Int(inp[0] as! Float), Int(inp[1] as! Float)) } as Any) }
    public func DisconnectScrollToSubstring() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectScrollToSubstring"]) }
    public func ScrollToSubstring(startIndex: Int, endIndex: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "ScrollToSubstring", startIndex as Any, endIndex as Any]) }
    public func ConnectSelection(f: @escaping (_ selectionIndex: Int, _ startOffset: Int, _ endOffset: Int) -> Void) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectSelection", "___REMOTE_CALLBACK___"], f: { (inp: [Any]) -> Any in f(Int(inp[0] as! Float), Int(inp[1] as! Float), Int(inp[2] as! Float)) } as Any) }
    public func DisconnectSelection() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectSelection"]) }
    public func Selection(selectionIndex: Int, startOffset: Int, endOffset: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "Selection", selectionIndex as Any, startOffset as Any, endOffset as Any]) }
    public func ConnectSelectionCount(f: @escaping () -> Int) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectSelectionCount", "___REMOTE_CALLBACK___"], f: { (_: [Any]) -> Any in f() } as Any) }
    public func DisconnectSelectionCount() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectSelectionCount"]) }
    public func SelectionCount() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "SelectionCount"]) as! Float) }
    public func ConnectSetCursorPosition(f: @escaping (_ position: Int) -> Void) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectSetCursorPosition", "___REMOTE_CALLBACK___"], f: { (inp: [Any]) -> Any in f(Int(inp[0] as! Float)) } as Any) }
    public func DisconnectSetCursorPosition() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectSetCursorPosition"]) }
    public func SetCursorPosition(position: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetCursorPosition", position as Any]) }
    public func ConnectSetSelection(f: @escaping (_ selectionIndex: Int, _ startOffset: Int, _ endOffset: Int) -> Void) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectSetSelection", "___REMOTE_CALLBACK___"], f: { (inp: [Any]) -> Any in f(Int(inp[0] as! Float), Int(inp[1] as! Float), Int(inp[2] as! Float)) } as Any) }
    public func DisconnectSetSelection() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectSetSelection"]) }
    public func SetSelection(selectionIndex: Int, startOffset: Int, endOffset: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetSelection", selectionIndex as Any, startOffset as Any, endOffset as Any]) }
    public func ConnectText(f: @escaping (_ startOffset: Int, _ endOffset: Int) -> String) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectText", "___REMOTE_CALLBACK___"], f: { (inp: [Any]) -> Any in f(Int(inp[0] as! Float), Int(inp[1] as! Float)) } as Any) }
    public func DisconnectText() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectText"]) }
    public func Text(startOffset: Int, endOffset: Int) -> String { callLocalFunction(l: ["", Pointer(), ___className, "Text", startOffset as Any, endOffset as Any]) as! String }
    public func ConnectTextAfterOffset(f: @escaping (_ offset: Int, _ boundaryType: Int, _ startOffset: Int, _ endOffset: Int) -> String) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectTextAfterOffset", "___REMOTE_CALLBACK___"], f: { (inp: [Any]) -> Any in f(Int(inp[0] as! Float), Int(inp[1] as! Float), Int(inp[2] as! Float), Int(inp[3] as! Float)) } as Any) }
    public func DisconnectTextAfterOffset() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectTextAfterOffset"]) }
    public func TextAfterOffset(offset: Int, boundaryType: Int, startOffset: Int, endOffset: Int) -> String { callLocalFunction(l: ["", Pointer(), ___className, "TextAfterOffset", offset as Any, boundaryType as Any, startOffset as Any, endOffset as Any]) as! String }
    public func TextAfterOffsetDefault(offset: Int, boundaryType: Int, startOffset: Int, endOffset: Int) -> String { callLocalFunction(l: ["", Pointer(), ___className, "TextAfterOffsetDefault", offset as Any, boundaryType as Any, startOffset as Any, endOffset as Any]) as! String }
    public func ConnectTextAtOffset(f: @escaping (_ offset: Int, _ boundaryType: Int, _ startOffset: Int, _ endOffset: Int) -> String) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectTextAtOffset", "___REMOTE_CALLBACK___"], f: { (inp: [Any]) -> Any in f(Int(inp[0] as! Float), Int(inp[1] as! Float), Int(inp[2] as! Float), Int(inp[3] as! Float)) } as Any) }
    public func DisconnectTextAtOffset() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectTextAtOffset"]) }
    public func TextAtOffset(offset: Int, boundaryType: Int, startOffset: Int, endOffset: Int) -> String { callLocalFunction(l: ["", Pointer(), ___className, "TextAtOffset", offset as Any, boundaryType as Any, startOffset as Any, endOffset as Any]) as! String }
    public func TextAtOffsetDefault(offset: Int, boundaryType: Int, startOffset: Int, endOffset: Int) -> String { callLocalFunction(l: ["", Pointer(), ___className, "TextAtOffsetDefault", offset as Any, boundaryType as Any, startOffset as Any, endOffset as Any]) as! String }
    public func ConnectTextBeforeOffset(f: @escaping (_ offset: Int, _ boundaryType: Int, _ startOffset: Int, _ endOffset: Int) -> String) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectTextBeforeOffset", "___REMOTE_CALLBACK___"], f: { (inp: [Any]) -> Any in f(Int(inp[0] as! Float), Int(inp[1] as! Float), Int(inp[2] as! Float), Int(inp[3] as! Float)) } as Any) }
    public func DisconnectTextBeforeOffset() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectTextBeforeOffset"]) }
    public func TextBeforeOffset(offset: Int, boundaryType: Int, startOffset: Int, endOffset: Int) -> String { callLocalFunction(l: ["", Pointer(), ___className, "TextBeforeOffset", offset as Any, boundaryType as Any, startOffset as Any, endOffset as Any]) as! String }
    public func TextBeforeOffsetDefault(offset: Int, boundaryType: Int, startOffset: Int, endOffset: Int) -> String { callLocalFunction(l: ["", Pointer(), ___className, "TextBeforeOffsetDefault", offset as Any, boundaryType as Any, startOffset as Any, endOffset as Any]) as! String }
    public func ConnectDestroyQAccessibleTextInterface(f: @escaping () -> Void) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectDestroyQAccessibleTextInterface", "___REMOTE_CALLBACK___"], f: { (_: [Any]) -> Any in f() } as Any) }
    public func DisconnectDestroyQAccessibleTextInterface() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectDestroyQAccessibleTextInterface"]) }
    public func DestroyQAccessibleTextInterface() { _ = callLocalFunction(l: ["", Pointer(), ___className, "DestroyQAccessibleTextInterface"]) }
    public func DestroyQAccessibleTextInterfaceDefault() { _ = callLocalFunction(l: ["", Pointer(), ___className, "DestroyQAccessibleTextInterfaceDefault"]) }
}

public func NewQAccessibleTextInterfaceFromPointer(ptr: String) -> QAccessibleTextInterface { let r = QAccessibleTextInterface(); r.initFrom(p: ptr, n: "gui.QAccessibleTextInterface"); return r }
public protocol QAccessibleTextRemoveEvent_ITF: QAccessibleTextCursorEvent_ITF {
    func QAccessibleTextRemoveEvent_PTR() -> QAccessibleTextRemoveEvent
}

public class QAccessibleTextRemoveEvent: QAccessibleTextCursorEvent, QAccessibleTextRemoveEvent_ITF {
    public func QAccessibleTextRemoveEvent_PTR() -> QAccessibleTextRemoveEvent { callLocalFunction(l: ["", Pointer(), ___className, "QAccessibleTextRemoveEvent_PTR"]) as! QAccessibleTextRemoveEvent }
    public func DestroyQAccessibleTextRemoveEvent() { _ = callLocalFunction(l: ["", Pointer(), ___className, "DestroyQAccessibleTextRemoveEvent"]) }
    public func ChangePosition() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "ChangePosition"]) as! Float) }
    public func TextRemoved() -> String { callLocalFunction(l: ["", Pointer(), ___className, "TextRemoved"]) as! String }
}

public func NewQAccessibleTextRemoveEventFromPointer(ptr: String) -> QAccessibleTextRemoveEvent { let r = QAccessibleTextRemoveEvent(); r.initFrom(p: ptr, n: "gui.QAccessibleTextRemoveEvent"); return r }
public func NewQAccessibleTextRemoveEvent(object: QObject_ITF? = nil, position: Int, text: String) -> QAccessibleTextRemoveEvent { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.NewQAccessibleTextRemoveEvent", "", object as Any, position as Any, text as Any]) as! QAccessibleTextRemoveEvent }
public func NewQAccessibleTextRemoveEvent2(iface: QAccessibleInterface_ITF? = nil, position: Int, text: String) -> QAccessibleTextRemoveEvent { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.NewQAccessibleTextRemoveEvent2", "", iface as Any, position as Any, text as Any]) as! QAccessibleTextRemoveEvent }
public protocol QAccessibleTextSelectionEvent_ITF: QAccessibleTextCursorEvent_ITF {
    func QAccessibleTextSelectionEvent_PTR() -> QAccessibleTextSelectionEvent
}

public class QAccessibleTextSelectionEvent: QAccessibleTextCursorEvent, QAccessibleTextSelectionEvent_ITF {
    public func QAccessibleTextSelectionEvent_PTR() -> QAccessibleTextSelectionEvent { callLocalFunction(l: ["", Pointer(), ___className, "QAccessibleTextSelectionEvent_PTR"]) as! QAccessibleTextSelectionEvent }
    public func DestroyQAccessibleTextSelectionEvent() { _ = callLocalFunction(l: ["", Pointer(), ___className, "DestroyQAccessibleTextSelectionEvent"]) }
    public func SelectionEnd() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "SelectionEnd"]) as! Float) }
    public func SelectionStart() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "SelectionStart"]) as! Float) }
    public func SetSelection(start: Int, end: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetSelection", start as Any, end as Any]) }
}

public func NewQAccessibleTextSelectionEventFromPointer(ptr: String) -> QAccessibleTextSelectionEvent { let r = QAccessibleTextSelectionEvent(); r.initFrom(p: ptr, n: "gui.QAccessibleTextSelectionEvent"); return r }
public func NewQAccessibleTextSelectionEvent(object: QObject_ITF? = nil, start: Int, end: Int) -> QAccessibleTextSelectionEvent { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.NewQAccessibleTextSelectionEvent", "", object as Any, start as Any, end as Any]) as! QAccessibleTextSelectionEvent }
public func NewQAccessibleTextSelectionEvent2(iface: QAccessibleInterface_ITF? = nil, start: Int, end: Int) -> QAccessibleTextSelectionEvent { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.NewQAccessibleTextSelectionEvent2", "", iface as Any, start as Any, end as Any]) as! QAccessibleTextSelectionEvent }
public protocol QAccessibleTextUpdateEvent_ITF: QAccessibleTextCursorEvent_ITF {
    func QAccessibleTextUpdateEvent_PTR() -> QAccessibleTextUpdateEvent
}

public class QAccessibleTextUpdateEvent: QAccessibleTextCursorEvent, QAccessibleTextUpdateEvent_ITF {
    public func QAccessibleTextUpdateEvent_PTR() -> QAccessibleTextUpdateEvent { callLocalFunction(l: ["", Pointer(), ___className, "QAccessibleTextUpdateEvent_PTR"]) as! QAccessibleTextUpdateEvent }
    public func DestroyQAccessibleTextUpdateEvent() { _ = callLocalFunction(l: ["", Pointer(), ___className, "DestroyQAccessibleTextUpdateEvent"]) }
    public func ChangePosition() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "ChangePosition"]) as! Float) }
    public func TextInserted() -> String { callLocalFunction(l: ["", Pointer(), ___className, "TextInserted"]) as! String }
    public func TextRemoved() -> String { callLocalFunction(l: ["", Pointer(), ___className, "TextRemoved"]) as! String }
}

public func NewQAccessibleTextUpdateEventFromPointer(ptr: String) -> QAccessibleTextUpdateEvent { let r = QAccessibleTextUpdateEvent(); r.initFrom(p: ptr, n: "gui.QAccessibleTextUpdateEvent"); return r }
public func NewQAccessibleTextUpdateEvent(object: QObject_ITF? = nil, position: Int, oldText: String, text: String) -> QAccessibleTextUpdateEvent { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.NewQAccessibleTextUpdateEvent", "", object as Any, position as Any, oldText as Any, text as Any]) as! QAccessibleTextUpdateEvent }
public func NewQAccessibleTextUpdateEvent2(iface: QAccessibleInterface_ITF? = nil, position: Int, oldText: String, text: String) -> QAccessibleTextUpdateEvent { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.NewQAccessibleTextUpdateEvent2", "", iface as Any, position as Any, oldText as Any, text as Any]) as! QAccessibleTextUpdateEvent }
public protocol QAccessibleValueChangeEvent_ITF: QAccessibleEvent_ITF {
    func QAccessibleValueChangeEvent_PTR() -> QAccessibleValueChangeEvent
}

public class QAccessibleValueChangeEvent: QAccessibleEvent, QAccessibleValueChangeEvent_ITF {
    public func QAccessibleValueChangeEvent_PTR() -> QAccessibleValueChangeEvent { callLocalFunction(l: ["", Pointer(), ___className, "QAccessibleValueChangeEvent_PTR"]) as! QAccessibleValueChangeEvent }
    public func DestroyQAccessibleValueChangeEvent() { _ = callLocalFunction(l: ["", Pointer(), ___className, "DestroyQAccessibleValueChangeEvent"]) }
    public func SetValue(value: QVariant_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetValue", value as Any]) }
    public func Value() -> QVariant { callLocalFunction(l: ["", Pointer(), ___className, "Value"]) as! QVariant }
}

public func NewQAccessibleValueChangeEventFromPointer(ptr: String) -> QAccessibleValueChangeEvent { let r = QAccessibleValueChangeEvent(); r.initFrom(p: ptr, n: "gui.QAccessibleValueChangeEvent"); return r }
public func NewQAccessibleValueChangeEvent(object: QObject_ITF? = nil, value: QVariant_ITF? = nil) -> QAccessibleValueChangeEvent { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.NewQAccessibleValueChangeEvent", "", object as Any, value as Any]) as! QAccessibleValueChangeEvent }
public func NewQAccessibleValueChangeEvent2(iface: QAccessibleInterface_ITF? = nil, val: QVariant_ITF? = nil) -> QAccessibleValueChangeEvent { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.NewQAccessibleValueChangeEvent2", "", iface as Any, val as Any]) as! QAccessibleValueChangeEvent }
public protocol QAccessibleValueInterface_ITF {
    func QAccessibleValueInterface_PTR() -> QAccessibleValueInterface
}

public class QAccessibleValueInterface: Internal, QAccessibleValueInterface_ITF {
    public func QAccessibleValueInterface_PTR() -> QAccessibleValueInterface { callLocalFunction(l: ["", Pointer(), ___className, "QAccessibleValueInterface_PTR"]) as! QAccessibleValueInterface }
    public func ConnectCurrentValue(f: @escaping () -> QVariant) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectCurrentValue", "___REMOTE_CALLBACK___"], f: { (_: [Any]) -> Any in f() } as Any) }
    public func DisconnectCurrentValue() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectCurrentValue"]) }
    public func CurrentValue() -> QVariant { callLocalFunction(l: ["", Pointer(), ___className, "CurrentValue"]) as! QVariant }
    public func ConnectMaximumValue(f: @escaping () -> QVariant) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectMaximumValue", "___REMOTE_CALLBACK___"], f: { (_: [Any]) -> Any in f() } as Any) }
    public func DisconnectMaximumValue() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectMaximumValue"]) }
    public func MaximumValue() -> QVariant { callLocalFunction(l: ["", Pointer(), ___className, "MaximumValue"]) as! QVariant }
    public func ConnectMinimumStepSize(f: @escaping () -> QVariant) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectMinimumStepSize", "___REMOTE_CALLBACK___"], f: { (_: [Any]) -> Any in f() } as Any) }
    public func DisconnectMinimumStepSize() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectMinimumStepSize"]) }
    public func MinimumStepSize() -> QVariant { callLocalFunction(l: ["", Pointer(), ___className, "MinimumStepSize"]) as! QVariant }
    public func ConnectMinimumValue(f: @escaping () -> QVariant) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectMinimumValue", "___REMOTE_CALLBACK___"], f: { (_: [Any]) -> Any in f() } as Any) }
    public func DisconnectMinimumValue() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectMinimumValue"]) }
    public func MinimumValue() -> QVariant { callLocalFunction(l: ["", Pointer(), ___className, "MinimumValue"]) as! QVariant }
    public func ConnectSetCurrentValue(f: @escaping (_ value: QVariant) -> Void) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectSetCurrentValue", "___REMOTE_CALLBACK___"], f: { (inp: [Any]) -> Any in f(inp[0] as! QVariant) } as Any) }
    public func DisconnectSetCurrentValue() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectSetCurrentValue"]) }
    public func SetCurrentValue(value: QVariant_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetCurrentValue", value as Any]) }
    public func ConnectDestroyQAccessibleValueInterface(f: @escaping () -> Void) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectDestroyQAccessibleValueInterface", "___REMOTE_CALLBACK___"], f: { (_: [Any]) -> Any in f() } as Any) }
    public func DisconnectDestroyQAccessibleValueInterface() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectDestroyQAccessibleValueInterface"]) }
    public func DestroyQAccessibleValueInterface() { _ = callLocalFunction(l: ["", Pointer(), ___className, "DestroyQAccessibleValueInterface"]) }
    public func DestroyQAccessibleValueInterfaceDefault() { _ = callLocalFunction(l: ["", Pointer(), ___className, "DestroyQAccessibleValueInterfaceDefault"]) }
}

public func NewQAccessibleValueInterfaceFromPointer(ptr: String) -> QAccessibleValueInterface { let r = QAccessibleValueInterface(); r.initFrom(p: ptr, n: "gui.QAccessibleValueInterface"); return r }
public protocol QActionEvent_ITF: QEvent_ITF {
    func QActionEvent_PTR() -> QActionEvent
}

public class QActionEvent: QEvent, QActionEvent_ITF {
    public func QActionEvent_PTR() -> QActionEvent { callLocalFunction(l: ["", Pointer(), ___className, "QActionEvent_PTR"]) as! QActionEvent }
    public func DestroyQActionEvent() { _ = callLocalFunction(l: ["", Pointer(), ___className, "DestroyQActionEvent"]) }
    public func Action() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "Action"]) as! Float) }
    public func Before() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "Before"]) as! Float) }
}

public func NewQActionEventFromPointer(ptr: String) -> QActionEvent { let r = QActionEvent(); r.initFrom(p: ptr, n: "gui.QActionEvent"); return r }
public func NewQActionEvent(ty: Int, action: Int, before: Int) -> QActionEvent { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.NewQActionEvent", "", ty as Any, action as Any, before as Any]) as! QActionEvent }
public protocol QApplicationStateChangeEvent_ITF: QEvent_ITF {
    func QApplicationStateChangeEvent_PTR() -> QApplicationStateChangeEvent
}

public class QApplicationStateChangeEvent: QEvent, QApplicationStateChangeEvent_ITF {
    public func QApplicationStateChangeEvent_PTR() -> QApplicationStateChangeEvent { callLocalFunction(l: ["", Pointer(), ___className, "QApplicationStateChangeEvent_PTR"]) as! QApplicationStateChangeEvent }
    public func DestroyQApplicationStateChangeEvent() { _ = callLocalFunction(l: ["", Pointer(), ___className, "DestroyQApplicationStateChangeEvent"]) }
    public func ApplicationState() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "ApplicationState"]) as! Float) }
}

public func NewQApplicationStateChangeEventFromPointer(ptr: String) -> QApplicationStateChangeEvent { let r = QApplicationStateChangeEvent(); r.initFrom(p: ptr, n: "gui.QApplicationStateChangeEvent"); return r }
public func NewQApplicationStateChangeEvent(applicationState: Int) -> QApplicationStateChangeEvent { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.NewQApplicationStateChangeEvent", "", applicationState as Any]) as! QApplicationStateChangeEvent }
public protocol QBackingStore_ITF {
    func QBackingStore_PTR() -> QBackingStore
}

public class QBackingStore: Internal, QBackingStore_ITF {
    public func QBackingStore_PTR() -> QBackingStore { callLocalFunction(l: ["", Pointer(), ___className, "QBackingStore_PTR"]) as! QBackingStore }
    public func BeginPaint(region: QRegion_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "BeginPaint", region as Any]) }
    public func EndPaint() { _ = callLocalFunction(l: ["", Pointer(), ___className, "EndPaint"]) }
    public func Flush(region: QRegion_ITF? = nil, window: QWindow_ITF? = nil, offset: QPoint_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "Flush", region as Any, window as Any, offset as Any]) }
    public func HasStaticContents() -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "HasStaticContents"]) as! Bool }
    public func PaintDevice() -> QPaintDevice { callLocalFunction(l: ["", Pointer(), ___className, "PaintDevice"]) as! QPaintDevice }
    public func Resize(size: QSize_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "Resize", size as Any]) }
    public func Scroll(area: QRegion_ITF? = nil, dx: Int, dy: Int) -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "Scroll", area as Any, dx as Any, dy as Any]) as! Bool }
    public func SetStaticContents(region: QRegion_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetStaticContents", region as Any]) }
    public func Size() -> QSize { callLocalFunction(l: ["", Pointer(), ___className, "Size"]) as! QSize }
    public func StaticContents() -> QRegion { callLocalFunction(l: ["", Pointer(), ___className, "StaticContents"]) as! QRegion }
    public func Window() -> QWindow { callLocalFunction(l: ["", Pointer(), ___className, "Window"]) as! QWindow }
    public func DestroyQBackingStore() { _ = callLocalFunction(l: ["", Pointer(), ___className, "DestroyQBackingStore"]) }
}

public func NewQBackingStoreFromPointer(ptr: String) -> QBackingStore { let r = QBackingStore(); r.initFrom(p: ptr, n: "gui.QBackingStore"); return r }
public func NewQBackingStore(window: QWindow_ITF? = nil) -> QBackingStore { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.NewQBackingStore", "", window as Any]) as! QBackingStore }
public protocol QBitmap_ITF: QPixmap_ITF {
    func QBitmap_PTR() -> QBitmap
}

public class QBitmap: QPixmap, QBitmap_ITF {
    public func QBitmap_PTR() -> QBitmap { callLocalFunction(l: ["", Pointer(), ___className, "QBitmap_PTR"]) as! QBitmap }
    public func Clear() { _ = callLocalFunction(l: ["", Pointer(), ___className, "Clear"]) }
    public func FromData(size: QSize_ITF? = nil, bits: String, monoFormat: Int) -> QBitmap { callLocalFunction(l: ["", Pointer(), ___className, "FromData", size as Any, bits as Any, monoFormat as Any]) as! QBitmap }
    public func FromImage_QBitmap(image: QImage_ITF? = nil, flags: Int) -> QBitmap { callLocalFunction(l: ["", Pointer(), ___className, "FromImage", image as Any, flags as Any]) as! QBitmap }
    override public func FromImage2(image: QImage_ITF? = nil, flags: Int) -> QBitmap { callLocalFunction(l: ["", Pointer(), ___className, "FromImage2", image as Any, flags as Any]) as! QBitmap }
    public func Swap_QBitmap(other: QBitmap_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "Swap", other as Any]) }
    public func Transformed_QBitmap(matrix: QTransform_ITF? = nil) -> QBitmap { callLocalFunction(l: ["", Pointer(), ___className, "Transformed", matrix as Any]) as! QBitmap }
    public func ConnectDestroyQBitmap(f: @escaping () -> Void) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectDestroyQBitmap", "___REMOTE_CALLBACK___"], f: { (_: [Any]) -> Any in f() } as Any) }
    public func DisconnectDestroyQBitmap() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectDestroyQBitmap"]) }
    public func DestroyQBitmap() { _ = callLocalFunction(l: ["", Pointer(), ___className, "DestroyQBitmap"]) }
    public func DestroyQBitmapDefault() { _ = callLocalFunction(l: ["", Pointer(), ___className, "DestroyQBitmapDefault"]) }
}

public func NewQBitmapFromPointer(ptr: String) -> QBitmap { let r = QBitmap(); r.initFrom(p: ptr, n: "gui.QBitmap"); return r }
public func NewQBitmap() -> QBitmap { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.NewQBitmap", ""]) as! QBitmap }
public func NewQBitmap2(pixmap: QPixmap_ITF? = nil) -> QBitmap { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.NewQBitmap2", "", pixmap as Any]) as! QBitmap }
public func NewQBitmap3(width: Int, height: Int) -> QBitmap { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.NewQBitmap3", "", width as Any, height as Any]) as! QBitmap }
public func NewQBitmap4(size: QSize_ITF? = nil) -> QBitmap { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.NewQBitmap4", "", size as Any]) as! QBitmap }
public func NewQBitmap5(fileName: String, format: String) -> QBitmap { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.NewQBitmap5", "", fileName as Any, format as Any]) as! QBitmap }
public func QBitmap_FromData(size: QSize_ITF? = nil, bits: String, monoFormat: Int) -> QBitmap { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.QBitmap_FromData", "", size as Any, bits as Any, monoFormat as Any]) as! QBitmap }
public func QBitmap_FromImage(image: QImage_ITF? = nil, flags: Int) -> QBitmap { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.QBitmap_FromImage", "", image as Any, flags as Any]) as! QBitmap }
public func QBitmap_FromImage2(image: QImage_ITF? = nil, flags: Int) -> QBitmap { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.QBitmap_FromImage2", "", image as Any, flags as Any]) as! QBitmap }
public protocol QBrush_ITF {
    func QBrush_PTR() -> QBrush
}

public class QBrush: Internal, QBrush_ITF {
    public func QBrush_PTR() -> QBrush { callLocalFunction(l: ["", Pointer(), ___className, "QBrush_PTR"]) as! QBrush }
    public func Color() -> QColor { callLocalFunction(l: ["", Pointer(), ___className, "Color"]) as! QColor }
    public func Gradient() -> QGradient { callLocalFunction(l: ["", Pointer(), ___className, "Gradient"]) as! QGradient }
    public func IsOpaque() -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "IsOpaque"]) as! Bool }
    public func Matrix() -> QMatrix { callLocalFunction(l: ["", Pointer(), ___className, "Matrix"]) as! QMatrix }
    public func SetColor(color: QColor_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetColor", color as Any]) }
    public func SetColor2(color: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetColor2", color as Any]) }
    public func SetMatrix(matrix: QMatrix_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetMatrix", matrix as Any]) }
    public func SetStyle(style: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetStyle", style as Any]) }
    public func SetTexture(pixmap: QPixmap_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetTexture", pixmap as Any]) }
    public func SetTextureImage(image: QImage_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetTextureImage", image as Any]) }
    public func SetTransform(matrix: QTransform_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetTransform", matrix as Any]) }
    public func Style() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "Style"]) as! Float) }
    public func Swap(other: QBrush_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "Swap", other as Any]) }
    public func Texture() -> QPixmap { callLocalFunction(l: ["", Pointer(), ___className, "Texture"]) as! QPixmap }
    public func TextureImage() -> QImage { callLocalFunction(l: ["", Pointer(), ___className, "TextureImage"]) as! QImage }
    public func Transform() -> QTransform { callLocalFunction(l: ["", Pointer(), ___className, "Transform"]) as! QTransform }
    public func DestroyQBrush() { _ = callLocalFunction(l: ["", Pointer(), ___className, "DestroyQBrush"]) }
    public func ToVariant() -> QVariant { callLocalFunction(l: ["", Pointer(), ___className, "ToVariant"]) as! QVariant }
}

public func NewQBrushFromPointer(ptr: String) -> QBrush { let r = QBrush(); r.initFrom(p: ptr, n: "gui.QBrush"); return r }
public func NewQBrush() -> QBrush { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.NewQBrush", ""]) as! QBrush }
public func NewQBrush2(style: Int) -> QBrush { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.NewQBrush2", "", style as Any]) as! QBrush }
public func NewQBrush3(color: QColor_ITF? = nil, style: Int) -> QBrush { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.NewQBrush3", "", color as Any, style as Any]) as! QBrush }
public func NewQBrush4(color: Int, style: Int) -> QBrush { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.NewQBrush4", "", color as Any, style as Any]) as! QBrush }
public func NewQBrush5(color: QColor_ITF? = nil, pixmap: QPixmap_ITF? = nil) -> QBrush { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.NewQBrush5", "", color as Any, pixmap as Any]) as! QBrush }
public func NewQBrush6(color: Int, pixmap: QPixmap_ITF? = nil) -> QBrush { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.NewQBrush6", "", color as Any, pixmap as Any]) as! QBrush }
public func NewQBrush7(pixmap: QPixmap_ITF? = nil) -> QBrush { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.NewQBrush7", "", pixmap as Any]) as! QBrush }
public func NewQBrush8(image: QImage_ITF? = nil) -> QBrush { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.NewQBrush8", "", image as Any]) as! QBrush }
public func NewQBrush9(other: QBrush_ITF? = nil) -> QBrush { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.NewQBrush9", "", other as Any]) as! QBrush }
public func NewQBrush10(gradient: QGradient_ITF? = nil) -> QBrush { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.NewQBrush10", "", gradient as Any]) as! QBrush }
public protocol QClipboard_ITF: QObject_ITF {
    func QClipboard_PTR() -> QClipboard
}

public class QClipboard: QObject, QClipboard_ITF {
    public func QClipboard_PTR() -> QClipboard { callLocalFunction(l: ["", Pointer(), ___className, "QClipboard_PTR"]) as! QClipboard }
    public func ConnectChanged(f: @escaping (_ mode: Int) -> Void) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectChanged", "___REMOTE_CALLBACK___"], f: { (inp: [Any]) -> Any in f(Int(inp[0] as! Float)) } as Any) }
    public func DisconnectChanged() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectChanged"]) }
    public func Changed(mode: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "Changed", mode as Any]) }
    public func Clear(mode: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "Clear", mode as Any]) }
    public func ConnectDataChanged(f: @escaping () -> Void) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectDataChanged", "___REMOTE_CALLBACK___"], f: { (_: [Any]) -> Any in f() } as Any) }
    public func DisconnectDataChanged() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectDataChanged"]) }
    public func DataChanged() { _ = callLocalFunction(l: ["", Pointer(), ___className, "DataChanged"]) }
    public func ConnectFindBufferChanged(f: @escaping () -> Void) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectFindBufferChanged", "___REMOTE_CALLBACK___"], f: { (_: [Any]) -> Any in f() } as Any) }
    public func DisconnectFindBufferChanged() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectFindBufferChanged"]) }
    public func FindBufferChanged() { _ = callLocalFunction(l: ["", Pointer(), ___className, "FindBufferChanged"]) }
    public func Image(mode: Int) -> QImage { callLocalFunction(l: ["", Pointer(), ___className, "Image", mode as Any]) as! QImage }
    public func MimeData(mode: Int) -> QMimeData { callLocalFunction(l: ["", Pointer(), ___className, "MimeData", mode as Any]) as! QMimeData }
    public func OwnsClipboard() -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "OwnsClipboard"]) as! Bool }
    public func OwnsFindBuffer() -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "OwnsFindBuffer"]) as! Bool }
    public func OwnsSelection() -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "OwnsSelection"]) as! Bool }
    public func Pixmap(mode: Int) -> QPixmap { callLocalFunction(l: ["", Pointer(), ___className, "Pixmap", mode as Any]) as! QPixmap }
    public func ConnectSelectionChanged(f: @escaping () -> Void) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectSelectionChanged", "___REMOTE_CALLBACK___"], f: { (_: [Any]) -> Any in f() } as Any) }
    public func DisconnectSelectionChanged() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectSelectionChanged"]) }
    public func SelectionChanged() { _ = callLocalFunction(l: ["", Pointer(), ___className, "SelectionChanged"]) }
    public func SetImage(image: QImage_ITF? = nil, mode: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetImage", image as Any, mode as Any]) }
    public func SetMimeData(src: QMimeData_ITF? = nil, mode: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetMimeData", src as Any, mode as Any]) }
    public func SetPixmap(pixmap: QPixmap_ITF? = nil, mode: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetPixmap", pixmap as Any, mode as Any]) }
    public func SetText(text: String, mode: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetText", text as Any, mode as Any]) }
    public func SupportsFindBuffer() -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "SupportsFindBuffer"]) as! Bool }
    public func SupportsSelection() -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "SupportsSelection"]) as! Bool }
    public func Text(mode: Int) -> String { callLocalFunction(l: ["", Pointer(), ___className, "Text", mode as Any]) as! String }
    public func Text2(subtype: String, mode: Int) -> String { callLocalFunction(l: ["", Pointer(), ___className, "Text2", subtype as Any, mode as Any]) as! String }
    override public func ChildEventDefault(event: QChildEvent_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "ChildEventDefault", event as Any]) }
    override public func ConnectNotifyDefault(sign: QMetaMethod_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "ConnectNotifyDefault", sign as Any]) }
    override public func CustomEventDefault(event: QEvent_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "CustomEventDefault", event as Any]) }
    override public func DeleteLaterDefault() { _ = callLocalFunction(l: ["", Pointer(), ___className, "DeleteLaterDefault"]) }
    override public func DisconnectNotifyDefault(sign: QMetaMethod_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "DisconnectNotifyDefault", sign as Any]) }
    override public func EventDefault(e: QEvent_ITF? = nil) -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "EventDefault", e as Any]) as! Bool }
    override public func EventFilterDefault(watched: QObject_ITF? = nil, event: QEvent_ITF? = nil) -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "EventFilterDefault", watched as Any, event as Any]) as! Bool }
    override public func MetaObjectDefault() -> QMetaObject { callLocalFunction(l: ["", Pointer(), ___className, "MetaObjectDefault"]) as! QMetaObject }
    override public func TimerEventDefault(event: QTimerEvent_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "TimerEventDefault", event as Any]) }
}

public func NewQClipboardFromPointer(ptr: String) -> QClipboard { let r = QClipboard(); r.initFrom(p: ptr, n: "gui.QClipboard"); return r }
public protocol QCloseEvent_ITF: QEvent_ITF {
    func QCloseEvent_PTR() -> QCloseEvent
}

public class QCloseEvent: QEvent, QCloseEvent_ITF {
    public func QCloseEvent_PTR() -> QCloseEvent { callLocalFunction(l: ["", Pointer(), ___className, "QCloseEvent_PTR"]) as! QCloseEvent }
    public func DestroyQCloseEvent() { _ = callLocalFunction(l: ["", Pointer(), ___className, "DestroyQCloseEvent"]) }
}

public func NewQCloseEventFromPointer(ptr: String) -> QCloseEvent { let r = QCloseEvent(); r.initFrom(p: ptr, n: "gui.QCloseEvent"); return r }
public func NewQCloseEvent() -> QCloseEvent { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.NewQCloseEvent", ""]) as! QCloseEvent }
public protocol QColor_ITF {
    func QColor_PTR() -> QColor
}

public class QColor: Internal, QColor_ITF {
    public func QColor_PTR() -> QColor { callLocalFunction(l: ["", Pointer(), ___className, "QColor_PTR"]) as! QColor }
    public func DestroyQColor() { _ = callLocalFunction(l: ["", Pointer(), ___className, "DestroyQColor"]) }
    public func Alpha() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "Alpha"]) as! Float) }
    public func AlphaF() -> Float { callLocalFunction(l: ["", Pointer(), ___className, "AlphaF"]) as! Float }
    public func Black() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "Black"]) as! Float) }
    public func BlackF() -> Float { callLocalFunction(l: ["", Pointer(), ___className, "BlackF"]) as! Float }
    public func Blue() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "Blue"]) as! Float) }
    public func BlueF() -> Float { callLocalFunction(l: ["", Pointer(), ___className, "BlueF"]) as! Float }
    public func ColorNames() -> [String] { callLocalFunction(l: ["", Pointer(), ___className, "ColorNames"]) as! [String] }
    public func ConvertTo(colorSpec: Int) -> QColor { callLocalFunction(l: ["", Pointer(), ___className, "ConvertTo", colorSpec as Any]) as! QColor }
    public func Cyan() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "Cyan"]) as! Float) }
    public func CyanF() -> Float { callLocalFunction(l: ["", Pointer(), ___className, "CyanF"]) as! Float }
    public func Darker(factor: Int) -> QColor { callLocalFunction(l: ["", Pointer(), ___className, "Darker", factor as Any]) as! QColor }
    public func FromCmyk(c: Int, m: Int, y: Int, k: Int, a: Int) -> QColor { callLocalFunction(l: ["", Pointer(), ___className, "FromCmyk", c as Any, m as Any, y as Any, k as Any, a as Any]) as! QColor }
    public func FromCmykF(c: Float, m: Float, y: Float, k: Float, a: Float) -> QColor { callLocalFunction(l: ["", Pointer(), ___className, "FromCmykF", c as Any, m as Any, y as Any, k as Any, a as Any]) as! QColor }
    public func FromHsl(h: Int, s: Int, l: Int, a: Int) -> QColor { callLocalFunction(l: ["", Pointer(), ___className, "FromHsl", h as Any, s as Any, l as Any, a as Any]) as! QColor }
    public func FromHslF(h: Float, s: Float, l: Float, a: Float) -> QColor { callLocalFunction(l: ["", Pointer(), ___className, "FromHslF", h as Any, s as Any, l as Any, a as Any]) as! QColor }
    public func FromHsv(h: Int, s: Int, v: Int, a: Int) -> QColor { callLocalFunction(l: ["", Pointer(), ___className, "FromHsv", h as Any, s as Any, v as Any, a as Any]) as! QColor }
    public func FromHsvF(h: Float, s: Float, v: Float, a: Float) -> QColor { callLocalFunction(l: ["", Pointer(), ___className, "FromHsvF", h as Any, s as Any, v as Any, a as Any]) as! QColor }
    public func FromRgb(rgb: Int) -> QColor { callLocalFunction(l: ["", Pointer(), ___className, "FromRgb", rgb as Any]) as! QColor }
    public func FromRgb2(r: Int, g: Int, b: Int, a: Int) -> QColor { callLocalFunction(l: ["", Pointer(), ___className, "FromRgb2", r as Any, g as Any, b as Any, a as Any]) as! QColor }
    public func FromRgbF(r: Float, g: Float, b: Float, a: Float) -> QColor { callLocalFunction(l: ["", Pointer(), ___className, "FromRgbF", r as Any, g as Any, b as Any, a as Any]) as! QColor }
    public func FromRgba(rgba: Int) -> QColor { callLocalFunction(l: ["", Pointer(), ___className, "FromRgba", rgba as Any]) as! QColor }
    public func FromRgba64(r: Int, g: Int, b: Int, a: Int) -> QColor { callLocalFunction(l: ["", Pointer(), ___className, "FromRgba64", r as Any, g as Any, b as Any, a as Any]) as! QColor }
    public func FromRgba642(rgba64: QRgba64_ITF? = nil) -> QColor { callLocalFunction(l: ["", Pointer(), ___className, "FromRgba642", rgba64 as Any]) as! QColor }
    public func GetCmyk2(c: Int, m: Int, y: Int, k: Int, a: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "GetCmyk2", c as Any, m as Any, y as Any, k as Any, a as Any]) }
    public func GetCmykF2(c: Float, m: Float, y: Float, k: Float, a: Float) { _ = callLocalFunction(l: ["", Pointer(), ___className, "GetCmykF2", c as Any, m as Any, y as Any, k as Any, a as Any]) }
    public func GetHsl(h: Int, s: Int, l: Int, a: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "GetHsl", h as Any, s as Any, l as Any, a as Any]) }
    public func GetHslF(h: Float, s: Float, l: Float, a: Float) { _ = callLocalFunction(l: ["", Pointer(), ___className, "GetHslF", h as Any, s as Any, l as Any, a as Any]) }
    public func GetHsv(h: Int, s: Int, v: Int, a: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "GetHsv", h as Any, s as Any, v as Any, a as Any]) }
    public func GetHsvF(h: Float, s: Float, v: Float, a: Float) { _ = callLocalFunction(l: ["", Pointer(), ___className, "GetHsvF", h as Any, s as Any, v as Any, a as Any]) }
    public func GetRgb(r: Int, g: Int, b: Int, a: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "GetRgb", r as Any, g as Any, b as Any, a as Any]) }
    public func GetRgbF(r: Float, g: Float, b: Float, a: Float) { _ = callLocalFunction(l: ["", Pointer(), ___className, "GetRgbF", r as Any, g as Any, b as Any, a as Any]) }
    public func Green() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "Green"]) as! Float) }
    public func GreenF() -> Float { callLocalFunction(l: ["", Pointer(), ___className, "GreenF"]) as! Float }
    public func HslHue() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "HslHue"]) as! Float) }
    public func HslHueF() -> Float { callLocalFunction(l: ["", Pointer(), ___className, "HslHueF"]) as! Float }
    public func HslSaturation() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "HslSaturation"]) as! Float) }
    public func HslSaturationF() -> Float { callLocalFunction(l: ["", Pointer(), ___className, "HslSaturationF"]) as! Float }
    public func HsvHue() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "HsvHue"]) as! Float) }
    public func HsvHueF() -> Float { callLocalFunction(l: ["", Pointer(), ___className, "HsvHueF"]) as! Float }
    public func HsvSaturation() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "HsvSaturation"]) as! Float) }
    public func HsvSaturationF() -> Float { callLocalFunction(l: ["", Pointer(), ___className, "HsvSaturationF"]) as! Float }
    public func Hue() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "Hue"]) as! Float) }
    public func HueF() -> Float { callLocalFunction(l: ["", Pointer(), ___className, "HueF"]) as! Float }
    public func IsValid() -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "IsValid"]) as! Bool }
    public func IsValidColor(name: String) -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "IsValidColor", name as Any]) as! Bool }
    public func IsValidColor2(name: QStringView_ITF? = nil) -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "IsValidColor2", name as Any]) as! Bool }
    public func IsValidColor3(name: QLatin1String_ITF? = nil) -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "IsValidColor3", name as Any]) as! Bool }
    public func Lighter(factor: Int) -> QColor { callLocalFunction(l: ["", Pointer(), ___className, "Lighter", factor as Any]) as! QColor }
    public func Lightness() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "Lightness"]) as! Float) }
    public func LightnessF() -> Float { callLocalFunction(l: ["", Pointer(), ___className, "LightnessF"]) as! Float }
    public func Magenta() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "Magenta"]) as! Float) }
    public func MagentaF() -> Float { callLocalFunction(l: ["", Pointer(), ___className, "MagentaF"]) as! Float }
    public func Name() -> String { callLocalFunction(l: ["", Pointer(), ___className, "Name"]) as! String }
    public func Name2(format: Int) -> String { callLocalFunction(l: ["", Pointer(), ___className, "Name2", format as Any]) as! String }
    public func Red() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "Red"]) as! Float) }
    public func RedF() -> Float { callLocalFunction(l: ["", Pointer(), ___className, "RedF"]) as! Float }
    public func Rgb() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "Rgb"]) as! Float) }
    public func Rgba() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "Rgba"]) as! Float) }
    public func Saturation() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "Saturation"]) as! Float) }
    public func SaturationF() -> Float { callLocalFunction(l: ["", Pointer(), ___className, "SaturationF"]) as! Float }
    public func SetAlpha(alpha: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetAlpha", alpha as Any]) }
    public func SetAlphaF(alpha: Float) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetAlphaF", alpha as Any]) }
    public func SetBlue(blue: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetBlue", blue as Any]) }
    public func SetBlueF(blue: Float) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetBlueF", blue as Any]) }
    public func SetCmyk(c: Int, m: Int, y: Int, k: Int, a: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetCmyk", c as Any, m as Any, y as Any, k as Any, a as Any]) }
    public func SetCmykF(c: Float, m: Float, y: Float, k: Float, a: Float) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetCmykF", c as Any, m as Any, y as Any, k as Any, a as Any]) }
    public func SetGreen(green: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetGreen", green as Any]) }
    public func SetGreenF(green: Float) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetGreenF", green as Any]) }
    public func SetHsl(h: Int, s: Int, l: Int, a: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetHsl", h as Any, s as Any, l as Any, a as Any]) }
    public func SetHslF(h: Float, s: Float, l: Float, a: Float) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetHslF", h as Any, s as Any, l as Any, a as Any]) }
    public func SetHsv(h: Int, s: Int, v: Int, a: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetHsv", h as Any, s as Any, v as Any, a as Any]) }
    public func SetHsvF(h: Float, s: Float, v: Float, a: Float) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetHsvF", h as Any, s as Any, v as Any, a as Any]) }
    public func SetNamedColor(name: String) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetNamedColor", name as Any]) }
    public func SetNamedColor2(name: QStringView_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetNamedColor2", name as Any]) }
    public func SetNamedColor3(name: QLatin1String_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetNamedColor3", name as Any]) }
    public func SetRed(red: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetRed", red as Any]) }
    public func SetRedF(red: Float) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetRedF", red as Any]) }
    public func SetRgb(r: Int, g: Int, b: Int, a: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetRgb", r as Any, g as Any, b as Any, a as Any]) }
    public func SetRgb2(rgb: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetRgb2", rgb as Any]) }
    public func SetRgbF(r: Float, g: Float, b: Float, a: Float) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetRgbF", r as Any, g as Any, b as Any, a as Any]) }
    public func SetRgba(rgba: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetRgba", rgba as Any]) }
    public func SetRgba64(rgba: QRgba64_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetRgba64", rgba as Any]) }
    public func Spec() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "Spec"]) as! Float) }
    public func ToCmyk() -> QColor { callLocalFunction(l: ["", Pointer(), ___className, "ToCmyk"]) as! QColor }
    public func ToHsl() -> QColor { callLocalFunction(l: ["", Pointer(), ___className, "ToHsl"]) as! QColor }
    public func ToHsv() -> QColor { callLocalFunction(l: ["", Pointer(), ___className, "ToHsv"]) as! QColor }
    public func ToRgb() -> QColor { callLocalFunction(l: ["", Pointer(), ___className, "ToRgb"]) as! QColor }
    public func Value() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "Value"]) as! Float) }
    public func ValueF() -> Float { callLocalFunction(l: ["", Pointer(), ___className, "ValueF"]) as! Float }
    public func Yellow() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "Yellow"]) as! Float) }
    public func YellowF() -> Float { callLocalFunction(l: ["", Pointer(), ___className, "YellowF"]) as! Float }
    public func ToVariant() -> QVariant { callLocalFunction(l: ["", Pointer(), ___className, "ToVariant"]) as! QVariant }
}

public func NewQColorFromPointer(ptr: String) -> QColor { let r = QColor(); r.initFrom(p: ptr, n: "gui.QColor"); return r }
public func NewQColor() -> QColor { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.NewQColor", ""]) as! QColor }
public func NewQColor2(color: Int) -> QColor { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.NewQColor2", "", color as Any]) as! QColor }
public func NewQColor3(r: Int, g: Int, b: Int, a: Int) -> QColor { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.NewQColor3", "", r as Any, g as Any, b as Any, a as Any]) as! QColor }
public func NewQColor4(color: Int) -> QColor { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.NewQColor4", "", color as Any]) as! QColor }
public func NewQColor5(rgba64: QRgba64_ITF? = nil) -> QColor { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.NewQColor5", "", rgba64 as Any]) as! QColor }
public func NewQColor6(name: String) -> QColor { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.NewQColor6", "", name as Any]) as! QColor }
public func NewQColor8(name: String) -> QColor { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.NewQColor8", "", name as Any]) as! QColor }
public func NewQColor9(name: QLatin1String_ITF? = nil) -> QColor { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.NewQColor9", "", name as Any]) as! QColor }
public func QColor_ColorNames() -> [String] { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.QColor_ColorNames", ""]) as! [String] }
public func QColor_FromCmyk(c: Int, m: Int, y: Int, k: Int, a: Int) -> QColor { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.QColor_FromCmyk", "", c as Any, m as Any, y as Any, k as Any, a as Any]) as! QColor }
public func QColor_FromCmykF(c: Float, m: Float, y: Float, k: Float, a: Float) -> QColor { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.QColor_FromCmykF", "", c as Any, m as Any, y as Any, k as Any, a as Any]) as! QColor }
public func QColor_FromHsl(h: Int, s: Int, l: Int, a: Int) -> QColor { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.QColor_FromHsl", "", h as Any, s as Any, l as Any, a as Any]) as! QColor }
public func QColor_FromHslF(h: Float, s: Float, l: Float, a: Float) -> QColor { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.QColor_FromHslF", "", h as Any, s as Any, l as Any, a as Any]) as! QColor }
public func QColor_FromHsv(h: Int, s: Int, v: Int, a: Int) -> QColor { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.QColor_FromHsv", "", h as Any, s as Any, v as Any, a as Any]) as! QColor }
public func QColor_FromHsvF(h: Float, s: Float, v: Float, a: Float) -> QColor { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.QColor_FromHsvF", "", h as Any, s as Any, v as Any, a as Any]) as! QColor }
public func QColor_FromRgb(rgb: Int) -> QColor { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.QColor_FromRgb", "", rgb as Any]) as! QColor }
public func QColor_FromRgb2(r: Int, g: Int, b: Int, a: Int) -> QColor { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.QColor_FromRgb2", "", r as Any, g as Any, b as Any, a as Any]) as! QColor }
public func QColor_FromRgbF(r: Float, g: Float, b: Float, a: Float) -> QColor { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.QColor_FromRgbF", "", r as Any, g as Any, b as Any, a as Any]) as! QColor }
public func QColor_FromRgba(rgba: Int) -> QColor { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.QColor_FromRgba", "", rgba as Any]) as! QColor }
public func QColor_FromRgba64(r: Int, g: Int, b: Int, a: Int) -> QColor { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.QColor_FromRgba64", "", r as Any, g as Any, b as Any, a as Any]) as! QColor }
public func QColor_FromRgba642(rgba64: QRgba64_ITF? = nil) -> QColor { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.QColor_FromRgba642", "", rgba64 as Any]) as! QColor }
public func QColor_IsValidColor(name: String) -> Bool { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.QColor_IsValidColor", "", name as Any]) as! Bool }
public func QColor_IsValidColor2(name: QStringView_ITF? = nil) -> Bool { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.QColor_IsValidColor2", "", name as Any]) as! Bool }
public func QColor_IsValidColor3(name: QLatin1String_ITF? = nil) -> Bool { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.QColor_IsValidColor3", "", name as Any]) as! Bool }
public protocol QColorDialogOptions_ITF {
    func QColorDialogOptions_PTR() -> QColorDialogOptions
}

public class QColorDialogOptions: Internal, QColorDialogOptions_ITF {
    public func QColorDialogOptions_PTR() -> QColorDialogOptions { callLocalFunction(l: ["", Pointer(), ___className, "QColorDialogOptions_PTR"]) as! QColorDialogOptions }
    public func DestroyQColorDialogOptions() { _ = callLocalFunction(l: ["", Pointer(), ___className, "DestroyQColorDialogOptions"]) }
}

public func NewQColorDialogOptionsFromPointer(ptr: String) -> QColorDialogOptions { let r = QColorDialogOptions(); r.initFrom(p: ptr, n: "gui.QColorDialogOptions"); return r }
public protocol QConicalGradient_ITF: QGradient_ITF {
    func QConicalGradient_PTR() -> QConicalGradient
}

public class QConicalGradient: QGradient, QConicalGradient_ITF {
    public func QConicalGradient_PTR() -> QConicalGradient { callLocalFunction(l: ["", Pointer(), ___className, "QConicalGradient_PTR"]) as! QConicalGradient }
    public func DestroyQConicalGradient() { _ = callLocalFunction(l: ["", Pointer(), ___className, "DestroyQConicalGradient"]) }
    public func Angle() -> Float { callLocalFunction(l: ["", Pointer(), ___className, "Angle"]) as! Float }
    public func Center() -> QPointF { callLocalFunction(l: ["", Pointer(), ___className, "Center"]) as! QPointF }
    public func SetAngle(angle: Float) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetAngle", angle as Any]) }
    public func SetCenter(center: QPointF_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetCenter", center as Any]) }
    public func SetCenter2(x: Float, y: Float) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetCenter2", x as Any, y as Any]) }
}

public func NewQConicalGradientFromPointer(ptr: String) -> QConicalGradient { let r = QConicalGradient(); r.initFrom(p: ptr, n: "gui.QConicalGradient"); return r }
public func NewQConicalGradient() -> QConicalGradient { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.NewQConicalGradient", ""]) as! QConicalGradient }
public func NewQConicalGradient2(center: QPointF_ITF? = nil, angle: Float) -> QConicalGradient { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.NewQConicalGradient2", "", center as Any, angle as Any]) as! QConicalGradient }
public func NewQConicalGradient3(cx: Float, cy: Float, angle: Float) -> QConicalGradient { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.NewQConicalGradient3", "", cx as Any, cy as Any, angle as Any]) as! QConicalGradient }
public protocol QContextMenuEvent_ITF: QInputEvent_ITF {
    func QContextMenuEvent_PTR() -> QContextMenuEvent
}

public class QContextMenuEvent: QInputEvent, QContextMenuEvent_ITF {
    public func QContextMenuEvent_PTR() -> QContextMenuEvent { callLocalFunction(l: ["", Pointer(), ___className, "QContextMenuEvent_PTR"]) as! QContextMenuEvent }
    public func DestroyQContextMenuEvent() { _ = callLocalFunction(l: ["", Pointer(), ___className, "DestroyQContextMenuEvent"]) }
    public func GlobalPos() -> QPoint { callLocalFunction(l: ["", Pointer(), ___className, "GlobalPos"]) as! QPoint }
    public func GlobalX() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "GlobalX"]) as! Float) }
    public func GlobalY() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "GlobalY"]) as! Float) }
    public func Pos() -> QPoint { callLocalFunction(l: ["", Pointer(), ___className, "Pos"]) as! QPoint }
    public func Reason() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "Reason"]) as! Float) }
    public func X() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "X"]) as! Float) }
    public func Y() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "Y"]) as! Float) }
}

public func NewQContextMenuEventFromPointer(ptr: String) -> QContextMenuEvent { let r = QContextMenuEvent(); r.initFrom(p: ptr, n: "gui.QContextMenuEvent"); return r }
public func NewQContextMenuEvent(reason: Int, pos: QPoint_ITF? = nil, globalPos: QPoint_ITF? = nil, modifiers: Int) -> QContextMenuEvent { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.NewQContextMenuEvent", "", reason as Any, pos as Any, globalPos as Any, modifiers as Any]) as! QContextMenuEvent }
public func NewQContextMenuEvent2(reason: Int, pos: QPoint_ITF? = nil, globalPos: QPoint_ITF? = nil) -> QContextMenuEvent { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.NewQContextMenuEvent2", "", reason as Any, pos as Any, globalPos as Any]) as! QContextMenuEvent }
public func NewQContextMenuEvent3(reason: Int, pos: QPoint_ITF? = nil) -> QContextMenuEvent { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.NewQContextMenuEvent3", "", reason as Any, pos as Any]) as! QContextMenuEvent }
public protocol QCursor_ITF {
    func QCursor_PTR() -> QCursor
}

public class QCursor: Internal, QCursor_ITF {
    public func QCursor_PTR() -> QCursor { callLocalFunction(l: ["", Pointer(), ___className, "QCursor_PTR"]) as! QCursor }
    public func Bitmap() -> QBitmap { callLocalFunction(l: ["", Pointer(), ___className, "Bitmap"]) as! QBitmap }
    public func HotSpot() -> QPoint { callLocalFunction(l: ["", Pointer(), ___className, "HotSpot"]) as! QPoint }
    public func Mask() -> QBitmap { callLocalFunction(l: ["", Pointer(), ___className, "Mask"]) as! QBitmap }
    public func Pixmap() -> QPixmap { callLocalFunction(l: ["", Pointer(), ___className, "Pixmap"]) as! QPixmap }
    public func Pos() -> QPoint { callLocalFunction(l: ["", Pointer(), ___className, "Pos"]) as! QPoint }
    public func Pos2(screen: QScreen_ITF? = nil) -> QPoint { callLocalFunction(l: ["", Pointer(), ___className, "Pos2", screen as Any]) as! QPoint }
    public func SetPos(x: Int, y: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetPos", x as Any, y as Any]) }
    public func SetPos2(screen: QScreen_ITF? = nil, x: Int, y: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetPos2", screen as Any, x as Any, y as Any]) }
    public func SetPos3(p: QPoint_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetPos3", p as Any]) }
    public func SetPos4(screen: QScreen_ITF? = nil, p: QPoint_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetPos4", screen as Any, p as Any]) }
    public func SetShape(shape: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetShape", shape as Any]) }
    public func Shape() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "Shape"]) as! Float) }
    public func Swap(other: QCursor_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "Swap", other as Any]) }
    public func DestroyQCursor() { _ = callLocalFunction(l: ["", Pointer(), ___className, "DestroyQCursor"]) }
}

public func NewQCursorFromPointer(ptr: String) -> QCursor { let r = QCursor(); r.initFrom(p: ptr, n: "gui.QCursor"); return r }
public func NewQCursor() -> QCursor { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.NewQCursor", ""]) as! QCursor }
public func NewQCursor2(shape: Int) -> QCursor { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.NewQCursor2", "", shape as Any]) as! QCursor }
public func NewQCursor3(bitmap: QBitmap_ITF? = nil, mask: QBitmap_ITF? = nil, hotX: Int, hotY: Int) -> QCursor { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.NewQCursor3", "", bitmap as Any, mask as Any, hotX as Any, hotY as Any]) as! QCursor }
public func NewQCursor4(pixmap: QPixmap_ITF? = nil, hotX: Int, hotY: Int) -> QCursor { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.NewQCursor4", "", pixmap as Any, hotX as Any, hotY as Any]) as! QCursor }
public func NewQCursor5(c: QCursor_ITF? = nil) -> QCursor { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.NewQCursor5", "", c as Any]) as! QCursor }
public func NewQCursor6(other: QCursor_ITF? = nil) -> QCursor { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.NewQCursor6", "", other as Any]) as! QCursor }
public func QCursor_Pos() -> QPoint { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.QCursor_Pos", ""]) as! QPoint }
public func QCursor_Pos2(screen: QScreen_ITF? = nil) -> QPoint { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.QCursor_Pos2", "", screen as Any]) as! QPoint }
public func QCursor_SetPos(x: Int, y: Int) { Gui.initModule(); _ = callLocalFunction(l: ["", "", "gui.QCursor_SetPos", "", x as Any, y as Any]) }
public func QCursor_SetPos2(screen: QScreen_ITF? = nil, x: Int, y: Int) { Gui.initModule(); _ = callLocalFunction(l: ["", "", "gui.QCursor_SetPos2", "", screen as Any, x as Any, y as Any]) }
public func QCursor_SetPos3(p: QPoint_ITF? = nil) { Gui.initModule(); _ = callLocalFunction(l: ["", "", "gui.QCursor_SetPos3", "", p as Any]) }
public func QCursor_SetPos4(screen: QScreen_ITF? = nil, p: QPoint_ITF? = nil) { Gui.initModule(); _ = callLocalFunction(l: ["", "", "gui.QCursor_SetPos4", "", screen as Any, p as Any]) }
public protocol QDesktopServices_ITF {
    func QDesktopServices_PTR() -> QDesktopServices
}

public class QDesktopServices: Internal, QDesktopServices_ITF {
    public func QDesktopServices_PTR() -> QDesktopServices { callLocalFunction(l: ["", Pointer(), ___className, "QDesktopServices_PTR"]) as! QDesktopServices }
    public func DestroyQDesktopServices() { _ = callLocalFunction(l: ["", Pointer(), ___className, "DestroyQDesktopServices"]) }
    public func OpenUrl(url: QUrl_ITF? = nil) -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "OpenUrl", url as Any]) as! Bool }
    public func SetUrlHandler(scheme: String, receiver: QObject_ITF? = nil, method: String) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetUrlHandler", scheme as Any, receiver as Any, method as Any]) }
    public func UnsetUrlHandler(scheme: String) { _ = callLocalFunction(l: ["", Pointer(), ___className, "UnsetUrlHandler", scheme as Any]) }
}

public func NewQDesktopServicesFromPointer(ptr: String) -> QDesktopServices { let r = QDesktopServices(); r.initFrom(p: ptr, n: "gui.QDesktopServices"); return r }
public func QDesktopServices_OpenUrl(url: QUrl_ITF? = nil) -> Bool { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.QDesktopServices_OpenUrl", "", url as Any]) as! Bool }
public func QDesktopServices_SetUrlHandler(scheme: String, receiver: QObject_ITF? = nil, method: String) { Gui.initModule(); _ = callLocalFunction(l: ["", "", "gui.QDesktopServices_SetUrlHandler", "", scheme as Any, receiver as Any, method as Any]) }
public func QDesktopServices_UnsetUrlHandler(scheme: String) { Gui.initModule(); _ = callLocalFunction(l: ["", "", "gui.QDesktopServices_UnsetUrlHandler", "", scheme as Any]) }
public protocol QDoubleValidator_ITF: QValidator_ITF {
    func QDoubleValidator_PTR() -> QDoubleValidator
}

public class QDoubleValidator: QValidator, QDoubleValidator_ITF {
    public func QDoubleValidator_PTR() -> QDoubleValidator { callLocalFunction(l: ["", Pointer(), ___className, "QDoubleValidator_PTR"]) as! QDoubleValidator }
    public func Bottom() -> Float { callLocalFunction(l: ["", Pointer(), ___className, "Bottom"]) as! Float }
    public func ConnectBottomChanged(f: @escaping (_ bottom: Float) -> Void) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectBottomChanged", "___REMOTE_CALLBACK___"], f: { (inp: [Any]) -> Any in f(inp[0] as! Float) } as Any) }
    public func DisconnectBottomChanged() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectBottomChanged"]) }
    public func BottomChanged(bottom: Float) { _ = callLocalFunction(l: ["", Pointer(), ___className, "BottomChanged", bottom as Any]) }
    public func Decimals() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "Decimals"]) as! Float) }
    public func ConnectDecimalsChanged(f: @escaping (_ decimals: Int) -> Void) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectDecimalsChanged", "___REMOTE_CALLBACK___"], f: { (inp: [Any]) -> Any in f(Int(inp[0] as! Float)) } as Any) }
    public func DisconnectDecimalsChanged() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectDecimalsChanged"]) }
    public func DecimalsChanged(decimals: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "DecimalsChanged", decimals as Any]) }
    public func Notation() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "Notation"]) as! Float) }
    public func ConnectNotationChanged(f: @escaping (_ notation: Int) -> Void) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectNotationChanged", "___REMOTE_CALLBACK___"], f: { (inp: [Any]) -> Any in f(Int(inp[0] as! Float)) } as Any) }
    public func DisconnectNotationChanged() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectNotationChanged"]) }
    public func NotationChanged(notation: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "NotationChanged", notation as Any]) }
    public func SetBottom(vdo: Float) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetBottom", vdo as Any]) }
    public func SetDecimals(vi: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetDecimals", vi as Any]) }
    public func SetNotation(vqd: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetNotation", vqd as Any]) }
    public func ConnectSetRange(f: @escaping (_ minimum: Float, _ maximum: Float, _ decimals: Int) -> Void) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectSetRange", "___REMOTE_CALLBACK___"], f: { (inp: [Any]) -> Any in f(inp[0] as! Float, inp[1] as! Float, Int(inp[2] as! Float)) } as Any) }
    public func DisconnectSetRange() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectSetRange"]) }
    public func SetRange(minimum: Float, maximum: Float, decimals: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetRange", minimum as Any, maximum as Any, decimals as Any]) }
    public func SetRangeDefault(minimum: Float, maximum: Float, decimals: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetRangeDefault", minimum as Any, maximum as Any, decimals as Any]) }
    public func SetTop(vdo: Float) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetTop", vdo as Any]) }
    public func Top() -> Float { callLocalFunction(l: ["", Pointer(), ___className, "Top"]) as! Float }
    public func ConnectTopChanged(f: @escaping (_ top: Float) -> Void) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectTopChanged", "___REMOTE_CALLBACK___"], f: { (inp: [Any]) -> Any in f(inp[0] as! Float) } as Any) }
    public func DisconnectTopChanged() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectTopChanged"]) }
    public func TopChanged(top: Float) { _ = callLocalFunction(l: ["", Pointer(), ___className, "TopChanged", top as Any]) }
    override public func ConnectValidate(f: @escaping (_ input: String, _ pos: Int) -> Int) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectValidate", "___REMOTE_CALLBACK___"], f: { (inp: [Any]) -> Any in f(inp[0] as! String, Int(inp[1] as! Float)) } as Any) }
    override public func DisconnectValidate() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectValidate"]) }
    override public func Validate(input: String, pos: Int) -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "Validate", input as Any, pos as Any]) as! Float) }
    public func ValidateDefault(input: String, pos: Int) -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "ValidateDefault", input as Any, pos as Any]) as! Float) }
    public func ConnectDestroyQDoubleValidator(f: @escaping () -> Void) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectDestroyQDoubleValidator", "___REMOTE_CALLBACK___"], f: { (_: [Any]) -> Any in f() } as Any) }
    public func DisconnectDestroyQDoubleValidator() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectDestroyQDoubleValidator"]) }
    public func DestroyQDoubleValidator() { _ = callLocalFunction(l: ["", Pointer(), ___className, "DestroyQDoubleValidator"]) }
    public func DestroyQDoubleValidatorDefault() { _ = callLocalFunction(l: ["", Pointer(), ___className, "DestroyQDoubleValidatorDefault"]) }
}

public func NewQDoubleValidatorFromPointer(ptr: String) -> QDoubleValidator { let r = QDoubleValidator(); r.initFrom(p: ptr, n: "gui.QDoubleValidator"); return r }
public func NewQDoubleValidator(parent: QObject_ITF? = nil) -> QDoubleValidator { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.NewQDoubleValidator", "", parent as Any]) as! QDoubleValidator }
public func NewQDoubleValidator2(bottom: Float, top: Float, decimals: Int, parent: QObject_ITF? = nil) -> QDoubleValidator { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.NewQDoubleValidator2", "", bottom as Any, top as Any, decimals as Any, parent as Any]) as! QDoubleValidator }
public protocol QDrag_ITF: QObject_ITF {
    func QDrag_PTR() -> QDrag
}

public class QDrag: QObject, QDrag_ITF {
    public func QDrag_PTR() -> QDrag { callLocalFunction(l: ["", Pointer(), ___className, "QDrag_PTR"]) as! QDrag }
    public func ConnectActionChanged(f: @escaping (_ action: Int) -> Void) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectActionChanged", "___REMOTE_CALLBACK___"], f: { (inp: [Any]) -> Any in f(Int(inp[0] as! Float)) } as Any) }
    public func DisconnectActionChanged() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectActionChanged"]) }
    public func ActionChanged(action: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "ActionChanged", action as Any]) }
    public func Cancel() { _ = callLocalFunction(l: ["", Pointer(), ___className, "Cancel"]) }
    public func DefaultAction() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "DefaultAction"]) as! Float) }
    public func DragCursor(action: Int) -> QPixmap { callLocalFunction(l: ["", Pointer(), ___className, "DragCursor", action as Any]) as! QPixmap }
    public func Exec(supportedActions: Int) -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "Exec", supportedActions as Any]) as! Float) }
    public func Exec2(supportedActions: Int, defaultDropAction: Int) -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "Exec2", supportedActions as Any, defaultDropAction as Any]) as! Float) }
    public func HotSpot() -> QPoint { callLocalFunction(l: ["", Pointer(), ___className, "HotSpot"]) as! QPoint }
    public func MimeData() -> QMimeData { callLocalFunction(l: ["", Pointer(), ___className, "MimeData"]) as! QMimeData }
    public func Pixmap() -> QPixmap { callLocalFunction(l: ["", Pointer(), ___className, "Pixmap"]) as! QPixmap }
    public func SetDragCursor(cursor: QPixmap_ITF? = nil, action: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetDragCursor", cursor as Any, action as Any]) }
    public func SetHotSpot(hotspot: QPoint_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetHotSpot", hotspot as Any]) }
    public func SetMimeData(data: QMimeData_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetMimeData", data as Any]) }
    public func SetPixmap(pixmap: QPixmap_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetPixmap", pixmap as Any]) }
    public func Source() -> QObject { callLocalFunction(l: ["", Pointer(), ___className, "Source"]) as! QObject }
    public func SupportedActions() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "SupportedActions"]) as! Float) }
    public func Target() -> QObject { callLocalFunction(l: ["", Pointer(), ___className, "Target"]) as! QObject }
    public func ConnectTargetChanged(f: @escaping (_ newTarget: QObject) -> Void) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectTargetChanged", "___REMOTE_CALLBACK___"], f: { (inp: [Any]) -> Any in f(inp[0] as! QObject) } as Any) }
    public func DisconnectTargetChanged() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectTargetChanged"]) }
    public func TargetChanged(newTarget: QObject_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "TargetChanged", newTarget as Any]) }
    public func ConnectDestroyQDrag(f: @escaping () -> Void) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectDestroyQDrag", "___REMOTE_CALLBACK___"], f: { (_: [Any]) -> Any in f() } as Any) }
    public func DisconnectDestroyQDrag() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectDestroyQDrag"]) }
    public func DestroyQDrag() { _ = callLocalFunction(l: ["", Pointer(), ___className, "DestroyQDrag"]) }
    public func DestroyQDragDefault() { _ = callLocalFunction(l: ["", Pointer(), ___className, "DestroyQDragDefault"]) }
    override public func ChildEventDefault(event: QChildEvent_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "ChildEventDefault", event as Any]) }
    override public func ConnectNotifyDefault(sign: QMetaMethod_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "ConnectNotifyDefault", sign as Any]) }
    override public func CustomEventDefault(event: QEvent_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "CustomEventDefault", event as Any]) }
    override public func DeleteLaterDefault() { _ = callLocalFunction(l: ["", Pointer(), ___className, "DeleteLaterDefault"]) }
    override public func DisconnectNotifyDefault(sign: QMetaMethod_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "DisconnectNotifyDefault", sign as Any]) }
    override public func EventDefault(e: QEvent_ITF? = nil) -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "EventDefault", e as Any]) as! Bool }
    override public func EventFilterDefault(watched: QObject_ITF? = nil, event: QEvent_ITF? = nil) -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "EventFilterDefault", watched as Any, event as Any]) as! Bool }
    override public func MetaObjectDefault() -> QMetaObject { callLocalFunction(l: ["", Pointer(), ___className, "MetaObjectDefault"]) as! QMetaObject }
    override public func TimerEventDefault(event: QTimerEvent_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "TimerEventDefault", event as Any]) }
}

public func NewQDragFromPointer(ptr: String) -> QDrag { let r = QDrag(); r.initFrom(p: ptr, n: "gui.QDrag"); return r }
public func NewQDrag(dragSource: QObject_ITF? = nil) -> QDrag { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.NewQDrag", "", dragSource as Any]) as! QDrag }
public func QDrag_Cancel() { Gui.initModule(); _ = callLocalFunction(l: ["", "", "gui.QDrag_Cancel", ""]) }
public protocol QDragEnterEvent_ITF: QDragMoveEvent_ITF {
    func QDragEnterEvent_PTR() -> QDragEnterEvent
}

public class QDragEnterEvent: QDragMoveEvent, QDragEnterEvent_ITF {
    public func QDragEnterEvent_PTR() -> QDragEnterEvent { callLocalFunction(l: ["", Pointer(), ___className, "QDragEnterEvent_PTR"]) as! QDragEnterEvent }
    public func DestroyQDragEnterEvent() { _ = callLocalFunction(l: ["", Pointer(), ___className, "DestroyQDragEnterEvent"]) }
}

public func NewQDragEnterEventFromPointer(ptr: String) -> QDragEnterEvent { let r = QDragEnterEvent(); r.initFrom(p: ptr, n: "gui.QDragEnterEvent"); return r }
public func NewQDragEnterEvent(point: QPoint_ITF? = nil, actions: Int, data: QMimeData_ITF? = nil, buttons: Int, modifiers: Int) -> QDragEnterEvent { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.NewQDragEnterEvent", "", point as Any, actions as Any, data as Any, buttons as Any, modifiers as Any]) as! QDragEnterEvent }
public protocol QDragLeaveEvent_ITF: QEvent_ITF {
    func QDragLeaveEvent_PTR() -> QDragLeaveEvent
}

public class QDragLeaveEvent: QEvent, QDragLeaveEvent_ITF {
    public func QDragLeaveEvent_PTR() -> QDragLeaveEvent { callLocalFunction(l: ["", Pointer(), ___className, "QDragLeaveEvent_PTR"]) as! QDragLeaveEvent }
    public func DestroyQDragLeaveEvent() { _ = callLocalFunction(l: ["", Pointer(), ___className, "DestroyQDragLeaveEvent"]) }
}

public func NewQDragLeaveEventFromPointer(ptr: String) -> QDragLeaveEvent { let r = QDragLeaveEvent(); r.initFrom(p: ptr, n: "gui.QDragLeaveEvent"); return r }
public func NewQDragLeaveEvent() -> QDragLeaveEvent { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.NewQDragLeaveEvent", ""]) as! QDragLeaveEvent }
public protocol QDragMoveEvent_ITF: QDropEvent_ITF {
    func QDragMoveEvent_PTR() -> QDragMoveEvent
}

public class QDragMoveEvent: QDropEvent, QDragMoveEvent_ITF {
    public func QDragMoveEvent_PTR() -> QDragMoveEvent { callLocalFunction(l: ["", Pointer(), ___className, "QDragMoveEvent_PTR"]) as! QDragMoveEvent }
    public func Accept_QDropEvent(rectangle: QRect_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "Accept", rectangle as Any]) }
    public func AnswerRect() -> QRect { callLocalFunction(l: ["", Pointer(), ___className, "AnswerRect"]) as! QRect }
    public func Ignore_QDropEvent(rectangle: QRect_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "Ignore", rectangle as Any]) }
    public func ConnectDestroyQDragMoveEvent(f: @escaping () -> Void) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectDestroyQDragMoveEvent", "___REMOTE_CALLBACK___"], f: { (_: [Any]) -> Any in f() } as Any) }
    public func DisconnectDestroyQDragMoveEvent() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectDestroyQDragMoveEvent"]) }
    public func DestroyQDragMoveEvent() { _ = callLocalFunction(l: ["", Pointer(), ___className, "DestroyQDragMoveEvent"]) }
    public func DestroyQDragMoveEventDefault() { _ = callLocalFunction(l: ["", Pointer(), ___className, "DestroyQDragMoveEventDefault"]) }
}

public func NewQDragMoveEventFromPointer(ptr: String) -> QDragMoveEvent { let r = QDragMoveEvent(); r.initFrom(p: ptr, n: "gui.QDragMoveEvent"); return r }
public func NewQDragMoveEvent(pos: QPoint_ITF? = nil, actions: Int, data: QMimeData_ITF? = nil, buttons: Int, modifiers: Int, ty: Int) -> QDragMoveEvent { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.NewQDragMoveEvent", "", pos as Any, actions as Any, data as Any, buttons as Any, modifiers as Any, ty as Any]) as! QDragMoveEvent }
public protocol QDropEvent_ITF: QEvent_ITF {
    func QDropEvent_PTR() -> QDropEvent
}

public class QDropEvent: QEvent, QDropEvent_ITF {
    public func QDropEvent_PTR() -> QDropEvent { callLocalFunction(l: ["", Pointer(), ___className, "QDropEvent_PTR"]) as! QDropEvent }
    public func DestroyQDropEvent() { _ = callLocalFunction(l: ["", Pointer(), ___className, "DestroyQDropEvent"]) }
    public func AcceptProposedAction() { _ = callLocalFunction(l: ["", Pointer(), ___className, "AcceptProposedAction"]) }
    public func DropAction() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "DropAction"]) as! Float) }
    public func KeyboardModifiers() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "KeyboardModifiers"]) as! Float) }
    public func MimeData() -> QMimeData { callLocalFunction(l: ["", Pointer(), ___className, "MimeData"]) as! QMimeData }
    public func MouseButtons() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "MouseButtons"]) as! Float) }
    public func Pos() -> QPoint { callLocalFunction(l: ["", Pointer(), ___className, "Pos"]) as! QPoint }
    public func PosF() -> QPointF { callLocalFunction(l: ["", Pointer(), ___className, "PosF"]) as! QPointF }
    public func PossibleActions() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "PossibleActions"]) as! Float) }
    public func ProposedAction() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "ProposedAction"]) as! Float) }
    public func SetDropAction(action: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetDropAction", action as Any]) }
    public func Source() -> QObject { callLocalFunction(l: ["", Pointer(), ___className, "Source"]) as! QObject }
}

public func NewQDropEventFromPointer(ptr: String) -> QDropEvent { let r = QDropEvent(); r.initFrom(p: ptr, n: "gui.QDropEvent"); return r }
public func NewQDropEvent(pos: QPointF_ITF? = nil, actions: Int, data: QMimeData_ITF? = nil, buttons: Int, modifiers: Int, ty: Int) -> QDropEvent { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.NewQDropEvent", "", pos as Any, actions as Any, data as Any, buttons as Any, modifiers as Any, ty as Any]) as! QDropEvent }
public protocol QEnterEvent_ITF: QEvent_ITF {
    func QEnterEvent_PTR() -> QEnterEvent
}

public class QEnterEvent: QEvent, QEnterEvent_ITF {
    public func QEnterEvent_PTR() -> QEnterEvent { callLocalFunction(l: ["", Pointer(), ___className, "QEnterEvent_PTR"]) as! QEnterEvent }
    public func DestroyQEnterEvent() { _ = callLocalFunction(l: ["", Pointer(), ___className, "DestroyQEnterEvent"]) }
    public func GlobalPos() -> QPoint { callLocalFunction(l: ["", Pointer(), ___className, "GlobalPos"]) as! QPoint }
    public func GlobalX() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "GlobalX"]) as! Float) }
    public func GlobalY() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "GlobalY"]) as! Float) }
    public func LocalPos() -> QPointF { callLocalFunction(l: ["", Pointer(), ___className, "LocalPos"]) as! QPointF }
    public func Pos() -> QPoint { callLocalFunction(l: ["", Pointer(), ___className, "Pos"]) as! QPoint }
    public func ScreenPos() -> QPointF { callLocalFunction(l: ["", Pointer(), ___className, "ScreenPos"]) as! QPointF }
    public func WindowPos() -> QPointF { callLocalFunction(l: ["", Pointer(), ___className, "WindowPos"]) as! QPointF }
    public func X() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "X"]) as! Float) }
    public func Y() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "Y"]) as! Float) }
}

public func NewQEnterEventFromPointer(ptr: String) -> QEnterEvent { let r = QEnterEvent(); r.initFrom(p: ptr, n: "gui.QEnterEvent"); return r }
public func NewQEnterEvent(localPos: QPointF_ITF? = nil, windowPos: QPointF_ITF? = nil, screenPos: QPointF_ITF? = nil) -> QEnterEvent { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.NewQEnterEvent", "", localPos as Any, windowPos as Any, screenPos as Any]) as! QEnterEvent }
public protocol QExposeEvent_ITF: QEvent_ITF {
    func QExposeEvent_PTR() -> QExposeEvent
}

public class QExposeEvent: QEvent, QExposeEvent_ITF {
    public func QExposeEvent_PTR() -> QExposeEvent { callLocalFunction(l: ["", Pointer(), ___className, "QExposeEvent_PTR"]) as! QExposeEvent }
    public func DestroyQExposeEvent() { _ = callLocalFunction(l: ["", Pointer(), ___className, "DestroyQExposeEvent"]) }
    public func Region() -> QRegion { callLocalFunction(l: ["", Pointer(), ___className, "Region"]) as! QRegion }
}

public func NewQExposeEventFromPointer(ptr: String) -> QExposeEvent { let r = QExposeEvent(); r.initFrom(p: ptr, n: "gui.QExposeEvent"); return r }
public func NewQExposeEvent(exposeRegion: QRegion_ITF? = nil) -> QExposeEvent { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.NewQExposeEvent", "", exposeRegion as Any]) as! QExposeEvent }
public protocol QFileDialogOptions_ITF {
    func QFileDialogOptions_PTR() -> QFileDialogOptions
}

public class QFileDialogOptions: Internal, QFileDialogOptions_ITF {
    public func QFileDialogOptions_PTR() -> QFileDialogOptions { callLocalFunction(l: ["", Pointer(), ___className, "QFileDialogOptions_PTR"]) as! QFileDialogOptions }
    public func DestroyQFileDialogOptions() { _ = callLocalFunction(l: ["", Pointer(), ___className, "DestroyQFileDialogOptions"]) }
}

public protocol QFileOpenEvent_ITF: QEvent_ITF {
    func QFileOpenEvent_PTR() -> QFileOpenEvent
}

public class QFileOpenEvent: QEvent, QFileOpenEvent_ITF {
    public func QFileOpenEvent_PTR() -> QFileOpenEvent { callLocalFunction(l: ["", Pointer(), ___className, "QFileOpenEvent_PTR"]) as! QFileOpenEvent }
    public func DestroyQFileOpenEvent() { _ = callLocalFunction(l: ["", Pointer(), ___className, "DestroyQFileOpenEvent"]) }
    public func File() -> String { callLocalFunction(l: ["", Pointer(), ___className, "File"]) as! String }
    public func OpenFile(file: QFile_ITF? = nil, flags: Int) -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "OpenFile", file as Any, flags as Any]) as! Bool }
    public func Url() -> QUrl { callLocalFunction(l: ["", Pointer(), ___className, "Url"]) as! QUrl }
}

public func NewQFileOpenEventFromPointer(ptr: String) -> QFileOpenEvent { let r = QFileOpenEvent(); r.initFrom(p: ptr, n: "gui.QFileOpenEvent"); return r }
public protocol QFocusEvent_ITF: QEvent_ITF {
    func QFocusEvent_PTR() -> QFocusEvent
}

public class QFocusEvent: QEvent, QFocusEvent_ITF {
    public func QFocusEvent_PTR() -> QFocusEvent { callLocalFunction(l: ["", Pointer(), ___className, "QFocusEvent_PTR"]) as! QFocusEvent }
    public func DestroyQFocusEvent() { _ = callLocalFunction(l: ["", Pointer(), ___className, "DestroyQFocusEvent"]) }
    public func GotFocus() -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "GotFocus"]) as! Bool }
    public func LostFocus() -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "LostFocus"]) as! Bool }
    public func Reason() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "Reason"]) as! Float) }
}

public func NewQFocusEventFromPointer(ptr: String) -> QFocusEvent { let r = QFocusEvent(); r.initFrom(p: ptr, n: "gui.QFocusEvent"); return r }
public func NewQFocusEvent(ty: Int, reason: Int) -> QFocusEvent { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.NewQFocusEvent", "", ty as Any, reason as Any]) as! QFocusEvent }
public protocol QFont_ITF {
    func QFont_PTR() -> QFont
}

public class QFont: Internal, QFont_ITF {
    public func QFont_PTR() -> QFont { callLocalFunction(l: ["", Pointer(), ___className, "QFont_PTR"]) as! QFont }
    public func Bold() -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "Bold"]) as! Bool }
    public func Capitalization() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "Capitalization"]) as! Float) }
    public func DefaultFamily() -> String { callLocalFunction(l: ["", Pointer(), ___className, "DefaultFamily"]) as! String }
    public func ExactMatch() -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "ExactMatch"]) as! Bool }
    public func Families() -> [String] { callLocalFunction(l: ["", Pointer(), ___className, "Families"]) as! [String] }
    public func Family() -> String { callLocalFunction(l: ["", Pointer(), ___className, "Family"]) as! String }
    public func FixedPitch() -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "FixedPitch"]) as! Bool }
    public func FromString(descrip: String) -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "FromString", descrip as Any]) as! Bool }
    public func HintingPreference() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "HintingPreference"]) as! Float) }
    public func InsertSubstitution(familyName: String, substituteName: String) { _ = callLocalFunction(l: ["", Pointer(), ___className, "InsertSubstitution", familyName as Any, substituteName as Any]) }
    public func InsertSubstitutions(familyName: String, substituteNames: [String]) { _ = callLocalFunction(l: ["", Pointer(), ___className, "InsertSubstitutions", familyName as Any, substituteNames as Any]) }
    public func IsCopyOf(ff: QFont_ITF? = nil) -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "IsCopyOf", ff as Any]) as! Bool }
    public func Italic() -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "Italic"]) as! Bool }
    public func Kerning() -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "Kerning"]) as! Bool }
    public func Key() -> String { callLocalFunction(l: ["", Pointer(), ___className, "Key"]) as! String }
    public func LetterSpacing() -> Float { callLocalFunction(l: ["", Pointer(), ___className, "LetterSpacing"]) as! Float }
    public func LetterSpacingType() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "LetterSpacingType"]) as! Float) }
    public func Overline() -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "Overline"]) as! Bool }
    public func PixelSize() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "PixelSize"]) as! Float) }
    public func PointSize() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "PointSize"]) as! Float) }
    public func PointSizeF() -> Float { callLocalFunction(l: ["", Pointer(), ___className, "PointSizeF"]) as! Float }
    public func RemoveSubstitutions(familyName: String) { _ = callLocalFunction(l: ["", Pointer(), ___className, "RemoveSubstitutions", familyName as Any]) }
    public func Resolve(other: QFont_ITF? = nil) -> QFont { callLocalFunction(l: ["", Pointer(), ___className, "Resolve", other as Any]) as! QFont }
    public func SetBold(enable: Bool) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetBold", enable as Any]) }
    public func SetCapitalization(caps: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetCapitalization", caps as Any]) }
    public func SetFamilies(families: [String]) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetFamilies", families as Any]) }
    public func SetFamily(family: String) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetFamily", family as Any]) }
    public func SetFixedPitch(enable: Bool) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetFixedPitch", enable as Any]) }
    public func SetHintingPreference(hintingPreference: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetHintingPreference", hintingPreference as Any]) }
    public func SetItalic(enable: Bool) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetItalic", enable as Any]) }
    public func SetKerning(enable: Bool) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetKerning", enable as Any]) }
    public func SetLetterSpacing(ty: Int, spacing: Float) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetLetterSpacing", ty as Any, spacing as Any]) }
    public func SetOverline(enable: Bool) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetOverline", enable as Any]) }
    public func SetPixelSize(pixelSize: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetPixelSize", pixelSize as Any]) }
    public func SetPointSize(pointSize: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetPointSize", pointSize as Any]) }
    public func SetPointSizeF(pointSize: Float) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetPointSizeF", pointSize as Any]) }
    public func SetStretch(factor: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetStretch", factor as Any]) }
    public func SetStrikeOut(enable: Bool) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetStrikeOut", enable as Any]) }
    public func SetStyle(style: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetStyle", style as Any]) }
    public func SetStyleHint(hint: Int, strategy: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetStyleHint", hint as Any, strategy as Any]) }
    public func SetStyleName(styleName: String) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetStyleName", styleName as Any]) }
    public func SetStyleStrategy(s: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetStyleStrategy", s as Any]) }
    public func SetUnderline(enable: Bool) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetUnderline", enable as Any]) }
    public func SetWeight(weight: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetWeight", weight as Any]) }
    public func SetWordSpacing(spacing: Float) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetWordSpacing", spacing as Any]) }
    public func Stretch() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "Stretch"]) as! Float) }
    public func StrikeOut() -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "StrikeOut"]) as! Bool }
    public func Style() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "Style"]) as! Float) }
    public func StyleHint() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "StyleHint"]) as! Float) }
    public func StyleName() -> String { callLocalFunction(l: ["", Pointer(), ___className, "StyleName"]) as! String }
    public func StyleStrategy() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "StyleStrategy"]) as! Float) }
    public func Substitute(familyName: String) -> String { callLocalFunction(l: ["", Pointer(), ___className, "Substitute", familyName as Any]) as! String }
    public func Substitutes(familyName: String) -> [String] { callLocalFunction(l: ["", Pointer(), ___className, "Substitutes", familyName as Any]) as! [String] }
    public func Substitutions() -> [String] { callLocalFunction(l: ["", Pointer(), ___className, "Substitutions"]) as! [String] }
    public func Swap(other: QFont_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "Swap", other as Any]) }
    public func ToString() -> String { callLocalFunction(l: ["", Pointer(), ___className, "ToString"]) as! String }
    public func Underline() -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "Underline"]) as! Bool }
    public func Weight() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "Weight"]) as! Float) }
    public func WordSpacing() -> Float { callLocalFunction(l: ["", Pointer(), ___className, "WordSpacing"]) as! Float }
    public func DestroyQFont() { _ = callLocalFunction(l: ["", Pointer(), ___className, "DestroyQFont"]) }
    public func ToVariant() -> QVariant { callLocalFunction(l: ["", Pointer(), ___className, "ToVariant"]) as! QVariant }
}

public func NewQFontFromPointer(ptr: String) -> QFont { let r = QFont(); r.initFrom(p: ptr, n: "gui.QFont"); return r }
public func NewQFont() -> QFont { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.NewQFont", ""]) as! QFont }
public func NewQFont2(family: String, pointSize: Int, weight: Int, italic: Bool) -> QFont { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.NewQFont2", "", family as Any, pointSize as Any, weight as Any, italic as Any]) as! QFont }
public func NewQFont4(font: QFont_ITF? = nil, pd: QPaintDevice_ITF? = nil) -> QFont { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.NewQFont4", "", font as Any, pd as Any]) as! QFont }
public func NewQFont5(font: QFont_ITF? = nil) -> QFont { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.NewQFont5", "", font as Any]) as! QFont }
public func QFont_InsertSubstitution(familyName: String, substituteName: String) { Gui.initModule(); _ = callLocalFunction(l: ["", "", "gui.QFont_InsertSubstitution", "", familyName as Any, substituteName as Any]) }
public func QFont_InsertSubstitutions(familyName: String, substituteNames: [String]) { Gui.initModule(); _ = callLocalFunction(l: ["", "", "gui.QFont_InsertSubstitutions", "", familyName as Any, substituteNames as Any]) }
public func QFont_RemoveSubstitutions(familyName: String) { Gui.initModule(); _ = callLocalFunction(l: ["", "", "gui.QFont_RemoveSubstitutions", "", familyName as Any]) }
public func QFont_Substitute(familyName: String) -> String { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.QFont_Substitute", "", familyName as Any]) as! String }
public func QFont_Substitutes(familyName: String) -> [String] { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.QFont_Substitutes", "", familyName as Any]) as! [String] }
public func QFont_Substitutions() -> [String] { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.QFont_Substitutions", ""]) as! [String] }
public protocol QFontDatabase_ITF {
    func QFontDatabase_PTR() -> QFontDatabase
}

public class QFontDatabase: Internal, QFontDatabase_ITF {
    public func QFontDatabase_PTR() -> QFontDatabase { callLocalFunction(l: ["", Pointer(), ___className, "QFontDatabase_PTR"]) as! QFontDatabase }
    public func DestroyQFontDatabase() { _ = callLocalFunction(l: ["", Pointer(), ___className, "DestroyQFontDatabase"]) }
    public func AddApplicationFont(fileName: String) -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "AddApplicationFont", fileName as Any]) as! Float) }
    public func AddApplicationFontFromData(fontData: QByteArray_ITF? = nil) -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "AddApplicationFontFromData", fontData as Any]) as! Float) }
    public func ApplicationFontFamilies(id: Int) -> [String] { callLocalFunction(l: ["", Pointer(), ___className, "ApplicationFontFamilies", id as Any]) as! [String] }
    public func Bold(family: String, style: String) -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "Bold", family as Any, style as Any]) as! Bool }
    public func Families(writingSystem: Int) -> [String] { callLocalFunction(l: ["", Pointer(), ___className, "Families", writingSystem as Any]) as! [String] }
    public func Font(family: String, style: String, pointSize: Int) -> QFont { callLocalFunction(l: ["", Pointer(), ___className, "Font", family as Any, style as Any, pointSize as Any]) as! QFont }
    public func IsBitmapScalable(family: String, style: String) -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "IsBitmapScalable", family as Any, style as Any]) as! Bool }
    public func IsFixedPitch(family: String, style: String) -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "IsFixedPitch", family as Any, style as Any]) as! Bool }
    public func IsPrivateFamily(family: String) -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "IsPrivateFamily", family as Any]) as! Bool }
    public func IsScalable(family: String, style: String) -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "IsScalable", family as Any, style as Any]) as! Bool }
    public func IsSmoothlyScalable(family: String, style: String) -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "IsSmoothlyScalable", family as Any, style as Any]) as! Bool }
    public func Italic(family: String, style: String) -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "Italic", family as Any, style as Any]) as! Bool }
    public func PointSizes(family: String, styleName: String) -> [Int] { callLocalFunction(l: ["", Pointer(), ___className, "PointSizes", family as Any, styleName as Any]) as! [Int] }
    public func RemoveAllApplicationFonts() -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "RemoveAllApplicationFonts"]) as! Bool }
    public func RemoveApplicationFont(id: Int) -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "RemoveApplicationFont", id as Any]) as! Bool }
    public func SmoothSizes(family: String, styleName: String) -> [Int] { callLocalFunction(l: ["", Pointer(), ___className, "SmoothSizes", family as Any, styleName as Any]) as! [Int] }
    public func StandardSizes() -> [Int] { callLocalFunction(l: ["", Pointer(), ___className, "StandardSizes"]) as! [Int] }
    public func StyleString(font: QFont_ITF? = nil) -> String { callLocalFunction(l: ["", Pointer(), ___className, "StyleString", font as Any]) as! String }
    public func StyleString2(fontInfo: QFontInfo_ITF? = nil) -> String { callLocalFunction(l: ["", Pointer(), ___className, "StyleString2", fontInfo as Any]) as! String }
    public func Styles(family: String) -> [String] { callLocalFunction(l: ["", Pointer(), ___className, "Styles", family as Any]) as! [String] }
    public func SystemFont(ty: Int) -> QFont { callLocalFunction(l: ["", Pointer(), ___className, "SystemFont", ty as Any]) as! QFont }
    public func Weight(family: String, style: String) -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "Weight", family as Any, style as Any]) as! Float) }
}

public func NewQFontDatabaseFromPointer(ptr: String) -> QFontDatabase { let r = QFontDatabase(); r.initFrom(p: ptr, n: "gui.QFontDatabase"); return r }
public func NewQFontDatabase() -> QFontDatabase { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.NewQFontDatabase", ""]) as! QFontDatabase }
public func QFontDatabase_AddApplicationFont(fileName: String) -> Int { Gui.initModule(); return Int(callLocalFunction(l: ["", "", "gui.QFontDatabase_AddApplicationFont", "", fileName as Any]) as! Float) }
public func QFontDatabase_AddApplicationFontFromData(fontData: QByteArray_ITF? = nil) -> Int { Gui.initModule(); return Int(callLocalFunction(l: ["", "", "gui.QFontDatabase_AddApplicationFontFromData", "", fontData as Any]) as! Float) }
public func QFontDatabase_ApplicationFontFamilies(id: Int) -> [String] { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.QFontDatabase_ApplicationFontFamilies", "", id as Any]) as! [String] }
public func QFontDatabase_RemoveAllApplicationFonts() -> Bool { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.QFontDatabase_RemoveAllApplicationFonts", ""]) as! Bool }
public func QFontDatabase_RemoveApplicationFont(id: Int) -> Bool { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.QFontDatabase_RemoveApplicationFont", "", id as Any]) as! Bool }
public func QFontDatabase_StandardSizes() -> [Int] { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.QFontDatabase_StandardSizes", ""]) as! [Int] }
public func QFontDatabase_SystemFont(ty: Int) -> QFont { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.QFontDatabase_SystemFont", "", ty as Any]) as! QFont }
public protocol QFontDialogOptions_ITF {
    func QFontDialogOptions_PTR() -> QFontDialogOptions
}

public class QFontDialogOptions: Internal, QFontDialogOptions_ITF {
    public func QFontDialogOptions_PTR() -> QFontDialogOptions { callLocalFunction(l: ["", Pointer(), ___className, "QFontDialogOptions_PTR"]) as! QFontDialogOptions }
    public func DestroyQFontDialogOptions() { _ = callLocalFunction(l: ["", Pointer(), ___className, "DestroyQFontDialogOptions"]) }
}

public func NewQFontDialogOptionsFromPointer(ptr: String) -> QFontDialogOptions { let r = QFontDialogOptions(); r.initFrom(p: ptr, n: "gui.QFontDialogOptions"); return r }
public protocol QFontInfo_ITF {
    func QFontInfo_PTR() -> QFontInfo
}

public class QFontInfo: Internal, QFontInfo_ITF {
    public func QFontInfo_PTR() -> QFontInfo { callLocalFunction(l: ["", Pointer(), ___className, "QFontInfo_PTR"]) as! QFontInfo }
    public func Bold() -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "Bold"]) as! Bool }
    public func ExactMatch() -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "ExactMatch"]) as! Bool }
    public func Family() -> String { callLocalFunction(l: ["", Pointer(), ___className, "Family"]) as! String }
    public func FixedPitch() -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "FixedPitch"]) as! Bool }
    public func Italic() -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "Italic"]) as! Bool }
    public func PixelSize() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "PixelSize"]) as! Float) }
    public func PointSize() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "PointSize"]) as! Float) }
    public func PointSizeF() -> Float { callLocalFunction(l: ["", Pointer(), ___className, "PointSizeF"]) as! Float }
    public func Style() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "Style"]) as! Float) }
    public func StyleHint() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "StyleHint"]) as! Float) }
    public func StyleName() -> String { callLocalFunction(l: ["", Pointer(), ___className, "StyleName"]) as! String }
    public func Swap(other: QFontInfo_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "Swap", other as Any]) }
    public func Weight() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "Weight"]) as! Float) }
    public func DestroyQFontInfo() { _ = callLocalFunction(l: ["", Pointer(), ___className, "DestroyQFontInfo"]) }
}

public func NewQFontInfoFromPointer(ptr: String) -> QFontInfo { let r = QFontInfo(); r.initFrom(p: ptr, n: "gui.QFontInfo"); return r }
public func NewQFontInfo(font: QFont_ITF? = nil) -> QFontInfo { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.NewQFontInfo", "", font as Any]) as! QFontInfo }
public func NewQFontInfo2(fi: QFontInfo_ITF? = nil) -> QFontInfo { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.NewQFontInfo2", "", fi as Any]) as! QFontInfo }
public protocol QFontMetrics_ITF {
    func QFontMetrics_PTR() -> QFontMetrics
}

public class QFontMetrics: Internal, QFontMetrics_ITF {
    public func QFontMetrics_PTR() -> QFontMetrics { callLocalFunction(l: ["", Pointer(), ___className, "QFontMetrics_PTR"]) as! QFontMetrics }
    public func Ascent() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "Ascent"]) as! Float) }
    public func AverageCharWidth() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "AverageCharWidth"]) as! Float) }
    public func BoundingRect(ch: QChar_ITF? = nil) -> QRect { callLocalFunction(l: ["", Pointer(), ___className, "BoundingRect", ch as Any]) as! QRect }
    public func BoundingRect2(text: String) -> QRect { callLocalFunction(l: ["", Pointer(), ___className, "BoundingRect2", text as Any]) as! QRect }
    public func BoundingRect3(rect: QRect_ITF? = nil, flags: Int, text: String, tabStops: Int, tabArray: Int) -> QRect { callLocalFunction(l: ["", Pointer(), ___className, "BoundingRect3", rect as Any, flags as Any, text as Any, tabStops as Any, tabArray as Any]) as! QRect }
    public func BoundingRect4(x: Int, y: Int, width: Int, height: Int, flags: Int, text: String, tabStops: Int, tabArray: Int) -> QRect { callLocalFunction(l: ["", Pointer(), ___className, "BoundingRect4", x as Any, y as Any, width as Any, height as Any, flags as Any, text as Any, tabStops as Any, tabArray as Any]) as! QRect }
    public func CapHeight() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "CapHeight"]) as! Float) }
    public func Descent() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "Descent"]) as! Float) }
    public func ElidedText(text: String, mode: Int, width: Int, flags: Int) -> String { callLocalFunction(l: ["", Pointer(), ___className, "ElidedText", text as Any, mode as Any, width as Any, flags as Any]) as! String }
    public func Height() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "Height"]) as! Float) }
    public func HorizontalAdvance(text: String, l: Int) -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "HorizontalAdvance", text as Any, l as Any]) as! Float) }
    public func HorizontalAdvance2(ch: QChar_ITF? = nil) -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "HorizontalAdvance2", ch as Any]) as! Float) }
    public func InFont(ch: QChar_ITF? = nil) -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "InFont", ch as Any]) as! Bool }
    public func InFontUcs4(ucs4: Int) -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "InFontUcs4", ucs4 as Any]) as! Bool }
    public func Leading() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "Leading"]) as! Float) }
    public func LeftBearing(ch: QChar_ITF? = nil) -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "LeftBearing", ch as Any]) as! Float) }
    public func LineSpacing() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "LineSpacing"]) as! Float) }
    public func LineWidth() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "LineWidth"]) as! Float) }
    public func MaxWidth() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "MaxWidth"]) as! Float) }
    public func MinLeftBearing() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "MinLeftBearing"]) as! Float) }
    public func MinRightBearing() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "MinRightBearing"]) as! Float) }
    public func OverlinePos() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "OverlinePos"]) as! Float) }
    public func RightBearing(ch: QChar_ITF? = nil) -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "RightBearing", ch as Any]) as! Float) }
    public func Size(flags: Int, text: String, tabStops: Int, tabArray: Int) -> QSize { callLocalFunction(l: ["", Pointer(), ___className, "Size", flags as Any, text as Any, tabStops as Any, tabArray as Any]) as! QSize }
    public func StrikeOutPos() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "StrikeOutPos"]) as! Float) }
    public func Swap(other: QFontMetrics_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "Swap", other as Any]) }
    public func TightBoundingRect(text: String) -> QRect { callLocalFunction(l: ["", Pointer(), ___className, "TightBoundingRect", text as Any]) as! QRect }
    public func UnderlinePos() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "UnderlinePos"]) as! Float) }
    public func XHeight() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "XHeight"]) as! Float) }
    public func DestroyQFontMetrics() { _ = callLocalFunction(l: ["", Pointer(), ___className, "DestroyQFontMetrics"]) }
}

public func NewQFontMetricsFromPointer(ptr: String) -> QFontMetrics { let r = QFontMetrics(); r.initFrom(p: ptr, n: "gui.QFontMetrics"); return r }
public func NewQFontMetrics(font: QFont_ITF? = nil) -> QFontMetrics { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.NewQFontMetrics", "", font as Any]) as! QFontMetrics }
public func NewQFontMetrics3(font: QFont_ITF? = nil, paintdevice: QPaintDevice_ITF? = nil) -> QFontMetrics { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.NewQFontMetrics3", "", font as Any, paintdevice as Any]) as! QFontMetrics }
public func NewQFontMetrics4(fm: QFontMetrics_ITF? = nil) -> QFontMetrics { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.NewQFontMetrics4", "", fm as Any]) as! QFontMetrics }
public protocol QFontMetricsF_ITF {
    func QFontMetricsF_PTR() -> QFontMetricsF
}

public class QFontMetricsF: Internal, QFontMetricsF_ITF {
    public func QFontMetricsF_PTR() -> QFontMetricsF { callLocalFunction(l: ["", Pointer(), ___className, "QFontMetricsF_PTR"]) as! QFontMetricsF }
    public func Ascent() -> Float { callLocalFunction(l: ["", Pointer(), ___className, "Ascent"]) as! Float }
    public func AverageCharWidth() -> Float { callLocalFunction(l: ["", Pointer(), ___className, "AverageCharWidth"]) as! Float }
    public func BoundingRect(text: String) -> QRectF { callLocalFunction(l: ["", Pointer(), ___className, "BoundingRect", text as Any]) as! QRectF }
    public func BoundingRect2(ch: QChar_ITF? = nil) -> QRectF { callLocalFunction(l: ["", Pointer(), ___className, "BoundingRect2", ch as Any]) as! QRectF }
    public func BoundingRect3(rect: QRectF_ITF? = nil, flags: Int, text: String, tabStops: Int, tabArray: Int) -> QRectF { callLocalFunction(l: ["", Pointer(), ___className, "BoundingRect3", rect as Any, flags as Any, text as Any, tabStops as Any, tabArray as Any]) as! QRectF }
    public func CapHeight() -> Float { callLocalFunction(l: ["", Pointer(), ___className, "CapHeight"]) as! Float }
    public func Descent() -> Float { callLocalFunction(l: ["", Pointer(), ___className, "Descent"]) as! Float }
    public func ElidedText(text: String, mode: Int, width: Float, flags: Int) -> String { callLocalFunction(l: ["", Pointer(), ___className, "ElidedText", text as Any, mode as Any, width as Any, flags as Any]) as! String }
    public func Height() -> Float { callLocalFunction(l: ["", Pointer(), ___className, "Height"]) as! Float }
    public func HorizontalAdvance(text: String, length: Int) -> Float { callLocalFunction(l: ["", Pointer(), ___className, "HorizontalAdvance", text as Any, length as Any]) as! Float }
    public func HorizontalAdvance2(ch: QChar_ITF? = nil) -> Float { callLocalFunction(l: ["", Pointer(), ___className, "HorizontalAdvance2", ch as Any]) as! Float }
    public func InFont(ch: QChar_ITF? = nil) -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "InFont", ch as Any]) as! Bool }
    public func InFontUcs4(ch: Int) -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "InFontUcs4", ch as Any]) as! Bool }
    public func Leading() -> Float { callLocalFunction(l: ["", Pointer(), ___className, "Leading"]) as! Float }
    public func LeftBearing(ch: QChar_ITF? = nil) -> Float { callLocalFunction(l: ["", Pointer(), ___className, "LeftBearing", ch as Any]) as! Float }
    public func LineSpacing() -> Float { callLocalFunction(l: ["", Pointer(), ___className, "LineSpacing"]) as! Float }
    public func LineWidth() -> Float { callLocalFunction(l: ["", Pointer(), ___className, "LineWidth"]) as! Float }
    public func MaxWidth() -> Float { callLocalFunction(l: ["", Pointer(), ___className, "MaxWidth"]) as! Float }
    public func MinLeftBearing() -> Float { callLocalFunction(l: ["", Pointer(), ___className, "MinLeftBearing"]) as! Float }
    public func MinRightBearing() -> Float { callLocalFunction(l: ["", Pointer(), ___className, "MinRightBearing"]) as! Float }
    public func OverlinePos() -> Float { callLocalFunction(l: ["", Pointer(), ___className, "OverlinePos"]) as! Float }
    public func RightBearing(ch: QChar_ITF? = nil) -> Float { callLocalFunction(l: ["", Pointer(), ___className, "RightBearing", ch as Any]) as! Float }
    public func Size(flags: Int, text: String, tabStops: Int, tabArray: Int) -> QSizeF { callLocalFunction(l: ["", Pointer(), ___className, "Size", flags as Any, text as Any, tabStops as Any, tabArray as Any]) as! QSizeF }
    public func StrikeOutPos() -> Float { callLocalFunction(l: ["", Pointer(), ___className, "StrikeOutPos"]) as! Float }
    public func Swap(other: QFontMetricsF_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "Swap", other as Any]) }
    public func TightBoundingRect(text: String) -> QRectF { callLocalFunction(l: ["", Pointer(), ___className, "TightBoundingRect", text as Any]) as! QRectF }
    public func UnderlinePos() -> Float { callLocalFunction(l: ["", Pointer(), ___className, "UnderlinePos"]) as! Float }
    public func XHeight() -> Float { callLocalFunction(l: ["", Pointer(), ___className, "XHeight"]) as! Float }
    public func DestroyQFontMetricsF() { _ = callLocalFunction(l: ["", Pointer(), ___className, "DestroyQFontMetricsF"]) }
}

public func NewQFontMetricsFFromPointer(ptr: String) -> QFontMetricsF { let r = QFontMetricsF(); r.initFrom(p: ptr, n: "gui.QFontMetricsF"); return r }
public func NewQFontMetricsF(font: QFont_ITF? = nil) -> QFontMetricsF { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.NewQFontMetricsF", "", font as Any]) as! QFontMetricsF }
public func NewQFontMetricsF3(font: QFont_ITF? = nil, paintdevice: QPaintDevice_ITF? = nil) -> QFontMetricsF { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.NewQFontMetricsF3", "", font as Any, paintdevice as Any]) as! QFontMetricsF }
public func NewQFontMetricsF4(fontMetrics: QFontMetrics_ITF? = nil) -> QFontMetricsF { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.NewQFontMetricsF4", "", fontMetrics as Any]) as! QFontMetricsF }
public func NewQFontMetricsF5(fm: QFontMetricsF_ITF? = nil) -> QFontMetricsF { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.NewQFontMetricsF5", "", fm as Any]) as! QFontMetricsF }
public protocol QGenericMatrix_ITF {
    func QGenericMatrix_PTR() -> QGenericMatrix
}

public class QGenericMatrix: Internal, QGenericMatrix_ITF {
    public func QGenericMatrix_PTR() -> QGenericMatrix { callLocalFunction(l: ["", Pointer(), ___className, "QGenericMatrix_PTR"]) as! QGenericMatrix }
    public func DestroyQGenericMatrix() { _ = callLocalFunction(l: ["", Pointer(), ___className, "DestroyQGenericMatrix"]) }
}

public protocol QGenericPlugin_ITF: QObject_ITF {
    func QGenericPlugin_PTR() -> QGenericPlugin
}

public class QGenericPlugin: QObject, QGenericPlugin_ITF {
    public func QGenericPlugin_PTR() -> QGenericPlugin { callLocalFunction(l: ["", Pointer(), ___className, "QGenericPlugin_PTR"]) as! QGenericPlugin }
    public func ConnectCreate(f: @escaping (_ key: String, _ specification: String) -> QObject) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectCreate", "___REMOTE_CALLBACK___"], f: { (inp: [Any]) -> Any in f(inp[0] as! String, inp[1] as! String) } as Any) }
    public func DisconnectCreate() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectCreate"]) }
    public func Create(key: String, specification: String) -> QObject { callLocalFunction(l: ["", Pointer(), ___className, "Create", key as Any, specification as Any]) as! QObject }
    public func ConnectDestroyQGenericPlugin(f: @escaping () -> Void) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectDestroyQGenericPlugin", "___REMOTE_CALLBACK___"], f: { (_: [Any]) -> Any in f() } as Any) }
    public func DisconnectDestroyQGenericPlugin() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectDestroyQGenericPlugin"]) }
    public func DestroyQGenericPlugin() { _ = callLocalFunction(l: ["", Pointer(), ___className, "DestroyQGenericPlugin"]) }
    public func DestroyQGenericPluginDefault() { _ = callLocalFunction(l: ["", Pointer(), ___className, "DestroyQGenericPluginDefault"]) }
    override public func ChildEventDefault(event: QChildEvent_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "ChildEventDefault", event as Any]) }
    override public func ConnectNotifyDefault(sign: QMetaMethod_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "ConnectNotifyDefault", sign as Any]) }
    override public func CustomEventDefault(event: QEvent_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "CustomEventDefault", event as Any]) }
    override public func DeleteLaterDefault() { _ = callLocalFunction(l: ["", Pointer(), ___className, "DeleteLaterDefault"]) }
    override public func DisconnectNotifyDefault(sign: QMetaMethod_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "DisconnectNotifyDefault", sign as Any]) }
    override public func EventDefault(e: QEvent_ITF? = nil) -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "EventDefault", e as Any]) as! Bool }
    override public func EventFilterDefault(watched: QObject_ITF? = nil, event: QEvent_ITF? = nil) -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "EventFilterDefault", watched as Any, event as Any]) as! Bool }
    override public func MetaObjectDefault() -> QMetaObject { callLocalFunction(l: ["", Pointer(), ___className, "MetaObjectDefault"]) as! QMetaObject }
    override public func TimerEventDefault(event: QTimerEvent_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "TimerEventDefault", event as Any]) }
}

public func NewQGenericPluginFromPointer(ptr: String) -> QGenericPlugin { let r = QGenericPlugin(); r.initFrom(p: ptr, n: "gui.QGenericPlugin"); return r }
public func NewQGenericPlugin(parent: QObject_ITF? = nil) -> QGenericPlugin { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.NewQGenericPlugin", "", parent as Any]) as! QGenericPlugin }
public protocol QGenericPluginFactory_ITF {
    func QGenericPluginFactory_PTR() -> QGenericPluginFactory
}

public class QGenericPluginFactory: Internal, QGenericPluginFactory_ITF {
    public func QGenericPluginFactory_PTR() -> QGenericPluginFactory { callLocalFunction(l: ["", Pointer(), ___className, "QGenericPluginFactory_PTR"]) as! QGenericPluginFactory }
    public func DestroyQGenericPluginFactory() { _ = callLocalFunction(l: ["", Pointer(), ___className, "DestroyQGenericPluginFactory"]) }
    public func Create(key: String, specification: String) -> QObject { callLocalFunction(l: ["", Pointer(), ___className, "Create", key as Any, specification as Any]) as! QObject }
    public func Keys() -> [String] { callLocalFunction(l: ["", Pointer(), ___className, "Keys"]) as! [String] }
}

public func NewQGenericPluginFactoryFromPointer(ptr: String) -> QGenericPluginFactory { let r = QGenericPluginFactory(); r.initFrom(p: ptr, n: "gui.QGenericPluginFactory"); return r }
public func QGenericPluginFactory_Create(key: String, specification: String) -> QObject { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.QGenericPluginFactory_Create", "", key as Any, specification as Any]) as! QObject }
public func QGenericPluginFactory_Keys() -> [String] { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.QGenericPluginFactory_Keys", ""]) as! [String] }
public protocol QGlyphRun_ITF {
    func QGlyphRun_PTR() -> QGlyphRun
}

public class QGlyphRun: Internal, QGlyphRun_ITF {
    public func QGlyphRun_PTR() -> QGlyphRun { callLocalFunction(l: ["", Pointer(), ___className, "QGlyphRun_PTR"]) as! QGlyphRun }
    public func BoundingRect() -> QRectF { callLocalFunction(l: ["", Pointer(), ___className, "BoundingRect"]) as! QRectF }
    public func Clear() { _ = callLocalFunction(l: ["", Pointer(), ___className, "Clear"]) }
    public func Flags() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "Flags"]) as! Float) }
    public func GlyphIndexes() -> [Int] { callLocalFunction(l: ["", Pointer(), ___className, "GlyphIndexes"]) as! [Int] }
    public func IsEmpty() -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "IsEmpty"]) as! Bool }
    public func IsRightToLeft() -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "IsRightToLeft"]) as! Bool }
    public func Overline() -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "Overline"]) as! Bool }
    public func Positions() -> [QPointF] { callLocalFunction(l: ["", Pointer(), ___className, "Positions"]) as! [QPointF] }
    public func RawFont() -> QRawFont { callLocalFunction(l: ["", Pointer(), ___className, "RawFont"]) as! QRawFont }
    public func SetBoundingRect(boundingRect: QRectF_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetBoundingRect", boundingRect as Any]) }
    public func SetFlag(flag: Int, enabled: Bool) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetFlag", flag as Any, enabled as Any]) }
    public func SetFlags(flags: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetFlags", flags as Any]) }
    public func SetGlyphIndexes(glyphIndexes: [Int]) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetGlyphIndexes", glyphIndexes as Any]) }
    public func SetOverline(overline: Bool) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetOverline", overline as Any]) }
    public func SetPositions(positions: [QPointF]) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetPositions", positions as Any]) }
    public func SetRawData(glyphIndexArray: Int, glyphPositionArray: QPointF_ITF? = nil, size: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetRawData", glyphIndexArray as Any, glyphPositionArray as Any, size as Any]) }
    public func SetRawFont(rawFont: QRawFont_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetRawFont", rawFont as Any]) }
    public func SetRightToLeft(rightToLeft: Bool) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetRightToLeft", rightToLeft as Any]) }
    public func SetStrikeOut(strikeOut: Bool) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetStrikeOut", strikeOut as Any]) }
    public func SetUnderline(underline: Bool) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetUnderline", underline as Any]) }
    public func StrikeOut() -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "StrikeOut"]) as! Bool }
    public func Swap(other: QGlyphRun_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "Swap", other as Any]) }
    public func Underline() -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "Underline"]) as! Bool }
    public func DestroyQGlyphRun() { _ = callLocalFunction(l: ["", Pointer(), ___className, "DestroyQGlyphRun"]) }
}

public func NewQGlyphRunFromPointer(ptr: String) -> QGlyphRun { let r = QGlyphRun(); r.initFrom(p: ptr, n: "gui.QGlyphRun"); return r }
public func NewQGlyphRun() -> QGlyphRun { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.NewQGlyphRun", ""]) as! QGlyphRun }
public func NewQGlyphRun2(other: QGlyphRun_ITF? = nil) -> QGlyphRun { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.NewQGlyphRun2", "", other as Any]) as! QGlyphRun }
public protocol QGradient_ITF {
    func QGradient_PTR() -> QGradient
}

public class QGradient: Internal, QGradient_ITF {
    public func QGradient_PTR() -> QGradient { callLocalFunction(l: ["", Pointer(), ___className, "QGradient_PTR"]) as! QGradient }
    public func DestroyQGradient() { _ = callLocalFunction(l: ["", Pointer(), ___className, "DestroyQGradient"]) }
    public func CoordinateMode() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "CoordinateMode"]) as! Float) }
    public func SetColorAt(position: Float, color: QColor_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetColorAt", position as Any, color as Any]) }
    public func SetCoordinateMode(mode: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetCoordinateMode", mode as Any]) }
    public func SetSpread(method: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetSpread", method as Any]) }
    public func Spread() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "Spread"]) as! Float) }
    public func Type() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "Type"]) as! Float) }
}

public func NewQGradientFromPointer(ptr: String) -> QGradient { let r = QGradient(); r.initFrom(p: ptr, n: "gui.QGradient"); return r }
public func NewQGradient2(preset: Int) -> QGradient { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.NewQGradient2", "", preset as Any]) as! QGradient }
public protocol QGuiApplication_ITF: QCoreApplication_ITF {
    func QGuiApplication_PTR() -> QGuiApplication
}

public class QGuiApplication: QCoreApplication, QGuiApplication_ITF {
    public func QGuiApplication_PTR() -> QGuiApplication { callLocalFunction(l: ["", Pointer(), ___className, "QGuiApplication_PTR"]) as! QGuiApplication }
    public func ApplicationDisplayName() -> String { callLocalFunction(l: ["", Pointer(), ___className, "ApplicationDisplayName"]) as! String }
    public func ConnectApplicationDisplayNameChanged(f: @escaping () -> Void) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectApplicationDisplayNameChanged", "___REMOTE_CALLBACK___"], f: { (_: [Any]) -> Any in f() } as Any) }
    public func DisconnectApplicationDisplayNameChanged() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectApplicationDisplayNameChanged"]) }
    public func ApplicationDisplayNameChanged() { _ = callLocalFunction(l: ["", Pointer(), ___className, "ApplicationDisplayNameChanged"]) }
    public func ApplicationState() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "ApplicationState"]) as! Float) }
    public func ConnectApplicationStateChanged(f: @escaping (_ state: Int) -> Void) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectApplicationStateChanged", "___REMOTE_CALLBACK___"], f: { (inp: [Any]) -> Any in f(Int(inp[0] as! Float)) } as Any) }
    public func DisconnectApplicationStateChanged() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectApplicationStateChanged"]) }
    public func ApplicationStateChanged(state: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "ApplicationStateChanged", state as Any]) }
    public func ChangeOverrideCursor(cursor: QCursor_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "ChangeOverrideCursor", cursor as Any]) }
    public func Clipboard() -> QClipboard { callLocalFunction(l: ["", Pointer(), ___className, "Clipboard"]) as! QClipboard }
    public func ConnectCommitDataRequest(f: @escaping (_ manager: QSessionManager) -> Void) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectCommitDataRequest", "___REMOTE_CALLBACK___"], f: { (inp: [Any]) -> Any in f(inp[0] as! QSessionManager) } as Any) }
    public func DisconnectCommitDataRequest() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectCommitDataRequest"]) }
    public func CommitDataRequest(manager: QSessionManager_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "CommitDataRequest", manager as Any]) }
    public func DesktopFileName() -> String { callLocalFunction(l: ["", Pointer(), ___className, "DesktopFileName"]) as! String }
    public func DesktopSettingsAware() -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "DesktopSettingsAware"]) as! Bool }
    public func DevicePixelRatio() -> Float { callLocalFunction(l: ["", Pointer(), ___className, "DevicePixelRatio"]) as! Float }
    override public func EventDefault(e: QEvent_ITF? = nil) -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "EventDefault", e as Any]) as! Bool }
    override public func Exec() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "Exec"]) as! Float) }
    public func FocusObject() -> QObject { callLocalFunction(l: ["", Pointer(), ___className, "FocusObject"]) as! QObject }
    public func ConnectFocusObjectChanged(f: @escaping (_ focusObject: QObject) -> Void) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectFocusObjectChanged", "___REMOTE_CALLBACK___"], f: { (inp: [Any]) -> Any in f(inp[0] as! QObject) } as Any) }
    public func DisconnectFocusObjectChanged() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectFocusObjectChanged"]) }
    public func FocusObjectChanged(focusObject: QObject_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "FocusObjectChanged", focusObject as Any]) }
    public func FocusWindow() -> QWindow { callLocalFunction(l: ["", Pointer(), ___className, "FocusWindow"]) as! QWindow }
    public func ConnectFocusWindowChanged(f: @escaping (_ focusWindow: QWindow) -> Void) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectFocusWindowChanged", "___REMOTE_CALLBACK___"], f: { (inp: [Any]) -> Any in f(inp[0] as! QWindow) } as Any) }
    public func DisconnectFocusWindowChanged() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectFocusWindowChanged"]) }
    public func FocusWindowChanged(focusWindow: QWindow_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "FocusWindowChanged", focusWindow as Any]) }
    public func Font() -> QFont { callLocalFunction(l: ["", Pointer(), ___className, "Font"]) as! QFont }
    public func ConnectFontChanged(f: @escaping (_ font: QFont) -> Void) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectFontChanged", "___REMOTE_CALLBACK___"], f: { (inp: [Any]) -> Any in f(inp[0] as! QFont) } as Any) }
    public func DisconnectFontChanged() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectFontChanged"]) }
    public func FontChanged(font: QFont_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "FontChanged", font as Any]) }
    public func ConnectFontDatabaseChanged(f: @escaping () -> Void) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectFontDatabaseChanged", "___REMOTE_CALLBACK___"], f: { (_: [Any]) -> Any in f() } as Any) }
    public func DisconnectFontDatabaseChanged() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectFontDatabaseChanged"]) }
    public func FontDatabaseChanged() { _ = callLocalFunction(l: ["", Pointer(), ___className, "FontDatabaseChanged"]) }
    public func InputMethod() -> QInputMethod { callLocalFunction(l: ["", Pointer(), ___className, "InputMethod"]) as! QInputMethod }
    public func IsFallbackSessionManagementEnabled() -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "IsFallbackSessionManagementEnabled"]) as! Bool }
    public func IsLeftToRight() -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "IsLeftToRight"]) as! Bool }
    public func IsRightToLeft() -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "IsRightToLeft"]) as! Bool }
    public func IsSavingSession() -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "IsSavingSession"]) as! Bool }
    public func IsSessionRestored() -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "IsSessionRestored"]) as! Bool }
    public func KeyboardModifiers() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "KeyboardModifiers"]) as! Float) }
    public func ConnectLastWindowClosed(f: @escaping () -> Void) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectLastWindowClosed", "___REMOTE_CALLBACK___"], f: { (_: [Any]) -> Any in f() } as Any) }
    public func DisconnectLastWindowClosed() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectLastWindowClosed"]) }
    public func LastWindowClosed() { _ = callLocalFunction(l: ["", Pointer(), ___className, "LastWindowClosed"]) }
    public func LayoutDirection() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "LayoutDirection"]) as! Float) }
    public func ConnectLayoutDirectionChanged(f: @escaping (_ direction: Int) -> Void) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectLayoutDirectionChanged", "___REMOTE_CALLBACK___"], f: { (inp: [Any]) -> Any in f(Int(inp[0] as! Float)) } as Any) }
    public func DisconnectLayoutDirectionChanged() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectLayoutDirectionChanged"]) }
    public func LayoutDirectionChanged(direction: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "LayoutDirectionChanged", direction as Any]) }
    public func ModalWindow() -> QWindow { callLocalFunction(l: ["", Pointer(), ___className, "ModalWindow"]) as! QWindow }
    public func MouseButtons() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "MouseButtons"]) as! Float) }
    public func OverrideCursor() -> QCursor { callLocalFunction(l: ["", Pointer(), ___className, "OverrideCursor"]) as! QCursor }
    public func Palette() -> QPalette { callLocalFunction(l: ["", Pointer(), ___className, "Palette"]) as! QPalette }
    public func ConnectPaletteChanged(f: @escaping (_ palette: QPalette) -> Void) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectPaletteChanged", "___REMOTE_CALLBACK___"], f: { (inp: [Any]) -> Any in f(inp[0] as! QPalette) } as Any) }
    public func DisconnectPaletteChanged() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectPaletteChanged"]) }
    public func PaletteChanged(palette: QPalette_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "PaletteChanged", palette as Any]) }
    public func PlatformFunction(function: QByteArray_ITF? = nil) -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "PlatformFunction", function as Any]) as! Float) }
    public func PlatformName() -> String { callLocalFunction(l: ["", Pointer(), ___className, "PlatformName"]) as! String }
    public func PrimaryScreen() -> QScreen { callLocalFunction(l: ["", Pointer(), ___className, "PrimaryScreen"]) as! QScreen }
    public func ConnectPrimaryScreenChanged(f: @escaping (_ screen: QScreen) -> Void) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectPrimaryScreenChanged", "___REMOTE_CALLBACK___"], f: { (inp: [Any]) -> Any in f(inp[0] as! QScreen) } as Any) }
    public func DisconnectPrimaryScreenChanged() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectPrimaryScreenChanged"]) }
    public func PrimaryScreenChanged(screen: QScreen_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "PrimaryScreenChanged", screen as Any]) }
    public func QueryKeyboardModifiers() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "QueryKeyboardModifiers"]) as! Float) }
    public func QuitOnLastWindowClosed() -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "QuitOnLastWindowClosed"]) as! Bool }
    public func RestoreOverrideCursor() { _ = callLocalFunction(l: ["", Pointer(), ___className, "RestoreOverrideCursor"]) }
    public func ConnectSaveStateRequest(f: @escaping (_ manager: QSessionManager) -> Void) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectSaveStateRequest", "___REMOTE_CALLBACK___"], f: { (inp: [Any]) -> Any in f(inp[0] as! QSessionManager) } as Any) }
    public func DisconnectSaveStateRequest() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectSaveStateRequest"]) }
    public func SaveStateRequest(manager: QSessionManager_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SaveStateRequest", manager as Any]) }
    public func ConnectScreenAdded(f: @escaping (_ screen: QScreen) -> Void) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectScreenAdded", "___REMOTE_CALLBACK___"], f: { (inp: [Any]) -> Any in f(inp[0] as! QScreen) } as Any) }
    public func DisconnectScreenAdded() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectScreenAdded"]) }
    public func ScreenAdded(screen: QScreen_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "ScreenAdded", screen as Any]) }
    public func ScreenAt(point: QPoint_ITF? = nil) -> QScreen { callLocalFunction(l: ["", Pointer(), ___className, "ScreenAt", point as Any]) as! QScreen }
    public func ConnectScreenRemoved(f: @escaping (_ screen: QScreen) -> Void) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectScreenRemoved", "___REMOTE_CALLBACK___"], f: { (inp: [Any]) -> Any in f(inp[0] as! QScreen) } as Any) }
    public func DisconnectScreenRemoved() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectScreenRemoved"]) }
    public func ScreenRemoved(screen: QScreen_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "ScreenRemoved", screen as Any]) }
    public func Screens() -> [QScreen] { callLocalFunction(l: ["", Pointer(), ___className, "Screens"]) as! [QScreen] }
    public func SessionId() -> String { callLocalFunction(l: ["", Pointer(), ___className, "SessionId"]) as! String }
    public func SessionKey() -> String { callLocalFunction(l: ["", Pointer(), ___className, "SessionKey"]) as! String }
    public func SetApplicationDisplayName(name: String) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetApplicationDisplayName", name as Any]) }
    public func SetDesktopFileName(name: String) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetDesktopFileName", name as Any]) }
    public func SetDesktopSettingsAware(on: Bool) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetDesktopSettingsAware", on as Any]) }
    public func SetFallbackSessionManagementEnabled(enabled: Bool) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetFallbackSessionManagementEnabled", enabled as Any]) }
    public func SetFont(font: QFont_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetFont", font as Any]) }
    public func SetLayoutDirection(direction: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetLayoutDirection", direction as Any]) }
    public func SetOverrideCursor(cursor: QCursor_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetOverrideCursor", cursor as Any]) }
    public func SetPalette(pal: QPalette_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetPalette", pal as Any]) }
    public func SetQuitOnLastWindowClosed(quit: Bool) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetQuitOnLastWindowClosed", quit as Any]) }
    public func SetWindowIcon(icon: QIcon_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetWindowIcon", icon as Any]) }
    public func StyleHints() -> QStyleHints { callLocalFunction(l: ["", Pointer(), ___className, "StyleHints"]) as! QStyleHints }
    public func Sync() { _ = callLocalFunction(l: ["", Pointer(), ___className, "Sync"]) }
    public func TopLevelAt(pos: QPoint_ITF? = nil) -> QWindow { callLocalFunction(l: ["", Pointer(), ___className, "TopLevelAt", pos as Any]) as! QWindow }
    public func WindowIcon() -> QIcon { callLocalFunction(l: ["", Pointer(), ___className, "WindowIcon"]) as! QIcon }
    public func ConnectDestroyQGuiApplication(f: @escaping () -> Void) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectDestroyQGuiApplication", "___REMOTE_CALLBACK___"], f: { (_: [Any]) -> Any in f() } as Any) }
    public func DisconnectDestroyQGuiApplication() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectDestroyQGuiApplication"]) }
    public func DestroyQGuiApplication() { _ = callLocalFunction(l: ["", Pointer(), ___className, "DestroyQGuiApplication"]) }
    public func DestroyQGuiApplicationDefault() { _ = callLocalFunction(l: ["", Pointer(), ___className, "DestroyQGuiApplicationDefault"]) }
    override public func QuitDefault() { _ = callLocalFunction(l: ["", Pointer(), ___className, "QuitDefault"]) }
    override public func ChildEventDefault(event: QChildEvent_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "ChildEventDefault", event as Any]) }
    override public func ConnectNotifyDefault(sign: QMetaMethod_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "ConnectNotifyDefault", sign as Any]) }
    override public func CustomEventDefault(event: QEvent_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "CustomEventDefault", event as Any]) }
    override public func DeleteLaterDefault() { _ = callLocalFunction(l: ["", Pointer(), ___className, "DeleteLaterDefault"]) }
    override public func DisconnectNotifyDefault(sign: QMetaMethod_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "DisconnectNotifyDefault", sign as Any]) }
    override public func EventFilterDefault(watched: QObject_ITF? = nil, event: QEvent_ITF? = nil) -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "EventFilterDefault", watched as Any, event as Any]) as! Bool }
    override public func MetaObjectDefault() -> QMetaObject { callLocalFunction(l: ["", Pointer(), ___className, "MetaObjectDefault"]) as! QMetaObject }
    override public func TimerEventDefault(event: QTimerEvent_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "TimerEventDefault", event as Any]) }
}

public func NewQGuiApplicationFromPointer(ptr: String) -> QGuiApplication { let r = QGuiApplication(); r.initFrom(p: ptr, n: "gui.QGuiApplication"); return r }
public func NewQGuiApplication(argc: Int, argv: [String]) -> QGuiApplication { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.NewQGuiApplication", "", argc as Any, argv as Any]) as! QGuiApplication }
public func QGuiApplication_ApplicationDisplayName() -> String { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.QGuiApplication_ApplicationDisplayName", ""]) as! String }
public func QGuiApplication_ApplicationState() -> Int { Gui.initModule(); return Int(callLocalFunction(l: ["", "", "gui.QGuiApplication_ApplicationState", ""]) as! Float) }
public func QGuiApplication_ChangeOverrideCursor(cursor: QCursor_ITF? = nil) { Gui.initModule(); _ = callLocalFunction(l: ["", "", "gui.QGuiApplication_ChangeOverrideCursor", "", cursor as Any]) }
public func QGuiApplication_Clipboard() -> QClipboard { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.QGuiApplication_Clipboard", ""]) as! QClipboard }
public func QGuiApplication_DesktopFileName() -> String { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.QGuiApplication_DesktopFileName", ""]) as! String }
public func QGuiApplication_DesktopSettingsAware() -> Bool { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.QGuiApplication_DesktopSettingsAware", ""]) as! Bool }
public func QGuiApplication_Exec() -> Int { Gui.initModule(); return Int(callLocalFunction(l: ["", "", "gui.QGuiApplication_Exec", ""]) as! Float) }
public func QGuiApplication_FocusObject() -> QObject { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.QGuiApplication_FocusObject", ""]) as! QObject }
public func QGuiApplication_FocusWindow() -> QWindow { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.QGuiApplication_FocusWindow", ""]) as! QWindow }
public func QGuiApplication_Font() -> QFont { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.QGuiApplication_Font", ""]) as! QFont }
public func QGuiApplication_InputMethod() -> QInputMethod { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.QGuiApplication_InputMethod", ""]) as! QInputMethod }
public func QGuiApplication_IsFallbackSessionManagementEnabled() -> Bool { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.QGuiApplication_IsFallbackSessionManagementEnabled", ""]) as! Bool }
public func QGuiApplication_IsLeftToRight() -> Bool { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.QGuiApplication_IsLeftToRight", ""]) as! Bool }
public func QGuiApplication_IsRightToLeft() -> Bool { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.QGuiApplication_IsRightToLeft", ""]) as! Bool }
public func QGuiApplication_KeyboardModifiers() -> Int { Gui.initModule(); return Int(callLocalFunction(l: ["", "", "gui.QGuiApplication_KeyboardModifiers", ""]) as! Float) }
public func QGuiApplication_LayoutDirection() -> Int { Gui.initModule(); return Int(callLocalFunction(l: ["", "", "gui.QGuiApplication_LayoutDirection", ""]) as! Float) }
public func QGuiApplication_ModalWindow() -> QWindow { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.QGuiApplication_ModalWindow", ""]) as! QWindow }
public func QGuiApplication_MouseButtons() -> Int { Gui.initModule(); return Int(callLocalFunction(l: ["", "", "gui.QGuiApplication_MouseButtons", ""]) as! Float) }
public func QGuiApplication_OverrideCursor() -> QCursor { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.QGuiApplication_OverrideCursor", ""]) as! QCursor }
public func QGuiApplication_Palette() -> QPalette { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.QGuiApplication_Palette", ""]) as! QPalette }
public func QGuiApplication_PlatformFunction(function: QByteArray_ITF? = nil) -> Int { Gui.initModule(); return Int(callLocalFunction(l: ["", "", "gui.QGuiApplication_PlatformFunction", "", function as Any]) as! Float) }
public func QGuiApplication_PlatformName() -> String { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.QGuiApplication_PlatformName", ""]) as! String }
public func QGuiApplication_PrimaryScreen() -> QScreen { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.QGuiApplication_PrimaryScreen", ""]) as! QScreen }
public func QGuiApplication_QueryKeyboardModifiers() -> Int { Gui.initModule(); return Int(callLocalFunction(l: ["", "", "gui.QGuiApplication_QueryKeyboardModifiers", ""]) as! Float) }
public func QGuiApplication_QuitOnLastWindowClosed() -> Bool { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.QGuiApplication_QuitOnLastWindowClosed", ""]) as! Bool }
public func QGuiApplication_RestoreOverrideCursor() { Gui.initModule(); _ = callLocalFunction(l: ["", "", "gui.QGuiApplication_RestoreOverrideCursor", ""]) }
public func QGuiApplication_ScreenAt(point: QPoint_ITF? = nil) -> QScreen { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.QGuiApplication_ScreenAt", "", point as Any]) as! QScreen }
public func QGuiApplication_Screens() -> [QScreen] { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.QGuiApplication_Screens", ""]) as! [QScreen] }
public func QGuiApplication_SetApplicationDisplayName(name: String) { Gui.initModule(); _ = callLocalFunction(l: ["", "", "gui.QGuiApplication_SetApplicationDisplayName", "", name as Any]) }
public func QGuiApplication_SetDesktopFileName(name: String) { Gui.initModule(); _ = callLocalFunction(l: ["", "", "gui.QGuiApplication_SetDesktopFileName", "", name as Any]) }
public func QGuiApplication_SetDesktopSettingsAware(on: Bool) { Gui.initModule(); _ = callLocalFunction(l: ["", "", "gui.QGuiApplication_SetDesktopSettingsAware", "", on as Any]) }
public func QGuiApplication_SetFallbackSessionManagementEnabled(enabled: Bool) { Gui.initModule(); _ = callLocalFunction(l: ["", "", "gui.QGuiApplication_SetFallbackSessionManagementEnabled", "", enabled as Any]) }
public func QGuiApplication_SetFont(font: QFont_ITF? = nil) { Gui.initModule(); _ = callLocalFunction(l: ["", "", "gui.QGuiApplication_SetFont", "", font as Any]) }
public func QGuiApplication_SetLayoutDirection(direction: Int) { Gui.initModule(); _ = callLocalFunction(l: ["", "", "gui.QGuiApplication_SetLayoutDirection", "", direction as Any]) }
public func QGuiApplication_SetOverrideCursor(cursor: QCursor_ITF? = nil) { Gui.initModule(); _ = callLocalFunction(l: ["", "", "gui.QGuiApplication_SetOverrideCursor", "", cursor as Any]) }
public func QGuiApplication_SetPalette(pal: QPalette_ITF? = nil) { Gui.initModule(); _ = callLocalFunction(l: ["", "", "gui.QGuiApplication_SetPalette", "", pal as Any]) }
public func QGuiApplication_SetQuitOnLastWindowClosed(quit: Bool) { Gui.initModule(); _ = callLocalFunction(l: ["", "", "gui.QGuiApplication_SetQuitOnLastWindowClosed", "", quit as Any]) }
public func QGuiApplication_SetWindowIcon(icon: QIcon_ITF? = nil) { Gui.initModule(); _ = callLocalFunction(l: ["", "", "gui.QGuiApplication_SetWindowIcon", "", icon as Any]) }
public func QGuiApplication_StyleHints() -> QStyleHints { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.QGuiApplication_StyleHints", ""]) as! QStyleHints }
public func QGuiApplication_Sync() { Gui.initModule(); _ = callLocalFunction(l: ["", "", "gui.QGuiApplication_Sync", ""]) }
public func QGuiApplication_TopLevelAt(pos: QPoint_ITF? = nil) -> QWindow { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.QGuiApplication_TopLevelAt", "", pos as Any]) as! QWindow }
public func QGuiApplication_WindowIcon() -> QIcon { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.QGuiApplication_WindowIcon", ""]) as! QIcon }
public protocol QHelpEvent_ITF: QEvent_ITF {
    func QHelpEvent_PTR() -> QHelpEvent
}

public class QHelpEvent: QEvent, QHelpEvent_ITF {
    public func QHelpEvent_PTR() -> QHelpEvent { callLocalFunction(l: ["", Pointer(), ___className, "QHelpEvent_PTR"]) as! QHelpEvent }
    public func DestroyQHelpEvent() { _ = callLocalFunction(l: ["", Pointer(), ___className, "DestroyQHelpEvent"]) }
    public func GlobalPos() -> QPoint { callLocalFunction(l: ["", Pointer(), ___className, "GlobalPos"]) as! QPoint }
    public func GlobalX() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "GlobalX"]) as! Float) }
    public func GlobalY() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "GlobalY"]) as! Float) }
    public func Pos() -> QPoint { callLocalFunction(l: ["", Pointer(), ___className, "Pos"]) as! QPoint }
    public func X() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "X"]) as! Float) }
    public func Y() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "Y"]) as! Float) }
}

public func NewQHelpEventFromPointer(ptr: String) -> QHelpEvent { let r = QHelpEvent(); r.initFrom(p: ptr, n: "gui.QHelpEvent"); return r }
public func NewQHelpEvent(ty: Int, pos: QPoint_ITF? = nil, globalPos: QPoint_ITF? = nil) -> QHelpEvent { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.NewQHelpEvent", "", ty as Any, pos as Any, globalPos as Any]) as! QHelpEvent }
public protocol QHideEvent_ITF: QEvent_ITF {
    func QHideEvent_PTR() -> QHideEvent
}

public class QHideEvent: QEvent, QHideEvent_ITF {
    public func QHideEvent_PTR() -> QHideEvent { callLocalFunction(l: ["", Pointer(), ___className, "QHideEvent_PTR"]) as! QHideEvent }
    public func DestroyQHideEvent() { _ = callLocalFunction(l: ["", Pointer(), ___className, "DestroyQHideEvent"]) }
}

public func NewQHideEventFromPointer(ptr: String) -> QHideEvent { let r = QHideEvent(); r.initFrom(p: ptr, n: "gui.QHideEvent"); return r }
public func NewQHideEvent() -> QHideEvent { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.NewQHideEvent", ""]) as! QHideEvent }
public protocol QHoverEvent_ITF: QInputEvent_ITF {
    func QHoverEvent_PTR() -> QHoverEvent
}

public class QHoverEvent: QInputEvent, QHoverEvent_ITF {
    public func QHoverEvent_PTR() -> QHoverEvent { callLocalFunction(l: ["", Pointer(), ___className, "QHoverEvent_PTR"]) as! QHoverEvent }
    public func DestroyQHoverEvent() { _ = callLocalFunction(l: ["", Pointer(), ___className, "DestroyQHoverEvent"]) }
    public func OldPos() -> QPoint { callLocalFunction(l: ["", Pointer(), ___className, "OldPos"]) as! QPoint }
    public func OldPosF() -> QPointF { callLocalFunction(l: ["", Pointer(), ___className, "OldPosF"]) as! QPointF }
    public func Pos() -> QPoint { callLocalFunction(l: ["", Pointer(), ___className, "Pos"]) as! QPoint }
    public func PosF() -> QPointF { callLocalFunction(l: ["", Pointer(), ___className, "PosF"]) as! QPointF }
}

public func NewQHoverEventFromPointer(ptr: String) -> QHoverEvent { let r = QHoverEvent(); r.initFrom(p: ptr, n: "gui.QHoverEvent"); return r }
public func NewQHoverEvent(ty: Int, pos: QPointF_ITF? = nil, oldPos: QPointF_ITF? = nil, modifiers: Int) -> QHoverEvent { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.NewQHoverEvent", "", ty as Any, pos as Any, oldPos as Any, modifiers as Any]) as! QHoverEvent }
public protocol QIcon_ITF {
    func QIcon_PTR() -> QIcon
}

public class QIcon: Internal, QIcon_ITF {
    public func QIcon_PTR() -> QIcon { callLocalFunction(l: ["", Pointer(), ___className, "QIcon_PTR"]) as! QIcon }
    public func ActualSize(size: QSize_ITF? = nil, mode: Int, state: Int) -> QSize { callLocalFunction(l: ["", Pointer(), ___className, "ActualSize", size as Any, mode as Any, state as Any]) as! QSize }
    public func ActualSize2(window: QWindow_ITF? = nil, size: QSize_ITF? = nil, mode: Int, state: Int) -> QSize { callLocalFunction(l: ["", Pointer(), ___className, "ActualSize2", window as Any, size as Any, mode as Any, state as Any]) as! QSize }
    public func AddFile(fileName: String, size: QSize_ITF? = nil, mode: Int, state: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "AddFile", fileName as Any, size as Any, mode as Any, state as Any]) }
    public func AddPixmap(pixmap: QPixmap_ITF? = nil, mode: Int, state: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "AddPixmap", pixmap as Any, mode as Any, state as Any]) }
    public func AvailableSizes(mode: Int, state: Int) -> [QSize] { callLocalFunction(l: ["", Pointer(), ___className, "AvailableSizes", mode as Any, state as Any]) as! [QSize] }
    public func CacheKey() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "CacheKey"]) as! Float) }
    public func FallbackSearchPaths() -> [String] { callLocalFunction(l: ["", Pointer(), ___className, "FallbackSearchPaths"]) as! [String] }
    public func FallbackThemeName() -> String { callLocalFunction(l: ["", Pointer(), ___className, "FallbackThemeName"]) as! String }
    public func FromTheme(name: String) -> QIcon { callLocalFunction(l: ["", Pointer(), ___className, "FromTheme", name as Any]) as! QIcon }
    public func FromTheme2(name: String, fallback: QIcon_ITF? = nil) -> QIcon { callLocalFunction(l: ["", Pointer(), ___className, "FromTheme2", name as Any, fallback as Any]) as! QIcon }
    public func HasThemeIcon(name: String) -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "HasThemeIcon", name as Any]) as! Bool }
    public func IsMask() -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "IsMask"]) as! Bool }
    public func IsNull() -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "IsNull"]) as! Bool }
    public func Name() -> String { callLocalFunction(l: ["", Pointer(), ___className, "Name"]) as! String }
    public func Paint(painter: QPainter_ITF? = nil, rect: QRect_ITF? = nil, alignment: Int, mode: Int, state: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "Paint", painter as Any, rect as Any, alignment as Any, mode as Any, state as Any]) }
    public func Paint2(painter: QPainter_ITF? = nil, x: Int, y: Int, w: Int, h: Int, alignment: Int, mode: Int, state: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "Paint2", painter as Any, x as Any, y as Any, w as Any, h as Any, alignment as Any, mode as Any, state as Any]) }
    public func Pixmap(size: QSize_ITF? = nil, mode: Int, state: Int) -> QPixmap { callLocalFunction(l: ["", Pointer(), ___className, "Pixmap", size as Any, mode as Any, state as Any]) as! QPixmap }
    public func Pixmap2(w: Int, h: Int, mode: Int, state: Int) -> QPixmap { callLocalFunction(l: ["", Pointer(), ___className, "Pixmap2", w as Any, h as Any, mode as Any, state as Any]) as! QPixmap }
    public func Pixmap3(extent: Int, mode: Int, state: Int) -> QPixmap { callLocalFunction(l: ["", Pointer(), ___className, "Pixmap3", extent as Any, mode as Any, state as Any]) as! QPixmap }
    public func Pixmap4(window: QWindow_ITF? = nil, size: QSize_ITF? = nil, mode: Int, state: Int) -> QPixmap { callLocalFunction(l: ["", Pointer(), ___className, "Pixmap4", window as Any, size as Any, mode as Any, state as Any]) as! QPixmap }
    public func SetFallbackSearchPaths(paths: [String]) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetFallbackSearchPaths", paths as Any]) }
    public func SetFallbackThemeName(name: String) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetFallbackThemeName", name as Any]) }
    public func SetIsMask(isMask: Bool) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetIsMask", isMask as Any]) }
    public func SetThemeName(name: String) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetThemeName", name as Any]) }
    public func SetThemeSearchPaths(paths: [String]) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetThemeSearchPaths", paths as Any]) }
    public func Swap(other: QIcon_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "Swap", other as Any]) }
    public func ThemeName() -> String { callLocalFunction(l: ["", Pointer(), ___className, "ThemeName"]) as! String }
    public func ThemeSearchPaths() -> [String] { callLocalFunction(l: ["", Pointer(), ___className, "ThemeSearchPaths"]) as! [String] }
    public func DestroyQIcon() { _ = callLocalFunction(l: ["", Pointer(), ___className, "DestroyQIcon"]) }
    public func ToVariant() -> QVariant { callLocalFunction(l: ["", Pointer(), ___className, "ToVariant"]) as! QVariant }
}

public func NewQIconFromPointer(ptr: String) -> QIcon { let r = QIcon(); r.initFrom(p: ptr, n: "gui.QIcon"); return r }
public func NewQIcon() -> QIcon { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.NewQIcon", ""]) as! QIcon }
public func NewQIcon2(pixmap: QPixmap_ITF? = nil) -> QIcon { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.NewQIcon2", "", pixmap as Any]) as! QIcon }
public func NewQIcon3(other: QIcon_ITF? = nil) -> QIcon { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.NewQIcon3", "", other as Any]) as! QIcon }
public func NewQIcon4(other: QIcon_ITF? = nil) -> QIcon { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.NewQIcon4", "", other as Any]) as! QIcon }
public func NewQIcon5(fileName: String) -> QIcon { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.NewQIcon5", "", fileName as Any]) as! QIcon }
public func NewQIcon6(engine: QIconEngine_ITF? = nil) -> QIcon { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.NewQIcon6", "", engine as Any]) as! QIcon }
public func QIcon_FallbackSearchPaths() -> [String] { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.QIcon_FallbackSearchPaths", ""]) as! [String] }
public func QIcon_FallbackThemeName() -> String { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.QIcon_FallbackThemeName", ""]) as! String }
public func QIcon_FromTheme(name: String) -> QIcon { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.QIcon_FromTheme", "", name as Any]) as! QIcon }
public func QIcon_FromTheme2(name: String, fallback: QIcon_ITF? = nil) -> QIcon { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.QIcon_FromTheme2", "", name as Any, fallback as Any]) as! QIcon }
public func QIcon_HasThemeIcon(name: String) -> Bool { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.QIcon_HasThemeIcon", "", name as Any]) as! Bool }
public func QIcon_SetFallbackSearchPaths(paths: [String]) { Gui.initModule(); _ = callLocalFunction(l: ["", "", "gui.QIcon_SetFallbackSearchPaths", "", paths as Any]) }
public func QIcon_SetFallbackThemeName(name: String) { Gui.initModule(); _ = callLocalFunction(l: ["", "", "gui.QIcon_SetFallbackThemeName", "", name as Any]) }
public func QIcon_SetThemeName(name: String) { Gui.initModule(); _ = callLocalFunction(l: ["", "", "gui.QIcon_SetThemeName", "", name as Any]) }
public func QIcon_SetThemeSearchPaths(paths: [String]) { Gui.initModule(); _ = callLocalFunction(l: ["", "", "gui.QIcon_SetThemeSearchPaths", "", paths as Any]) }
public func QIcon_ThemeName() -> String { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.QIcon_ThemeName", ""]) as! String }
public func QIcon_ThemeSearchPaths() -> [String] { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.QIcon_ThemeSearchPaths", ""]) as! [String] }
public protocol QIconDragEvent_ITF: QEvent_ITF {
    func QIconDragEvent_PTR() -> QIconDragEvent
}

public class QIconDragEvent: QEvent, QIconDragEvent_ITF {
    public func QIconDragEvent_PTR() -> QIconDragEvent { callLocalFunction(l: ["", Pointer(), ___className, "QIconDragEvent_PTR"]) as! QIconDragEvent }
    public func DestroyQIconDragEvent() { _ = callLocalFunction(l: ["", Pointer(), ___className, "DestroyQIconDragEvent"]) }
}

public func NewQIconDragEventFromPointer(ptr: String) -> QIconDragEvent { let r = QIconDragEvent(); r.initFrom(p: ptr, n: "gui.QIconDragEvent"); return r }
public func NewQIconDragEvent() -> QIconDragEvent { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.NewQIconDragEvent", ""]) as! QIconDragEvent }
public protocol QIconEngine_ITF {
    func QIconEngine_PTR() -> QIconEngine
}

public class QIconEngine: Internal, QIconEngine_ITF {
    public func QIconEngine_PTR() -> QIconEngine { callLocalFunction(l: ["", Pointer(), ___className, "QIconEngine_PTR"]) as! QIconEngine }
    public func ConnectActualSize(f: @escaping (_ size: QSize, _ mode: Int, _ state: Int) -> QSize) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectActualSize", "___REMOTE_CALLBACK___"], f: { (inp: [Any]) -> Any in f(inp[0] as! QSize, Int(inp[1] as! Float), Int(inp[2] as! Float)) } as Any) }
    public func DisconnectActualSize() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectActualSize"]) }
    public func ActualSize(size: QSize_ITF? = nil, mode: Int, state: Int) -> QSize { callLocalFunction(l: ["", Pointer(), ___className, "ActualSize", size as Any, mode as Any, state as Any]) as! QSize }
    public func ActualSizeDefault(size: QSize_ITF? = nil, mode: Int, state: Int) -> QSize { callLocalFunction(l: ["", Pointer(), ___className, "ActualSizeDefault", size as Any, mode as Any, state as Any]) as! QSize }
    public func ConnectAddFile(f: @escaping (_ fileName: String, _ size: QSize, _ mode: Int, _ state: Int) -> Void) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectAddFile", "___REMOTE_CALLBACK___"], f: { (inp: [Any]) -> Any in f(inp[0] as! String, inp[1] as! QSize, Int(inp[2] as! Float), Int(inp[3] as! Float)) } as Any) }
    public func DisconnectAddFile() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectAddFile"]) }
    public func AddFile(fileName: String, size: QSize_ITF? = nil, mode: Int, state: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "AddFile", fileName as Any, size as Any, mode as Any, state as Any]) }
    public func AddFileDefault(fileName: String, size: QSize_ITF? = nil, mode: Int, state: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "AddFileDefault", fileName as Any, size as Any, mode as Any, state as Any]) }
    public func ConnectAddPixmap(f: @escaping (_ pixmap: QPixmap, _ mode: Int, _ state: Int) -> Void) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectAddPixmap", "___REMOTE_CALLBACK___"], f: { (inp: [Any]) -> Any in f(inp[0] as! QPixmap, Int(inp[1] as! Float), Int(inp[2] as! Float)) } as Any) }
    public func DisconnectAddPixmap() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectAddPixmap"]) }
    public func AddPixmap(pixmap: QPixmap_ITF? = nil, mode: Int, state: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "AddPixmap", pixmap as Any, mode as Any, state as Any]) }
    public func AddPixmapDefault(pixmap: QPixmap_ITF? = nil, mode: Int, state: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "AddPixmapDefault", pixmap as Any, mode as Any, state as Any]) }
    public func ConnectAvailableSizes(f: @escaping (_ mode: Int, _ state: Int) -> [QSize]) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectAvailableSizes", "___REMOTE_CALLBACK___"], f: { (inp: [Any]) -> Any in f(Int(inp[0] as! Float), Int(inp[1] as! Float)) } as Any) }
    public func DisconnectAvailableSizes() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectAvailableSizes"]) }
    public func AvailableSizes(mode: Int, state: Int) -> [QSize] { callLocalFunction(l: ["", Pointer(), ___className, "AvailableSizes", mode as Any, state as Any]) as! [QSize] }
    public func AvailableSizesDefault(mode: Int, state: Int) -> [QSize] { callLocalFunction(l: ["", Pointer(), ___className, "AvailableSizesDefault", mode as Any, state as Any]) as! [QSize] }
    public func ConnectClone(f: @escaping () -> QIconEngine) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectClone", "___REMOTE_CALLBACK___"], f: { (_: [Any]) -> Any in f() } as Any) }
    public func DisconnectClone() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectClone"]) }
    public func Clone() -> QIconEngine { callLocalFunction(l: ["", Pointer(), ___className, "Clone"]) as! QIconEngine }
    public func ConnectIconName(f: @escaping () -> String) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectIconName", "___REMOTE_CALLBACK___"], f: { (_: [Any]) -> Any in f() } as Any) }
    public func DisconnectIconName() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectIconName"]) }
    public func IconName() -> String { callLocalFunction(l: ["", Pointer(), ___className, "IconName"]) as! String }
    public func IconNameDefault() -> String { callLocalFunction(l: ["", Pointer(), ___className, "IconNameDefault"]) as! String }
    public func IsNull() -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "IsNull"]) as! Bool }
    public func ConnectKey(f: @escaping () -> String) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectKey", "___REMOTE_CALLBACK___"], f: { (_: [Any]) -> Any in f() } as Any) }
    public func DisconnectKey() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectKey"]) }
    public func Key() -> String { callLocalFunction(l: ["", Pointer(), ___className, "Key"]) as! String }
    public func KeyDefault() -> String { callLocalFunction(l: ["", Pointer(), ___className, "KeyDefault"]) as! String }
    public func ConnectPaint(f: @escaping (_ painter: QPainter, _ rect: QRect, _ mode: Int, _ state: Int) -> Void) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectPaint", "___REMOTE_CALLBACK___"], f: { (inp: [Any]) -> Any in f(inp[0] as! QPainter, inp[1] as! QRect, Int(inp[2] as! Float), Int(inp[3] as! Float)) } as Any) }
    public func DisconnectPaint() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectPaint"]) }
    public func Paint(painter: QPainter_ITF? = nil, rect: QRect_ITF? = nil, mode: Int, state: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "Paint", painter as Any, rect as Any, mode as Any, state as Any]) }
    public func ConnectPixmap(f: @escaping (_ size: QSize, _ mode: Int, _ state: Int) -> QPixmap) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectPixmap", "___REMOTE_CALLBACK___"], f: { (inp: [Any]) -> Any in f(inp[0] as! QSize, Int(inp[1] as! Float), Int(inp[2] as! Float)) } as Any) }
    public func DisconnectPixmap() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectPixmap"]) }
    public func Pixmap(size: QSize_ITF? = nil, mode: Int, state: Int) -> QPixmap { callLocalFunction(l: ["", Pointer(), ___className, "Pixmap", size as Any, mode as Any, state as Any]) as! QPixmap }
    public func PixmapDefault(size: QSize_ITF? = nil, mode: Int, state: Int) -> QPixmap { callLocalFunction(l: ["", Pointer(), ___className, "PixmapDefault", size as Any, mode as Any, state as Any]) as! QPixmap }
    public func ConnectRead(f: @escaping (_ i: QDataStream) -> Bool) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectRead", "___REMOTE_CALLBACK___"], f: { (inp: [Any]) -> Any in f(inp[0] as! QDataStream) } as Any) }
    public func DisconnectRead() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectRead"]) }
    public func Read(i: QDataStream_ITF? = nil) -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "Read", i as Any]) as! Bool }
    public func ReadDefault(i: QDataStream_ITF? = nil) -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "ReadDefault", i as Any]) as! Bool }
    public func ScaledPixmap(size: QSize_ITF? = nil, mode: Int, state: Int, scale: Float) -> QPixmap { callLocalFunction(l: ["", Pointer(), ___className, "ScaledPixmap", size as Any, mode as Any, state as Any, scale as Any]) as! QPixmap }
    public func ConnectVirtual_hook(f: @escaping (_ id: Int, _ data: Int) -> Void) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectVirtual_hook", "___REMOTE_CALLBACK___"], f: { (inp: [Any]) -> Any in f(Int(inp[0] as! Float), Int(inp[1] as! Float)) } as Any) }
    public func DisconnectVirtual_hook() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectVirtual_hook"]) }
    public func Virtual_hook(id: Int, data: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "Virtual_hook", id as Any, data as Any]) }
    public func Virtual_hookDefault(id: Int, data: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "Virtual_hookDefault", id as Any, data as Any]) }
    public func ConnectWrite(f: @escaping (_ out: QDataStream) -> Bool) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectWrite", "___REMOTE_CALLBACK___"], f: { (inp: [Any]) -> Any in f(inp[0] as! QDataStream) } as Any) }
    public func DisconnectWrite() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectWrite"]) }
    public func Write(out: QDataStream_ITF? = nil) -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "Write", out as Any]) as! Bool }
    public func WriteDefault(out: QDataStream_ITF? = nil) -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "WriteDefault", out as Any]) as! Bool }
    public func ConnectDestroyQIconEngine(f: @escaping () -> Void) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectDestroyQIconEngine", "___REMOTE_CALLBACK___"], f: { (_: [Any]) -> Any in f() } as Any) }
    public func DisconnectDestroyQIconEngine() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectDestroyQIconEngine"]) }
    public func DestroyQIconEngine() { _ = callLocalFunction(l: ["", Pointer(), ___className, "DestroyQIconEngine"]) }
    public func DestroyQIconEngineDefault() { _ = callLocalFunction(l: ["", Pointer(), ___className, "DestroyQIconEngineDefault"]) }
}

public func NewQIconEngineFromPointer(ptr: String) -> QIconEngine { let r = QIconEngine(); r.initFrom(p: ptr, n: "gui.QIconEngine"); return r }
public func NewQIconEngine() -> QIconEngine { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.NewQIconEngine", ""]) as! QIconEngine }
public protocol QIconEnginePlugin_ITF: QObject_ITF {
    func QIconEnginePlugin_PTR() -> QIconEnginePlugin
}

public class QIconEnginePlugin: QObject, QIconEnginePlugin_ITF {
    public func QIconEnginePlugin_PTR() -> QIconEnginePlugin { callLocalFunction(l: ["", Pointer(), ___className, "QIconEnginePlugin_PTR"]) as! QIconEnginePlugin }
    public func ConnectCreate(f: @escaping (_ filename: String) -> QIconEngine) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectCreate", "___REMOTE_CALLBACK___"], f: { (inp: [Any]) -> Any in f(inp[0] as! String) } as Any) }
    public func DisconnectCreate() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectCreate"]) }
    public func Create(filename: String) -> QIconEngine { callLocalFunction(l: ["", Pointer(), ___className, "Create", filename as Any]) as! QIconEngine }
    public func ConnectDestroyQIconEnginePlugin(f: @escaping () -> Void) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectDestroyQIconEnginePlugin", "___REMOTE_CALLBACK___"], f: { (_: [Any]) -> Any in f() } as Any) }
    public func DisconnectDestroyQIconEnginePlugin() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectDestroyQIconEnginePlugin"]) }
    public func DestroyQIconEnginePlugin() { _ = callLocalFunction(l: ["", Pointer(), ___className, "DestroyQIconEnginePlugin"]) }
    public func DestroyQIconEnginePluginDefault() { _ = callLocalFunction(l: ["", Pointer(), ___className, "DestroyQIconEnginePluginDefault"]) }
    override public func ChildEventDefault(event: QChildEvent_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "ChildEventDefault", event as Any]) }
    override public func ConnectNotifyDefault(sign: QMetaMethod_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "ConnectNotifyDefault", sign as Any]) }
    override public func CustomEventDefault(event: QEvent_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "CustomEventDefault", event as Any]) }
    override public func DeleteLaterDefault() { _ = callLocalFunction(l: ["", Pointer(), ___className, "DeleteLaterDefault"]) }
    override public func DisconnectNotifyDefault(sign: QMetaMethod_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "DisconnectNotifyDefault", sign as Any]) }
    override public func EventDefault(e: QEvent_ITF? = nil) -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "EventDefault", e as Any]) as! Bool }
    override public func EventFilterDefault(watched: QObject_ITF? = nil, event: QEvent_ITF? = nil) -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "EventFilterDefault", watched as Any, event as Any]) as! Bool }
    override public func MetaObjectDefault() -> QMetaObject { callLocalFunction(l: ["", Pointer(), ___className, "MetaObjectDefault"]) as! QMetaObject }
    override public func TimerEventDefault(event: QTimerEvent_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "TimerEventDefault", event as Any]) }
}

public func NewQIconEnginePluginFromPointer(ptr: String) -> QIconEnginePlugin { let r = QIconEnginePlugin(); r.initFrom(p: ptr, n: "gui.QIconEnginePlugin"); return r }
public func NewQIconEnginePlugin(parent: QObject_ITF? = nil) -> QIconEnginePlugin { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.NewQIconEnginePlugin", "", parent as Any]) as! QIconEnginePlugin }
public protocol QImage_ITF: QPaintDevice_ITF {
    func QImage_PTR() -> QImage
}

public class QImage: QPaintDevice, QImage_ITF {
    public func QImage_PTR() -> QImage { callLocalFunction(l: ["", Pointer(), ___className, "QImage_PTR"]) as! QImage }
    public func AllGray() -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "AllGray"]) as! Bool }
    public func BitPlaneCount() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "BitPlaneCount"]) as! Float) }
    public func Bits() -> String { callLocalFunction(l: ["", Pointer(), ___className, "Bits"]) as! String }
    public func Bits2() -> String { callLocalFunction(l: ["", Pointer(), ___className, "Bits2"]) as! String }
    public func BytesPerLine() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "BytesPerLine"]) as! Float) }
    public func CacheKey() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "CacheKey"]) as! Float) }
    public func Color(i: Int) -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "Color", i as Any]) as! Float) }
    public func ColorTable() -> [Int] { callLocalFunction(l: ["", Pointer(), ___className, "ColorTable"]) as! [Int] }
    public func ConstBits() -> String { callLocalFunction(l: ["", Pointer(), ___className, "ConstBits"]) as! String }
    public func ConstScanLine(i: Int) -> String { callLocalFunction(l: ["", Pointer(), ___className, "ConstScanLine", i as Any]) as! String }
    public func ConvertTo(format: Int, flags: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "ConvertTo", format as Any, flags as Any]) }
    public func ConvertToFormat(format: Int, flags: Int) -> QImage { callLocalFunction(l: ["", Pointer(), ___className, "ConvertToFormat", format as Any, flags as Any]) as! QImage }
    public func ConvertToFormat2(format: Int, flags: Int) -> QImage { callLocalFunction(l: ["", Pointer(), ___className, "ConvertToFormat2", format as Any, flags as Any]) as! QImage }
    public func ConvertToFormat3(format: Int, colorTable: [Int], flags: Int) -> QImage { callLocalFunction(l: ["", Pointer(), ___className, "ConvertToFormat3", format as Any, colorTable as Any, flags as Any]) as! QImage }
    public func Copy(rectangle: QRect_ITF? = nil) -> QImage { callLocalFunction(l: ["", Pointer(), ___className, "Copy", rectangle as Any]) as! QImage }
    public func Copy2(x: Int, y: Int, width: Int, height: Int) -> QImage { callLocalFunction(l: ["", Pointer(), ___className, "Copy2", x as Any, y as Any, width as Any, height as Any]) as! QImage }
    public func CreateAlphaMask(flags: Int) -> QImage { callLocalFunction(l: ["", Pointer(), ___className, "CreateAlphaMask", flags as Any]) as! QImage }
    public func CreateHeuristicMask(clipTight: Bool) -> QImage { callLocalFunction(l: ["", Pointer(), ___className, "CreateHeuristicMask", clipTight as Any]) as! QImage }
    public func CreateMaskFromColor(color: Int, mode: Int) -> QImage { callLocalFunction(l: ["", Pointer(), ___className, "CreateMaskFromColor", color as Any, mode as Any]) as! QImage }
    public func DevicePixelRatio_QImage() -> Float { callLocalFunction(l: ["", Pointer(), ___className, "DevicePixelRatio"]) as! Float }
    public func DotsPerMeterX() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "DotsPerMeterX"]) as! Float) }
    public func DotsPerMeterY() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "DotsPerMeterY"]) as! Float) }
    public func Fill(pixelValue: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "Fill", pixelValue as Any]) }
    public func Fill2(color: QColor_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "Fill2", color as Any]) }
    public func Fill3(color: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "Fill3", color as Any]) }
    public func Format() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "Format"]) as! Float) }
    public func FromData(data: String, size: Int, format: String) -> QImage { callLocalFunction(l: ["", Pointer(), ___className, "FromData", data as Any, size as Any, format as Any]) as! QImage }
    public func FromData2(data: QByteArray_ITF? = nil, format: String) -> QImage { callLocalFunction(l: ["", Pointer(), ___className, "FromData2", data as Any, format as Any]) as! QImage }
    public func HasAlphaChannel() -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "HasAlphaChannel"]) as! Bool }
    public func InvertPixels(mode: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "InvertPixels", mode as Any]) }
    public func IsGrayscale() -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "IsGrayscale"]) as! Bool }
    public func IsNull() -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "IsNull"]) as! Bool }
    public func Load(fileName: String, format: String) -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "Load", fileName as Any, format as Any]) as! Bool }
    public func Load2(device: QIODevice_ITF? = nil, format: String) -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "Load2", device as Any, format as Any]) as! Bool }
    public func LoadFromData(data: String, l: Int, format: String) -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "LoadFromData", data as Any, l as Any, format as Any]) as! Bool }
    public func LoadFromData2(data: QByteArray_ITF? = nil, format: String) -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "LoadFromData2", data as Any, format as Any]) as! Bool }
    public func Mirrored(horizontal: Bool, vertical: Bool) -> QImage { callLocalFunction(l: ["", Pointer(), ___className, "Mirrored", horizontal as Any, vertical as Any]) as! QImage }
    public func Mirrored2(horizontal: Bool, vertical: Bool) -> QImage { callLocalFunction(l: ["", Pointer(), ___className, "Mirrored2", horizontal as Any, vertical as Any]) as! QImage }
    public func Offset() -> QPoint { callLocalFunction(l: ["", Pointer(), ___className, "Offset"]) as! QPoint }
    public func Pixel(position: QPoint_ITF? = nil) -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "Pixel", position as Any]) as! Float) }
    public func Pixel2(x: Int, y: Int) -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "Pixel2", x as Any, y as Any]) as! Float) }
    public func PixelColor(position: QPoint_ITF? = nil) -> QColor { callLocalFunction(l: ["", Pointer(), ___className, "PixelColor", position as Any]) as! QColor }
    public func PixelColor2(x: Int, y: Int) -> QColor { callLocalFunction(l: ["", Pointer(), ___className, "PixelColor2", x as Any, y as Any]) as! QColor }
    public func PixelFormat() -> QPixelFormat { callLocalFunction(l: ["", Pointer(), ___className, "PixelFormat"]) as! QPixelFormat }
    public func PixelIndex(position: QPoint_ITF? = nil) -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "PixelIndex", position as Any]) as! Float) }
    public func PixelIndex2(x: Int, y: Int) -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "PixelIndex2", x as Any, y as Any]) as! Float) }
    public func Rect() -> QRect { callLocalFunction(l: ["", Pointer(), ___className, "Rect"]) as! QRect }
    public func ReinterpretAsFormat(format: Int) -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "ReinterpretAsFormat", format as Any]) as! Bool }
    public func RgbSwapped() -> QImage { callLocalFunction(l: ["", Pointer(), ___className, "RgbSwapped"]) as! QImage }
    public func RgbSwapped2() -> QImage { callLocalFunction(l: ["", Pointer(), ___className, "RgbSwapped2"]) as! QImage }
    public func Save(fileName: String, format: String, quality: Int) -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "Save", fileName as Any, format as Any, quality as Any]) as! Bool }
    public func Save2(device: QIODevice_ITF? = nil, format: String, quality: Int) -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "Save2", device as Any, format as Any, quality as Any]) as! Bool }
    public func Scaled(size: QSize_ITF? = nil, aspectRatioMode: Int, transformMode: Int) -> QImage { callLocalFunction(l: ["", Pointer(), ___className, "Scaled", size as Any, aspectRatioMode as Any, transformMode as Any]) as! QImage }
    public func Scaled2(width: Int, height: Int, aspectRatioMode: Int, transformMode: Int) -> QImage { callLocalFunction(l: ["", Pointer(), ___className, "Scaled2", width as Any, height as Any, aspectRatioMode as Any, transformMode as Any]) as! QImage }
    public func ScaledToHeight(height: Int, mode: Int) -> QImage { callLocalFunction(l: ["", Pointer(), ___className, "ScaledToHeight", height as Any, mode as Any]) as! QImage }
    public func ScaledToWidth(width: Int, mode: Int) -> QImage { callLocalFunction(l: ["", Pointer(), ___className, "ScaledToWidth", width as Any, mode as Any]) as! QImage }
    public func ScanLine(i: Int) -> String { callLocalFunction(l: ["", Pointer(), ___className, "ScanLine", i as Any]) as! String }
    public func ScanLine2(i: Int) -> String { callLocalFunction(l: ["", Pointer(), ___className, "ScanLine2", i as Any]) as! String }
    public func SetColor(index: Int, colorValue: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetColor", index as Any, colorValue as Any]) }
    public func SetColorCount(colorCount: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetColorCount", colorCount as Any]) }
    public func SetColorTable(colors: [Int]) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetColorTable", colors as Any]) }
    public func SetDevicePixelRatio(scaleFactor: Float) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetDevicePixelRatio", scaleFactor as Any]) }
    public func SetDotsPerMeterX(x: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetDotsPerMeterX", x as Any]) }
    public func SetDotsPerMeterY(y: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetDotsPerMeterY", y as Any]) }
    public func SetOffset(offset: QPoint_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetOffset", offset as Any]) }
    public func SetPixel(position: QPoint_ITF? = nil, index_or_rgb: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetPixel", position as Any, index_or_rgb as Any]) }
    public func SetPixel2(x: Int, y: Int, index_or_rgb: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetPixel2", x as Any, y as Any, index_or_rgb as Any]) }
    public func SetPixelColor(position: QPoint_ITF? = nil, color: QColor_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetPixelColor", position as Any, color as Any]) }
    public func SetPixelColor2(x: Int, y: Int, color: QColor_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetPixelColor2", x as Any, y as Any, color as Any]) }
    public func SetText(key: String, text: String) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetText", key as Any, text as Any]) }
    public func Size() -> QSize { callLocalFunction(l: ["", Pointer(), ___className, "Size"]) as! QSize }
    public func SmoothScaled(w: Int, h: Int) -> QImage { callLocalFunction(l: ["", Pointer(), ___className, "SmoothScaled", w as Any, h as Any]) as! QImage }
    public func Swap(other: QImage_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "Swap", other as Any]) }
    public func Text(key: String) -> String { callLocalFunction(l: ["", Pointer(), ___className, "Text", key as Any]) as! String }
    public func TextKeys() -> [String] { callLocalFunction(l: ["", Pointer(), ___className, "TextKeys"]) as! [String] }
    public func ToImageFormat(format: QPixelFormat_ITF? = nil) -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "ToImageFormat", format as Any]) as! Float) }
    public func ToPixelFormat(format: Int) -> QPixelFormat { callLocalFunction(l: ["", Pointer(), ___className, "ToPixelFormat", format as Any]) as! QPixelFormat }
    public func Transformed(matrix: QMatrix_ITF? = nil, mode: Int) -> QImage { callLocalFunction(l: ["", Pointer(), ___className, "Transformed", matrix as Any, mode as Any]) as! QImage }
    public func Transformed2(matrix: QTransform_ITF? = nil, mode: Int) -> QImage { callLocalFunction(l: ["", Pointer(), ___className, "Transformed2", matrix as Any, mode as Any]) as! QImage }
    public func TrueMatrix(matrix: QMatrix_ITF? = nil, width: Int, height: Int) -> QMatrix { callLocalFunction(l: ["", Pointer(), ___className, "TrueMatrix", matrix as Any, width as Any, height as Any]) as! QMatrix }
    public func TrueMatrix2(matrix: QTransform_ITF? = nil, width: Int, height: Int) -> QTransform { callLocalFunction(l: ["", Pointer(), ___className, "TrueMatrix2", matrix as Any, width as Any, height as Any]) as! QTransform }
    public func Valid(pos: QPoint_ITF? = nil) -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "Valid", pos as Any]) as! Bool }
    public func Valid2(x: Int, y: Int) -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "Valid2", x as Any, y as Any]) as! Bool }
    public func ConnectDestroyQImage(f: @escaping () -> Void) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectDestroyQImage", "___REMOTE_CALLBACK___"], f: { (_: [Any]) -> Any in f() } as Any) }
    public func DisconnectDestroyQImage() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectDestroyQImage"]) }
    public func DestroyQImage() { _ = callLocalFunction(l: ["", Pointer(), ___className, "DestroyQImage"]) }
    public func DestroyQImageDefault() { _ = callLocalFunction(l: ["", Pointer(), ___className, "DestroyQImageDefault"]) }
    public func ToVariant() -> QVariant { callLocalFunction(l: ["", Pointer(), ___className, "ToVariant"]) as! QVariant }
    override public func PaintEngine() -> QPaintEngine { callLocalFunction(l: ["", Pointer(), ___className, "PaintEngine"]) as! QPaintEngine }
    public func PaintEngineDefault() -> QPaintEngine { callLocalFunction(l: ["", Pointer(), ___className, "PaintEngineDefault"]) as! QPaintEngine }
}

public func NewQImageFromPointer(ptr: String) -> QImage { let r = QImage(); r.initFrom(p: ptr, n: "gui.QImage"); return r }
public func NewQImage() -> QImage { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.NewQImage", ""]) as! QImage }
public func NewQImage2(size: QSize_ITF? = nil, format: Int) -> QImage { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.NewQImage2", "", size as Any, format as Any]) as! QImage }
public func NewQImage3(width: Int, height: Int, format: Int) -> QImage { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.NewQImage3", "", width as Any, height as Any, format as Any]) as! QImage }
public func NewQImage4(data: String, width: Int, height: Int, format: Int) -> QImage { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.NewQImage4", "", data as Any, width as Any, height as Any, format as Any]) as! QImage }
public func NewQImage5(data: String, width: Int, height: Int, format: Int) -> QImage { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.NewQImage5", "", data as Any, width as Any, height as Any, format as Any]) as! QImage }
public func NewQImage6(data: String, width: Int, height: Int, bytesPerLine: Int, format: Int) -> QImage { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.NewQImage6", "", data as Any, width as Any, height as Any, bytesPerLine as Any, format as Any]) as! QImage }
public func NewQImage7(data: String, width: Int, height: Int, bytesPerLine: Int, format: Int) -> QImage { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.NewQImage7", "", data as Any, width as Any, height as Any, bytesPerLine as Any, format as Any]) as! QImage }
public func NewQImage9(fileName: String, format: String) -> QImage { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.NewQImage9", "", fileName as Any, format as Any]) as! QImage }
public func NewQImage10(image: QImage_ITF? = nil) -> QImage { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.NewQImage10", "", image as Any]) as! QImage }
public func NewQImage11(other: QImage_ITF? = nil) -> QImage { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.NewQImage11", "", other as Any]) as! QImage }
public func QImage_FromData(data: String, size: Int, format: String) -> QImage { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.QImage_FromData", "", data as Any, size as Any, format as Any]) as! QImage }
public func QImage_FromData2(data: QByteArray_ITF? = nil, format: String) -> QImage { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.QImage_FromData2", "", data as Any, format as Any]) as! QImage }
public func QImage_ToImageFormat(format: QPixelFormat_ITF? = nil) -> Int { Gui.initModule(); return Int(callLocalFunction(l: ["", "", "gui.QImage_ToImageFormat", "", format as Any]) as! Float) }
public func QImage_ToPixelFormat(format: Int) -> QPixelFormat { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.QImage_ToPixelFormat", "", format as Any]) as! QPixelFormat }
public func QImage_TrueMatrix(matrix: QMatrix_ITF? = nil, width: Int, height: Int) -> QMatrix { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.QImage_TrueMatrix", "", matrix as Any, width as Any, height as Any]) as! QMatrix }
public func QImage_TrueMatrix2(matrix: QTransform_ITF? = nil, width: Int, height: Int) -> QTransform { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.QImage_TrueMatrix2", "", matrix as Any, width as Any, height as Any]) as! QTransform }
public protocol QImageIOHandler_ITF {
    func QImageIOHandler_PTR() -> QImageIOHandler
}

public class QImageIOHandler: Internal, QImageIOHandler_ITF {
    public func QImageIOHandler_PTR() -> QImageIOHandler { callLocalFunction(l: ["", Pointer(), ___className, "QImageIOHandler_PTR"]) as! QImageIOHandler }
    public func ConnectCanRead(f: @escaping () -> Bool) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectCanRead", "___REMOTE_CALLBACK___"], f: { (_: [Any]) -> Any in f() } as Any) }
    public func DisconnectCanRead() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectCanRead"]) }
    public func CanRead() -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "CanRead"]) as! Bool }
    public func ConnectCurrentImageNumber(f: @escaping () -> Int) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectCurrentImageNumber", "___REMOTE_CALLBACK___"], f: { (_: [Any]) -> Any in f() } as Any) }
    public func DisconnectCurrentImageNumber() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectCurrentImageNumber"]) }
    public func CurrentImageNumber() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "CurrentImageNumber"]) as! Float) }
    public func CurrentImageNumberDefault() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "CurrentImageNumberDefault"]) as! Float) }
    public func ConnectCurrentImageRect(f: @escaping () -> QRect) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectCurrentImageRect", "___REMOTE_CALLBACK___"], f: { (_: [Any]) -> Any in f() } as Any) }
    public func DisconnectCurrentImageRect() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectCurrentImageRect"]) }
    public func CurrentImageRect() -> QRect { callLocalFunction(l: ["", Pointer(), ___className, "CurrentImageRect"]) as! QRect }
    public func CurrentImageRectDefault() -> QRect { callLocalFunction(l: ["", Pointer(), ___className, "CurrentImageRectDefault"]) as! QRect }
    public func Device() -> QIODevice { callLocalFunction(l: ["", Pointer(), ___className, "Device"]) as! QIODevice }
    public func Format() -> QByteArray { callLocalFunction(l: ["", Pointer(), ___className, "Format"]) as! QByteArray }
    public func ConnectImageCount(f: @escaping () -> Int) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectImageCount", "___REMOTE_CALLBACK___"], f: { (_: [Any]) -> Any in f() } as Any) }
    public func DisconnectImageCount() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectImageCount"]) }
    public func ImageCount() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "ImageCount"]) as! Float) }
    public func ImageCountDefault() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "ImageCountDefault"]) as! Float) }
    public func ConnectJumpToImage(f: @escaping (_ imageNumber: Int) -> Bool) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectJumpToImage", "___REMOTE_CALLBACK___"], f: { (inp: [Any]) -> Any in f(Int(inp[0] as! Float)) } as Any) }
    public func DisconnectJumpToImage() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectJumpToImage"]) }
    public func JumpToImage(imageNumber: Int) -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "JumpToImage", imageNumber as Any]) as! Bool }
    public func JumpToImageDefault(imageNumber: Int) -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "JumpToImageDefault", imageNumber as Any]) as! Bool }
    public func ConnectJumpToNextImage(f: @escaping () -> Bool) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectJumpToNextImage", "___REMOTE_CALLBACK___"], f: { (_: [Any]) -> Any in f() } as Any) }
    public func DisconnectJumpToNextImage() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectJumpToNextImage"]) }
    public func JumpToNextImage() -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "JumpToNextImage"]) as! Bool }
    public func JumpToNextImageDefault() -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "JumpToNextImageDefault"]) as! Bool }
    public func ConnectLoopCount(f: @escaping () -> Int) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectLoopCount", "___REMOTE_CALLBACK___"], f: { (_: [Any]) -> Any in f() } as Any) }
    public func DisconnectLoopCount() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectLoopCount"]) }
    public func LoopCount() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "LoopCount"]) as! Float) }
    public func LoopCountDefault() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "LoopCountDefault"]) as! Float) }
    public func ConnectNextImageDelay(f: @escaping () -> Int) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectNextImageDelay", "___REMOTE_CALLBACK___"], f: { (_: [Any]) -> Any in f() } as Any) }
    public func DisconnectNextImageDelay() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectNextImageDelay"]) }
    public func NextImageDelay() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "NextImageDelay"]) as! Float) }
    public func NextImageDelayDefault() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "NextImageDelayDefault"]) as! Float) }
    public func ConnectOption(f: @escaping (_ option: Int) -> QVariant) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectOption", "___REMOTE_CALLBACK___"], f: { (inp: [Any]) -> Any in f(Int(inp[0] as! Float)) } as Any) }
    public func DisconnectOption() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectOption"]) }
    public func Option(option: Int) -> QVariant { callLocalFunction(l: ["", Pointer(), ___className, "Option", option as Any]) as! QVariant }
    public func OptionDefault(option: Int) -> QVariant { callLocalFunction(l: ["", Pointer(), ___className, "OptionDefault", option as Any]) as! QVariant }
    public func ConnectRead(f: @escaping (_ image: QImage) -> Bool) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectRead", "___REMOTE_CALLBACK___"], f: { (inp: [Any]) -> Any in f(inp[0] as! QImage) } as Any) }
    public func DisconnectRead() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectRead"]) }
    public func Read(image: QImage_ITF? = nil) -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "Read", image as Any]) as! Bool }
    public func SetDevice(device: QIODevice_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetDevice", device as Any]) }
    public func SetFormat(format: QByteArray_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetFormat", format as Any]) }
    public func SetFormat2(format: QByteArray_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetFormat2", format as Any]) }
    public func ConnectSetOption(f: @escaping (_ option: Int, _ value: QVariant) -> Void) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectSetOption", "___REMOTE_CALLBACK___"], f: { (inp: [Any]) -> Any in f(Int(inp[0] as! Float), inp[1] as! QVariant) } as Any) }
    public func DisconnectSetOption() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectSetOption"]) }
    public func SetOption(option: Int, value: QVariant_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetOption", option as Any, value as Any]) }
    public func SetOptionDefault(option: Int, value: QVariant_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetOptionDefault", option as Any, value as Any]) }
    public func ConnectSupportsOption(f: @escaping (_ option: Int) -> Bool) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectSupportsOption", "___REMOTE_CALLBACK___"], f: { (inp: [Any]) -> Any in f(Int(inp[0] as! Float)) } as Any) }
    public func DisconnectSupportsOption() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectSupportsOption"]) }
    public func SupportsOption(option: Int) -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "SupportsOption", option as Any]) as! Bool }
    public func SupportsOptionDefault(option: Int) -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "SupportsOptionDefault", option as Any]) as! Bool }
    public func ConnectWrite(f: @escaping (_ image: QImage) -> Bool) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectWrite", "___REMOTE_CALLBACK___"], f: { (inp: [Any]) -> Any in f(inp[0] as! QImage) } as Any) }
    public func DisconnectWrite() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectWrite"]) }
    public func Write(image: QImage_ITF? = nil) -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "Write", image as Any]) as! Bool }
    public func WriteDefault(image: QImage_ITF? = nil) -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "WriteDefault", image as Any]) as! Bool }
    public func ConnectDestroyQImageIOHandler(f: @escaping () -> Void) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectDestroyQImageIOHandler", "___REMOTE_CALLBACK___"], f: { (_: [Any]) -> Any in f() } as Any) }
    public func DisconnectDestroyQImageIOHandler() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectDestroyQImageIOHandler"]) }
    public func DestroyQImageIOHandler() { _ = callLocalFunction(l: ["", Pointer(), ___className, "DestroyQImageIOHandler"]) }
    public func DestroyQImageIOHandlerDefault() { _ = callLocalFunction(l: ["", Pointer(), ___className, "DestroyQImageIOHandlerDefault"]) }
}

public func NewQImageIOHandlerFromPointer(ptr: String) -> QImageIOHandler { let r = QImageIOHandler(); r.initFrom(p: ptr, n: "gui.QImageIOHandler"); return r }
public func NewQImageIOHandler() -> QImageIOHandler { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.NewQImageIOHandler", ""]) as! QImageIOHandler }
public protocol QImageIOPlugin_ITF: QObject_ITF {
    func QImageIOPlugin_PTR() -> QImageIOPlugin
}

public class QImageIOPlugin: QObject, QImageIOPlugin_ITF {
    public func QImageIOPlugin_PTR() -> QImageIOPlugin { callLocalFunction(l: ["", Pointer(), ___className, "QImageIOPlugin_PTR"]) as! QImageIOPlugin }
    public func ConnectCapabilities(f: @escaping (_ device: QIODevice, _ format: QByteArray) -> Int) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectCapabilities", "___REMOTE_CALLBACK___"], f: { (inp: [Any]) -> Any in f(inp[0] as! QIODevice, inp[1] as! QByteArray) } as Any) }
    public func DisconnectCapabilities() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectCapabilities"]) }
    public func Capabilities(device: QIODevice_ITF? = nil, format: QByteArray_ITF? = nil) -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "Capabilities", device as Any, format as Any]) as! Float) }
    public func ConnectCreate(f: @escaping (_ device: QIODevice, _ format: QByteArray) -> QImageIOHandler) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectCreate", "___REMOTE_CALLBACK___"], f: { (inp: [Any]) -> Any in f(inp[0] as! QIODevice, inp[1] as! QByteArray) } as Any) }
    public func DisconnectCreate() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectCreate"]) }
    public func Create(device: QIODevice_ITF? = nil, format: QByteArray_ITF? = nil) -> QImageIOHandler { callLocalFunction(l: ["", Pointer(), ___className, "Create", device as Any, format as Any]) as! QImageIOHandler }
    public func ConnectDestroyQImageIOPlugin(f: @escaping () -> Void) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectDestroyQImageIOPlugin", "___REMOTE_CALLBACK___"], f: { (_: [Any]) -> Any in f() } as Any) }
    public func DisconnectDestroyQImageIOPlugin() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectDestroyQImageIOPlugin"]) }
    public func DestroyQImageIOPlugin() { _ = callLocalFunction(l: ["", Pointer(), ___className, "DestroyQImageIOPlugin"]) }
    public func DestroyQImageIOPluginDefault() { _ = callLocalFunction(l: ["", Pointer(), ___className, "DestroyQImageIOPluginDefault"]) }
    override public func ChildEventDefault(event: QChildEvent_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "ChildEventDefault", event as Any]) }
    override public func ConnectNotifyDefault(sign: QMetaMethod_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "ConnectNotifyDefault", sign as Any]) }
    override public func CustomEventDefault(event: QEvent_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "CustomEventDefault", event as Any]) }
    override public func DeleteLaterDefault() { _ = callLocalFunction(l: ["", Pointer(), ___className, "DeleteLaterDefault"]) }
    override public func DisconnectNotifyDefault(sign: QMetaMethod_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "DisconnectNotifyDefault", sign as Any]) }
    override public func EventDefault(e: QEvent_ITF? = nil) -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "EventDefault", e as Any]) as! Bool }
    override public func EventFilterDefault(watched: QObject_ITF? = nil, event: QEvent_ITF? = nil) -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "EventFilterDefault", watched as Any, event as Any]) as! Bool }
    override public func MetaObjectDefault() -> QMetaObject { callLocalFunction(l: ["", Pointer(), ___className, "MetaObjectDefault"]) as! QMetaObject }
    override public func TimerEventDefault(event: QTimerEvent_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "TimerEventDefault", event as Any]) }
}

public func NewQImageIOPluginFromPointer(ptr: String) -> QImageIOPlugin { let r = QImageIOPlugin(); r.initFrom(p: ptr, n: "gui.QImageIOPlugin"); return r }
public func NewQImageIOPlugin(parent: QObject_ITF? = nil) -> QImageIOPlugin { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.NewQImageIOPlugin", "", parent as Any]) as! QImageIOPlugin }
public protocol QImageReader_ITF {
    func QImageReader_PTR() -> QImageReader
}

public class QImageReader: Internal, QImageReader_ITF {
    public func QImageReader_PTR() -> QImageReader { callLocalFunction(l: ["", Pointer(), ___className, "QImageReader_PTR"]) as! QImageReader }
    public func AutoDetectImageFormat() -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "AutoDetectImageFormat"]) as! Bool }
    public func AutoTransform() -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "AutoTransform"]) as! Bool }
    public func BackgroundColor() -> QColor { callLocalFunction(l: ["", Pointer(), ___className, "BackgroundColor"]) as! QColor }
    public func CanRead() -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "CanRead"]) as! Bool }
    public func ClipRect() -> QRect { callLocalFunction(l: ["", Pointer(), ___className, "ClipRect"]) as! QRect }
    public func CurrentImageNumber() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "CurrentImageNumber"]) as! Float) }
    public func CurrentImageRect() -> QRect { callLocalFunction(l: ["", Pointer(), ___className, "CurrentImageRect"]) as! QRect }
    public func DecideFormatFromContent() -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "DecideFormatFromContent"]) as! Bool }
    public func Device() -> QIODevice { callLocalFunction(l: ["", Pointer(), ___className, "Device"]) as! QIODevice }
    public func Error() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "Error"]) as! Float) }
    public func ErrorString() -> String { callLocalFunction(l: ["", Pointer(), ___className, "ErrorString"]) as! String }
    public func FileName() -> String { callLocalFunction(l: ["", Pointer(), ___className, "FileName"]) as! String }
    public func Format() -> QByteArray { callLocalFunction(l: ["", Pointer(), ___className, "Format"]) as! QByteArray }
    public func Gamma() -> Float { callLocalFunction(l: ["", Pointer(), ___className, "Gamma"]) as! Float }
    public func ImageCount() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "ImageCount"]) as! Float) }
    public func ImageFormat() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "ImageFormat"]) as! Float) }
    public func ImageFormat2(fileName: String) -> QByteArray { callLocalFunction(l: ["", Pointer(), ___className, "ImageFormat2", fileName as Any]) as! QByteArray }
    public func ImageFormat3(device: QIODevice_ITF? = nil) -> QByteArray { callLocalFunction(l: ["", Pointer(), ___className, "ImageFormat3", device as Any]) as! QByteArray }
    public func ImageFormatsForMimeType(mimeType: QByteArray_ITF? = nil) -> [QByteArray] { callLocalFunction(l: ["", Pointer(), ___className, "ImageFormatsForMimeType", mimeType as Any]) as! [QByteArray] }
    public func JumpToImage(imageNumber: Int) -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "JumpToImage", imageNumber as Any]) as! Bool }
    public func JumpToNextImage() -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "JumpToNextImage"]) as! Bool }
    public func LoopCount() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "LoopCount"]) as! Float) }
    public func NextImageDelay() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "NextImageDelay"]) as! Float) }
    public func Quality() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "Quality"]) as! Float) }
    public func Read() -> QImage { callLocalFunction(l: ["", Pointer(), ___className, "Read"]) as! QImage }
    public func Read2(image: QImage_ITF? = nil) -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "Read2", image as Any]) as! Bool }
    public func ScaledClipRect() -> QRect { callLocalFunction(l: ["", Pointer(), ___className, "ScaledClipRect"]) as! QRect }
    public func ScaledSize() -> QSize { callLocalFunction(l: ["", Pointer(), ___className, "ScaledSize"]) as! QSize }
    public func SetAutoDetectImageFormat(enabled: Bool) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetAutoDetectImageFormat", enabled as Any]) }
    public func SetAutoTransform(enabled: Bool) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetAutoTransform", enabled as Any]) }
    public func SetBackgroundColor(color: QColor_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetBackgroundColor", color as Any]) }
    public func SetClipRect(rect: QRect_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetClipRect", rect as Any]) }
    public func SetDecideFormatFromContent(ignored: Bool) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetDecideFormatFromContent", ignored as Any]) }
    public func SetDevice(device: QIODevice_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetDevice", device as Any]) }
    public func SetFileName(fileName: String) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetFileName", fileName as Any]) }
    public func SetFormat(format: QByteArray_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetFormat", format as Any]) }
    public func SetGamma(gamma: Float) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetGamma", gamma as Any]) }
    public func SetQuality(quality: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetQuality", quality as Any]) }
    public func SetScaledClipRect(rect: QRect_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetScaledClipRect", rect as Any]) }
    public func SetScaledSize(size: QSize_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetScaledSize", size as Any]) }
    public func Size() -> QSize { callLocalFunction(l: ["", Pointer(), ___className, "Size"]) as! QSize }
    public func SubType() -> QByteArray { callLocalFunction(l: ["", Pointer(), ___className, "SubType"]) as! QByteArray }
    public func SupportedImageFormats() -> [QByteArray] { callLocalFunction(l: ["", Pointer(), ___className, "SupportedImageFormats"]) as! [QByteArray] }
    public func SupportedMimeTypes() -> [QByteArray] { callLocalFunction(l: ["", Pointer(), ___className, "SupportedMimeTypes"]) as! [QByteArray] }
    public func SupportedSubTypes() -> [QByteArray] { callLocalFunction(l: ["", Pointer(), ___className, "SupportedSubTypes"]) as! [QByteArray] }
    public func SupportsAnimation() -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "SupportsAnimation"]) as! Bool }
    public func SupportsOption(option: Int) -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "SupportsOption", option as Any]) as! Bool }
    public func Text(key: String) -> String { callLocalFunction(l: ["", Pointer(), ___className, "Text", key as Any]) as! String }
    public func TextKeys() -> [String] { callLocalFunction(l: ["", Pointer(), ___className, "TextKeys"]) as! [String] }
    public func Transformation() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "Transformation"]) as! Float) }
    public func DestroyQImageReader() { _ = callLocalFunction(l: ["", Pointer(), ___className, "DestroyQImageReader"]) }
}

public func NewQImageReaderFromPointer(ptr: String) -> QImageReader { let r = QImageReader(); r.initFrom(p: ptr, n: "gui.QImageReader"); return r }
public func NewQImageReader() -> QImageReader { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.NewQImageReader", ""]) as! QImageReader }
public func NewQImageReader2(device: QIODevice_ITF? = nil, format: QByteArray_ITF? = nil) -> QImageReader { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.NewQImageReader2", "", device as Any, format as Any]) as! QImageReader }
public func NewQImageReader3(fileName: String, format: QByteArray_ITF? = nil) -> QImageReader { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.NewQImageReader3", "", fileName as Any, format as Any]) as! QImageReader }
public func QImageReader_ImageFormat2(fileName: String) -> QByteArray { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.QImageReader_ImageFormat2", "", fileName as Any]) as! QByteArray }
public func QImageReader_ImageFormat3(device: QIODevice_ITF? = nil) -> QByteArray { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.QImageReader_ImageFormat3", "", device as Any]) as! QByteArray }
public func QImageReader_ImageFormatsForMimeType(mimeType: QByteArray_ITF? = nil) -> [QByteArray] { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.QImageReader_ImageFormatsForMimeType", "", mimeType as Any]) as! [QByteArray] }
public func QImageReader_SupportedImageFormats() -> [QByteArray] { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.QImageReader_SupportedImageFormats", ""]) as! [QByteArray] }
public func QImageReader_SupportedMimeTypes() -> [QByteArray] { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.QImageReader_SupportedMimeTypes", ""]) as! [QByteArray] }
public protocol QImageTextKeyLang_ITF {
    func QImageTextKeyLang_PTR() -> QImageTextKeyLang
}

public class QImageTextKeyLang: Internal, QImageTextKeyLang_ITF {
    public func QImageTextKeyLang_PTR() -> QImageTextKeyLang { callLocalFunction(l: ["", Pointer(), ___className, "QImageTextKeyLang_PTR"]) as! QImageTextKeyLang }
    public func DestroyQImageTextKeyLang() { _ = callLocalFunction(l: ["", Pointer(), ___className, "DestroyQImageTextKeyLang"]) }
}

public func NewQImageTextKeyLangFromPointer(ptr: String) -> QImageTextKeyLang { let r = QImageTextKeyLang(); r.initFrom(p: ptr, n: "gui.QImageTextKeyLang"); return r }
public protocol QImageWriter_ITF {
    func QImageWriter_PTR() -> QImageWriter
}

public class QImageWriter: Internal, QImageWriter_ITF {
    public func QImageWriter_PTR() -> QImageWriter { callLocalFunction(l: ["", Pointer(), ___className, "QImageWriter_PTR"]) as! QImageWriter }
    public func CanWrite() -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "CanWrite"]) as! Bool }
    public func Compression() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "Compression"]) as! Float) }
    public func Device() -> QIODevice { callLocalFunction(l: ["", Pointer(), ___className, "Device"]) as! QIODevice }
    public func Error() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "Error"]) as! Float) }
    public func ErrorString() -> String { callLocalFunction(l: ["", Pointer(), ___className, "ErrorString"]) as! String }
    public func FileName() -> String { callLocalFunction(l: ["", Pointer(), ___className, "FileName"]) as! String }
    public func Format() -> QByteArray { callLocalFunction(l: ["", Pointer(), ___className, "Format"]) as! QByteArray }
    public func Gamma() -> Float { callLocalFunction(l: ["", Pointer(), ___className, "Gamma"]) as! Float }
    public func ImageFormatsForMimeType(mimeType: QByteArray_ITF? = nil) -> [QByteArray] { callLocalFunction(l: ["", Pointer(), ___className, "ImageFormatsForMimeType", mimeType as Any]) as! [QByteArray] }
    public func OptimizedWrite() -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "OptimizedWrite"]) as! Bool }
    public func ProgressiveScanWrite() -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "ProgressiveScanWrite"]) as! Bool }
    public func Quality() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "Quality"]) as! Float) }
    public func SetCompression(compression: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetCompression", compression as Any]) }
    public func SetDevice(device: QIODevice_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetDevice", device as Any]) }
    public func SetFileName(fileName: String) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetFileName", fileName as Any]) }
    public func SetFormat(format: QByteArray_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetFormat", format as Any]) }
    public func SetGamma(gamma: Float) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetGamma", gamma as Any]) }
    public func SetOptimizedWrite(optimize: Bool) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetOptimizedWrite", optimize as Any]) }
    public func SetProgressiveScanWrite(progressive: Bool) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetProgressiveScanWrite", progressive as Any]) }
    public func SetQuality(quality: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetQuality", quality as Any]) }
    public func SetSubType(ty: QByteArray_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetSubType", ty as Any]) }
    public func SetText(key: String, text: String) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetText", key as Any, text as Any]) }
    public func SetTransformation(transform: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetTransformation", transform as Any]) }
    public func SubType() -> QByteArray { callLocalFunction(l: ["", Pointer(), ___className, "SubType"]) as! QByteArray }
    public func SupportedImageFormats() -> [QByteArray] { callLocalFunction(l: ["", Pointer(), ___className, "SupportedImageFormats"]) as! [QByteArray] }
    public func SupportedMimeTypes() -> [QByteArray] { callLocalFunction(l: ["", Pointer(), ___className, "SupportedMimeTypes"]) as! [QByteArray] }
    public func SupportedSubTypes() -> [QByteArray] { callLocalFunction(l: ["", Pointer(), ___className, "SupportedSubTypes"]) as! [QByteArray] }
    public func SupportsOption(option: Int) -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "SupportsOption", option as Any]) as! Bool }
    public func Transformation() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "Transformation"]) as! Float) }
    public func Write(image: QImage_ITF? = nil) -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "Write", image as Any]) as! Bool }
    public func DestroyQImageWriter() { _ = callLocalFunction(l: ["", Pointer(), ___className, "DestroyQImageWriter"]) }
}

public func NewQImageWriterFromPointer(ptr: String) -> QImageWriter { let r = QImageWriter(); r.initFrom(p: ptr, n: "gui.QImageWriter"); return r }
public func NewQImageWriter() -> QImageWriter { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.NewQImageWriter", ""]) as! QImageWriter }
public func NewQImageWriter2(device: QIODevice_ITF? = nil, format: QByteArray_ITF? = nil) -> QImageWriter { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.NewQImageWriter2", "", device as Any, format as Any]) as! QImageWriter }
public func NewQImageWriter3(fileName: String, format: QByteArray_ITF? = nil) -> QImageWriter { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.NewQImageWriter3", "", fileName as Any, format as Any]) as! QImageWriter }
public func QImageWriter_ImageFormatsForMimeType(mimeType: QByteArray_ITF? = nil) -> [QByteArray] { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.QImageWriter_ImageFormatsForMimeType", "", mimeType as Any]) as! [QByteArray] }
public func QImageWriter_SupportedImageFormats() -> [QByteArray] { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.QImageWriter_SupportedImageFormats", ""]) as! [QByteArray] }
public func QImageWriter_SupportedMimeTypes() -> [QByteArray] { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.QImageWriter_SupportedMimeTypes", ""]) as! [QByteArray] }
public protocol QInputEvent_ITF: QEvent_ITF {
    func QInputEvent_PTR() -> QInputEvent
}

public class QInputEvent: QEvent, QInputEvent_ITF {
    public func QInputEvent_PTR() -> QInputEvent { callLocalFunction(l: ["", Pointer(), ___className, "QInputEvent_PTR"]) as! QInputEvent }
    public func DestroyQInputEvent() { _ = callLocalFunction(l: ["", Pointer(), ___className, "DestroyQInputEvent"]) }
    public func Modifiers() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "Modifiers"]) as! Float) }
    public func Timestamp() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "Timestamp"]) as! Float) }
}

public func NewQInputEventFromPointer(ptr: String) -> QInputEvent { let r = QInputEvent(); r.initFrom(p: ptr, n: "gui.QInputEvent"); return r }
public protocol QInputMethod_ITF: QObject_ITF {
    func QInputMethod_PTR() -> QInputMethod
}

public class QInputMethod: QObject, QInputMethod_ITF {
    public func QInputMethod_PTR() -> QInputMethod { callLocalFunction(l: ["", Pointer(), ___className, "QInputMethod_PTR"]) as! QInputMethod }
    public func AnchorRectangle() -> QRectF { callLocalFunction(l: ["", Pointer(), ___className, "AnchorRectangle"]) as! QRectF }
    public func ConnectAnchorRectangleChanged(f: @escaping () -> Void) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectAnchorRectangleChanged", "___REMOTE_CALLBACK___"], f: { (_: [Any]) -> Any in f() } as Any) }
    public func DisconnectAnchorRectangleChanged() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectAnchorRectangleChanged"]) }
    public func AnchorRectangleChanged() { _ = callLocalFunction(l: ["", Pointer(), ___className, "AnchorRectangleChanged"]) }
    public func ConnectAnimatingChanged(f: @escaping () -> Void) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectAnimatingChanged", "___REMOTE_CALLBACK___"], f: { (_: [Any]) -> Any in f() } as Any) }
    public func DisconnectAnimatingChanged() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectAnimatingChanged"]) }
    public func AnimatingChanged() { _ = callLocalFunction(l: ["", Pointer(), ___className, "AnimatingChanged"]) }
    public func ConnectCommit(f: @escaping () -> Void) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectCommit", "___REMOTE_CALLBACK___"], f: { (_: [Any]) -> Any in f() } as Any) }
    public func DisconnectCommit() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectCommit"]) }
    public func Commit() { _ = callLocalFunction(l: ["", Pointer(), ___className, "Commit"]) }
    public func CommitDefault() { _ = callLocalFunction(l: ["", Pointer(), ___className, "CommitDefault"]) }
    public func CursorRectangle() -> QRectF { callLocalFunction(l: ["", Pointer(), ___className, "CursorRectangle"]) as! QRectF }
    public func ConnectCursorRectangleChanged(f: @escaping () -> Void) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectCursorRectangleChanged", "___REMOTE_CALLBACK___"], f: { (_: [Any]) -> Any in f() } as Any) }
    public func DisconnectCursorRectangleChanged() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectCursorRectangleChanged"]) }
    public func CursorRectangleChanged() { _ = callLocalFunction(l: ["", Pointer(), ___className, "CursorRectangleChanged"]) }
    public func ConnectHide(f: @escaping () -> Void) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectHide", "___REMOTE_CALLBACK___"], f: { (_: [Any]) -> Any in f() } as Any) }
    public func DisconnectHide() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectHide"]) }
    public func Hide() { _ = callLocalFunction(l: ["", Pointer(), ___className, "Hide"]) }
    public func HideDefault() { _ = callLocalFunction(l: ["", Pointer(), ___className, "HideDefault"]) }
    public func InputDirection() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "InputDirection"]) as! Float) }
    public func ConnectInputDirectionChanged(f: @escaping (_ newDirection: Int) -> Void) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectInputDirectionChanged", "___REMOTE_CALLBACK___"], f: { (inp: [Any]) -> Any in f(Int(inp[0] as! Float)) } as Any) }
    public func DisconnectInputDirectionChanged() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectInputDirectionChanged"]) }
    public func InputDirectionChanged(newDirection: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "InputDirectionChanged", newDirection as Any]) }
    public func InputItemClipRectangle() -> QRectF { callLocalFunction(l: ["", Pointer(), ___className, "InputItemClipRectangle"]) as! QRectF }
    public func ConnectInputItemClipRectangleChanged(f: @escaping () -> Void) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectInputItemClipRectangleChanged", "___REMOTE_CALLBACK___"], f: { (_: [Any]) -> Any in f() } as Any) }
    public func DisconnectInputItemClipRectangleChanged() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectInputItemClipRectangleChanged"]) }
    public func InputItemClipRectangleChanged() { _ = callLocalFunction(l: ["", Pointer(), ___className, "InputItemClipRectangleChanged"]) }
    public func InputItemRectangle() -> QRectF { callLocalFunction(l: ["", Pointer(), ___className, "InputItemRectangle"]) as! QRectF }
    public func InputItemTransform() -> QTransform { callLocalFunction(l: ["", Pointer(), ___className, "InputItemTransform"]) as! QTransform }
    public func ConnectInvokeAction(f: @escaping (_ a: Int, _ cursorPosition: Int) -> Void) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectInvokeAction", "___REMOTE_CALLBACK___"], f: { (inp: [Any]) -> Any in f(Int(inp[0] as! Float), Int(inp[1] as! Float)) } as Any) }
    public func DisconnectInvokeAction() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectInvokeAction"]) }
    public func InvokeAction(a: Int, cursorPosition: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "InvokeAction", a as Any, cursorPosition as Any]) }
    public func InvokeActionDefault(a: Int, cursorPosition: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "InvokeActionDefault", a as Any, cursorPosition as Any]) }
    public func IsAnimating() -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "IsAnimating"]) as! Bool }
    public func IsVisible() -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "IsVisible"]) as! Bool }
    public func KeyboardRectangle() -> QRectF { callLocalFunction(l: ["", Pointer(), ___className, "KeyboardRectangle"]) as! QRectF }
    public func ConnectKeyboardRectangleChanged(f: @escaping () -> Void) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectKeyboardRectangleChanged", "___REMOTE_CALLBACK___"], f: { (_: [Any]) -> Any in f() } as Any) }
    public func DisconnectKeyboardRectangleChanged() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectKeyboardRectangleChanged"]) }
    public func KeyboardRectangleChanged() { _ = callLocalFunction(l: ["", Pointer(), ___className, "KeyboardRectangleChanged"]) }
    public func Locale() -> QLocale { callLocalFunction(l: ["", Pointer(), ___className, "Locale"]) as! QLocale }
    public func ConnectLocaleChanged(f: @escaping () -> Void) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectLocaleChanged", "___REMOTE_CALLBACK___"], f: { (_: [Any]) -> Any in f() } as Any) }
    public func DisconnectLocaleChanged() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectLocaleChanged"]) }
    public func LocaleChanged() { _ = callLocalFunction(l: ["", Pointer(), ___className, "LocaleChanged"]) }
    public func QueryFocusObject(query: Int, argument: QVariant_ITF? = nil) -> QVariant { callLocalFunction(l: ["", Pointer(), ___className, "QueryFocusObject", query as Any, argument as Any]) as! QVariant }
    public func ConnectReset(f: @escaping () -> Void) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectReset", "___REMOTE_CALLBACK___"], f: { (_: [Any]) -> Any in f() } as Any) }
    public func DisconnectReset() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectReset"]) }
    public func Reset() { _ = callLocalFunction(l: ["", Pointer(), ___className, "Reset"]) }
    public func ResetDefault() { _ = callLocalFunction(l: ["", Pointer(), ___className, "ResetDefault"]) }
    public func SetInputItemRectangle(rect: QRectF_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetInputItemRectangle", rect as Any]) }
    public func SetInputItemTransform(transform: QTransform_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetInputItemTransform", transform as Any]) }
    public func SetVisible(visible: Bool) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetVisible", visible as Any]) }
    public func ConnectShow(f: @escaping () -> Void) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectShow", "___REMOTE_CALLBACK___"], f: { (_: [Any]) -> Any in f() } as Any) }
    public func DisconnectShow() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectShow"]) }
    public func Show() { _ = callLocalFunction(l: ["", Pointer(), ___className, "Show"]) }
    public func ShowDefault() { _ = callLocalFunction(l: ["", Pointer(), ___className, "ShowDefault"]) }
    public func ConnectUpdate(f: @escaping (_ queries: Int) -> Void) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectUpdate", "___REMOTE_CALLBACK___"], f: { (inp: [Any]) -> Any in f(Int(inp[0] as! Float)) } as Any) }
    public func DisconnectUpdate() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectUpdate"]) }
    public func Update(queries: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "Update", queries as Any]) }
    public func UpdateDefault(queries: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "UpdateDefault", queries as Any]) }
    public func ConnectVisibleChanged(f: @escaping () -> Void) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectVisibleChanged", "___REMOTE_CALLBACK___"], f: { (_: [Any]) -> Any in f() } as Any) }
    public func DisconnectVisibleChanged() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectVisibleChanged"]) }
    public func VisibleChanged() { _ = callLocalFunction(l: ["", Pointer(), ___className, "VisibleChanged"]) }
    override public func ChildEventDefault(event: QChildEvent_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "ChildEventDefault", event as Any]) }
    override public func ConnectNotifyDefault(sign: QMetaMethod_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "ConnectNotifyDefault", sign as Any]) }
    override public func CustomEventDefault(event: QEvent_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "CustomEventDefault", event as Any]) }
    override public func DeleteLaterDefault() { _ = callLocalFunction(l: ["", Pointer(), ___className, "DeleteLaterDefault"]) }
    override public func DisconnectNotifyDefault(sign: QMetaMethod_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "DisconnectNotifyDefault", sign as Any]) }
    override public func EventDefault(e: QEvent_ITF? = nil) -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "EventDefault", e as Any]) as! Bool }
    override public func EventFilterDefault(watched: QObject_ITF? = nil, event: QEvent_ITF? = nil) -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "EventFilterDefault", watched as Any, event as Any]) as! Bool }
    override public func MetaObjectDefault() -> QMetaObject { callLocalFunction(l: ["", Pointer(), ___className, "MetaObjectDefault"]) as! QMetaObject }
    override public func TimerEventDefault(event: QTimerEvent_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "TimerEventDefault", event as Any]) }
}

public func NewQInputMethodFromPointer(ptr: String) -> QInputMethod { let r = QInputMethod(); r.initFrom(p: ptr, n: "gui.QInputMethod"); return r }
public func QInputMethod_QueryFocusObject(query: Int, argument: QVariant_ITF? = nil) -> QVariant { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.QInputMethod_QueryFocusObject", "", query as Any, argument as Any]) as! QVariant }
public protocol QInputMethodEvent_ITF: QEvent_ITF {
    func QInputMethodEvent_PTR() -> QInputMethodEvent
}

public class QInputMethodEvent: QEvent, QInputMethodEvent_ITF {
    public func QInputMethodEvent_PTR() -> QInputMethodEvent { callLocalFunction(l: ["", Pointer(), ___className, "QInputMethodEvent_PTR"]) as! QInputMethodEvent }
    public func DestroyQInputMethodEvent() { _ = callLocalFunction(l: ["", Pointer(), ___className, "DestroyQInputMethodEvent"]) }
    public func CommitString() -> String { callLocalFunction(l: ["", Pointer(), ___className, "CommitString"]) as! String }
    public func PreeditString() -> String { callLocalFunction(l: ["", Pointer(), ___className, "PreeditString"]) as! String }
    public func ReplacementLength() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "ReplacementLength"]) as! Float) }
    public func ReplacementStart() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "ReplacementStart"]) as! Float) }
    public func SetCommitString(commitString: String, replaceFrom: Int, replaceLength: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetCommitString", commitString as Any, replaceFrom as Any, replaceLength as Any]) }
}

public func NewQInputMethodEventFromPointer(ptr: String) -> QInputMethodEvent { let r = QInputMethodEvent(); r.initFrom(p: ptr, n: "gui.QInputMethodEvent"); return r }
public func NewQInputMethodEvent() -> QInputMethodEvent { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.NewQInputMethodEvent", ""]) as! QInputMethodEvent }
public func NewQInputMethodEvent3(other: QInputMethodEvent_ITF? = nil) -> QInputMethodEvent { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.NewQInputMethodEvent3", "", other as Any]) as! QInputMethodEvent }
public protocol QInputMethodQueryEvent_ITF: QEvent_ITF {
    func QInputMethodQueryEvent_PTR() -> QInputMethodQueryEvent
}

public class QInputMethodQueryEvent: QEvent, QInputMethodQueryEvent_ITF {
    public func QInputMethodQueryEvent_PTR() -> QInputMethodQueryEvent { callLocalFunction(l: ["", Pointer(), ___className, "QInputMethodQueryEvent_PTR"]) as! QInputMethodQueryEvent }
    public func DestroyQInputMethodQueryEvent() { _ = callLocalFunction(l: ["", Pointer(), ___className, "DestroyQInputMethodQueryEvent"]) }
    public func Queries() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "Queries"]) as! Float) }
    public func SetValue(query: Int, value: QVariant_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetValue", query as Any, value as Any]) }
    public func Value(query: Int) -> QVariant { callLocalFunction(l: ["", Pointer(), ___className, "Value", query as Any]) as! QVariant }
}

public func NewQInputMethodQueryEventFromPointer(ptr: String) -> QInputMethodQueryEvent { let r = QInputMethodQueryEvent(); r.initFrom(p: ptr, n: "gui.QInputMethodQueryEvent"); return r }
public func NewQInputMethodQueryEvent(queries: Int) -> QInputMethodQueryEvent { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.NewQInputMethodQueryEvent", "", queries as Any]) as! QInputMethodQueryEvent }
public protocol QIntValidator_ITF: QValidator_ITF {
    func QIntValidator_PTR() -> QIntValidator
}

public class QIntValidator: QValidator, QIntValidator_ITF {
    public func QIntValidator_PTR() -> QIntValidator { callLocalFunction(l: ["", Pointer(), ___className, "QIntValidator_PTR"]) as! QIntValidator }
    public func Bottom() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "Bottom"]) as! Float) }
    public func ConnectBottomChanged(f: @escaping (_ bottom: Int) -> Void) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectBottomChanged", "___REMOTE_CALLBACK___"], f: { (inp: [Any]) -> Any in f(Int(inp[0] as! Float)) } as Any) }
    public func DisconnectBottomChanged() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectBottomChanged"]) }
    public func BottomChanged(bottom: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "BottomChanged", bottom as Any]) }
    public func SetBottom(vi: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetBottom", vi as Any]) }
    public func ConnectSetRange(f: @escaping (_ bottom: Int, _ top: Int) -> Void) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectSetRange", "___REMOTE_CALLBACK___"], f: { (inp: [Any]) -> Any in f(Int(inp[0] as! Float), Int(inp[1] as! Float)) } as Any) }
    public func DisconnectSetRange() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectSetRange"]) }
    public func SetRange(bottom: Int, top: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetRange", bottom as Any, top as Any]) }
    public func SetRangeDefault(bottom: Int, top: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetRangeDefault", bottom as Any, top as Any]) }
    public func SetTop(vi: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetTop", vi as Any]) }
    public func Top() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "Top"]) as! Float) }
    public func ConnectTopChanged(f: @escaping (_ top: Int) -> Void) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectTopChanged", "___REMOTE_CALLBACK___"], f: { (inp: [Any]) -> Any in f(Int(inp[0] as! Float)) } as Any) }
    public func DisconnectTopChanged() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectTopChanged"]) }
    public func TopChanged(top: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "TopChanged", top as Any]) }
    override public func ConnectValidate(f: @escaping (_ input: String, _ pos: Int) -> Int) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectValidate", "___REMOTE_CALLBACK___"], f: { (inp: [Any]) -> Any in f(inp[0] as! String, Int(inp[1] as! Float)) } as Any) }
    override public func DisconnectValidate() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectValidate"]) }
    override public func Validate(input: String, pos: Int) -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "Validate", input as Any, pos as Any]) as! Float) }
    public func ValidateDefault(input: String, pos: Int) -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "ValidateDefault", input as Any, pos as Any]) as! Float) }
    public func ConnectDestroyQIntValidator(f: @escaping () -> Void) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectDestroyQIntValidator", "___REMOTE_CALLBACK___"], f: { (_: [Any]) -> Any in f() } as Any) }
    public func DisconnectDestroyQIntValidator() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectDestroyQIntValidator"]) }
    public func DestroyQIntValidator() { _ = callLocalFunction(l: ["", Pointer(), ___className, "DestroyQIntValidator"]) }
    public func DestroyQIntValidatorDefault() { _ = callLocalFunction(l: ["", Pointer(), ___className, "DestroyQIntValidatorDefault"]) }
}

public func NewQIntValidatorFromPointer(ptr: String) -> QIntValidator { let r = QIntValidator(); r.initFrom(p: ptr, n: "gui.QIntValidator"); return r }
public func NewQIntValidator(parent: QObject_ITF? = nil) -> QIntValidator { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.NewQIntValidator", "", parent as Any]) as! QIntValidator }
public func NewQIntValidator2(minimum: Int, maximum: Int, parent: QObject_ITF? = nil) -> QIntValidator { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.NewQIntValidator2", "", minimum as Any, maximum as Any, parent as Any]) as! QIntValidator }
public protocol QKeyEvent_ITF: QInputEvent_ITF {
    func QKeyEvent_PTR() -> QKeyEvent
}

public class QKeyEvent: QInputEvent, QKeyEvent_ITF {
    public func QKeyEvent_PTR() -> QKeyEvent { callLocalFunction(l: ["", Pointer(), ___className, "QKeyEvent_PTR"]) as! QKeyEvent }
    public func DestroyQKeyEvent() { _ = callLocalFunction(l: ["", Pointer(), ___className, "DestroyQKeyEvent"]) }
    public func Count() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "Count"]) as! Float) }
    public func IsAutoRepeat() -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "IsAutoRepeat"]) as! Bool }
    public func Key() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "Key"]) as! Float) }
    public func Matches(key: Int) -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "Matches", key as Any]) as! Bool }
    public func NativeModifiers() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "NativeModifiers"]) as! Float) }
    public func NativeScanCode() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "NativeScanCode"]) as! Float) }
    public func NativeVirtualKey() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "NativeVirtualKey"]) as! Float) }
    public func Text() -> String { callLocalFunction(l: ["", Pointer(), ___className, "Text"]) as! String }
}

public func NewQKeyEventFromPointer(ptr: String) -> QKeyEvent { let r = QKeyEvent(); r.initFrom(p: ptr, n: "gui.QKeyEvent"); return r }
public func NewQKeyEvent(ty: Int, key: Int, modifiers: Int, text: String, autorep: Bool, count: Int) -> QKeyEvent { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.NewQKeyEvent", "", ty as Any, key as Any, modifiers as Any, text as Any, autorep as Any, count as Any]) as! QKeyEvent }
public func NewQKeyEvent2(ty: Int, key: Int, modifiers: Int, nativeScanCode: Int, nativeVirtualKey: Int, nativeModifiers: Int, text: String, autorep: Bool, count: Int) -> QKeyEvent { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.NewQKeyEvent2", "", ty as Any, key as Any, modifiers as Any, nativeScanCode as Any, nativeVirtualKey as Any, nativeModifiers as Any, text as Any, autorep as Any, count as Any]) as! QKeyEvent }
public protocol QKeySequence_ITF {
    func QKeySequence_PTR() -> QKeySequence
}

public class QKeySequence: Internal, QKeySequence_ITF {
    public func QKeySequence_PTR() -> QKeySequence { callLocalFunction(l: ["", Pointer(), ___className, "QKeySequence_PTR"]) as! QKeySequence }
    public func Count() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "Count"]) as! Float) }
    public func FromString(str: String, format: Int) -> QKeySequence { callLocalFunction(l: ["", Pointer(), ___className, "FromString", str as Any, format as Any]) as! QKeySequence }
    public func IsEmpty() -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "IsEmpty"]) as! Bool }
    public func KeyBindings(key: Int) -> [QKeySequence] { callLocalFunction(l: ["", Pointer(), ___className, "KeyBindings", key as Any]) as! [QKeySequence] }
    public func ListFromString(str: String, format: Int) -> [QKeySequence] { callLocalFunction(l: ["", Pointer(), ___className, "ListFromString", str as Any, format as Any]) as! [QKeySequence] }
    public func ListToString(list: [QKeySequence], format: Int) -> String { callLocalFunction(l: ["", Pointer(), ___className, "ListToString", list as Any, format as Any]) as! String }
    public func Matches(seq: QKeySequence_ITF? = nil) -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "Matches", seq as Any]) as! Float) }
    public func Mnemonic(text: String) -> QKeySequence { callLocalFunction(l: ["", Pointer(), ___className, "Mnemonic", text as Any]) as! QKeySequence }
    public func Swap(other: QKeySequence_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "Swap", other as Any]) }
    public func ToString(format: Int) -> String { callLocalFunction(l: ["", Pointer(), ___className, "ToString", format as Any]) as! String }
    public func DestroyQKeySequence() { _ = callLocalFunction(l: ["", Pointer(), ___className, "DestroyQKeySequence"]) }
}

public func NewQKeySequenceFromPointer(ptr: String) -> QKeySequence { let r = QKeySequence(); r.initFrom(p: ptr, n: "gui.QKeySequence"); return r }
public func NewQKeySequence() -> QKeySequence { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.NewQKeySequence", ""]) as! QKeySequence }
public func NewQKeySequence2(key: String, format: Int) -> QKeySequence { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.NewQKeySequence2", "", key as Any, format as Any]) as! QKeySequence }
public func NewQKeySequence3(k1: Int, k2: Int, k3: Int, k4: Int) -> QKeySequence { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.NewQKeySequence3", "", k1 as Any, k2 as Any, k3 as Any, k4 as Any]) as! QKeySequence }
public func NewQKeySequence4(keysequence: QKeySequence_ITF? = nil) -> QKeySequence { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.NewQKeySequence4", "", keysequence as Any]) as! QKeySequence }
public func NewQKeySequence5(key: Int) -> QKeySequence { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.NewQKeySequence5", "", key as Any]) as! QKeySequence }
public func QKeySequence_FromString(str: String, format: Int) -> QKeySequence { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.QKeySequence_FromString", "", str as Any, format as Any]) as! QKeySequence }
public func QKeySequence_KeyBindings(key: Int) -> [QKeySequence] { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.QKeySequence_KeyBindings", "", key as Any]) as! [QKeySequence] }
public func QKeySequence_ListFromString(str: String, format: Int) -> [QKeySequence] { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.QKeySequence_ListFromString", "", str as Any, format as Any]) as! [QKeySequence] }
public func QKeySequence_ListToString(list: [QKeySequence], format: Int) -> String { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.QKeySequence_ListToString", "", list as Any, format as Any]) as! String }
public func QKeySequence_Mnemonic(text: String) -> QKeySequence { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.QKeySequence_Mnemonic", "", text as Any]) as! QKeySequence }
public protocol QLinearGradient_ITF: QGradient_ITF {
    func QLinearGradient_PTR() -> QLinearGradient
}

public class QLinearGradient: QGradient, QLinearGradient_ITF {
    public func QLinearGradient_PTR() -> QLinearGradient { callLocalFunction(l: ["", Pointer(), ___className, "QLinearGradient_PTR"]) as! QLinearGradient }
    public func DestroyQLinearGradient() { _ = callLocalFunction(l: ["", Pointer(), ___className, "DestroyQLinearGradient"]) }
    public func FinalStop() -> QPointF { callLocalFunction(l: ["", Pointer(), ___className, "FinalStop"]) as! QPointF }
    public func SetFinalStop(stop: QPointF_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetFinalStop", stop as Any]) }
    public func SetFinalStop2(x: Float, y: Float) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetFinalStop2", x as Any, y as Any]) }
    public func SetStart(start: QPointF_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetStart", start as Any]) }
    public func SetStart2(x: Float, y: Float) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetStart2", x as Any, y as Any]) }
    public func Start() -> QPointF { callLocalFunction(l: ["", Pointer(), ___className, "Start"]) as! QPointF }
}

public func NewQLinearGradientFromPointer(ptr: String) -> QLinearGradient { let r = QLinearGradient(); r.initFrom(p: ptr, n: "gui.QLinearGradient"); return r }
public func NewQLinearGradient() -> QLinearGradient { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.NewQLinearGradient", ""]) as! QLinearGradient }
public func NewQLinearGradient2(start: QPointF_ITF? = nil, finalStop: QPointF_ITF? = nil) -> QLinearGradient { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.NewQLinearGradient2", "", start as Any, finalStop as Any]) as! QLinearGradient }
public func NewQLinearGradient3(x1: Float, y1: Float, x2: Float, y2: Float) -> QLinearGradient { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.NewQLinearGradient3", "", x1 as Any, y1 as Any, x2 as Any, y2 as Any]) as! QLinearGradient }
public protocol QMatrix_ITF {
    func QMatrix_PTR() -> QMatrix
}

public class QMatrix: Internal, QMatrix_ITF {
    public func QMatrix_PTR() -> QMatrix { callLocalFunction(l: ["", Pointer(), ___className, "QMatrix_PTR"]) as! QMatrix }
    public func DestroyQMatrix() { _ = callLocalFunction(l: ["", Pointer(), ___className, "DestroyQMatrix"]) }
    public func Determinant() -> Float { callLocalFunction(l: ["", Pointer(), ___className, "Determinant"]) as! Float }
    public func Dx() -> Float { callLocalFunction(l: ["", Pointer(), ___className, "Dx"]) as! Float }
    public func Dy() -> Float { callLocalFunction(l: ["", Pointer(), ___className, "Dy"]) as! Float }
    public func Inverted(invertible: Bool) -> QMatrix { callLocalFunction(l: ["", Pointer(), ___className, "Inverted", invertible as Any]) as! QMatrix }
    public func IsIdentity() -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "IsIdentity"]) as! Bool }
    public func IsInvertible() -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "IsInvertible"]) as! Bool }
    public func M11() -> Float { callLocalFunction(l: ["", Pointer(), ___className, "M11"]) as! Float }
    public func M12() -> Float { callLocalFunction(l: ["", Pointer(), ___className, "M12"]) as! Float }
    public func M21() -> Float { callLocalFunction(l: ["", Pointer(), ___className, "M21"]) as! Float }
    public func M22() -> Float { callLocalFunction(l: ["", Pointer(), ___className, "M22"]) as! Float }
    public func Map(x: Float, y: Float, tx: Float, ty: Float) { _ = callLocalFunction(l: ["", Pointer(), ___className, "Map", x as Any, y as Any, tx as Any, ty as Any]) }
    public func Map2(x: Int, y: Int, tx: Int, ty: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "Map2", x as Any, y as Any, tx as Any, ty as Any]) }
    public func Map3(point: QPoint_ITF? = nil) -> QPoint { callLocalFunction(l: ["", Pointer(), ___className, "Map3", point as Any]) as! QPoint }
    public func Map4(point: QPointF_ITF? = nil) -> QPointF { callLocalFunction(l: ["", Pointer(), ___className, "Map4", point as Any]) as! QPointF }
    public func Map5(line: QLine_ITF? = nil) -> QLine { callLocalFunction(l: ["", Pointer(), ___className, "Map5", line as Any]) as! QLine }
    public func Map6(line: QLineF_ITF? = nil) -> QLineF { callLocalFunction(l: ["", Pointer(), ___className, "Map6", line as Any]) as! QLineF }
    public func Map7(polygon: QPolygonF_ITF? = nil) -> QPolygonF { callLocalFunction(l: ["", Pointer(), ___className, "Map7", polygon as Any]) as! QPolygonF }
    public func Map8(polygon: QPolygon_ITF? = nil) -> QPolygon { callLocalFunction(l: ["", Pointer(), ___className, "Map8", polygon as Any]) as! QPolygon }
    public func Map9(region: QRegion_ITF? = nil) -> QRegion { callLocalFunction(l: ["", Pointer(), ___className, "Map9", region as Any]) as! QRegion }
    public func Map10(path: QPainterPath_ITF? = nil) -> QPainterPath { callLocalFunction(l: ["", Pointer(), ___className, "Map10", path as Any]) as! QPainterPath }
    public func MapRect(rectangle: QRectF_ITF? = nil) -> QRectF { callLocalFunction(l: ["", Pointer(), ___className, "MapRect", rectangle as Any]) as! QRectF }
    public func MapRect2(rectangle: QRect_ITF? = nil) -> QRect { callLocalFunction(l: ["", Pointer(), ___className, "MapRect2", rectangle as Any]) as! QRect }
    public func MapToPolygon(rectangle: QRect_ITF? = nil) -> QPolygon { callLocalFunction(l: ["", Pointer(), ___className, "MapToPolygon", rectangle as Any]) as! QPolygon }
    public func Reset() { _ = callLocalFunction(l: ["", Pointer(), ___className, "Reset"]) }
    public func Rotate(degrees: Float) -> QMatrix { callLocalFunction(l: ["", Pointer(), ___className, "Rotate", degrees as Any]) as! QMatrix }
    public func Scale(sx: Float, sy: Float) -> QMatrix { callLocalFunction(l: ["", Pointer(), ___className, "Scale", sx as Any, sy as Any]) as! QMatrix }
    public func SetMatrix(m11: Float, m12: Float, m21: Float, m22: Float, dx: Float, dy: Float) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetMatrix", m11 as Any, m12 as Any, m21 as Any, m22 as Any, dx as Any, dy as Any]) }
    public func Shear(sh: Float, sv: Float) -> QMatrix { callLocalFunction(l: ["", Pointer(), ___className, "Shear", sh as Any, sv as Any]) as! QMatrix }
    public func Translate(dx: Float, dy: Float) -> QMatrix { callLocalFunction(l: ["", Pointer(), ___className, "Translate", dx as Any, dy as Any]) as! QMatrix }
}

public func NewQMatrixFromPointer(ptr: String) -> QMatrix { let r = QMatrix(); r.initFrom(p: ptr, n: "gui.QMatrix"); return r }
public func NewQMatrix2() -> QMatrix { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.NewQMatrix2", ""]) as! QMatrix }
public func NewQMatrix3(m11: Float, m12: Float, m21: Float, m22: Float, dx: Float, dy: Float) -> QMatrix { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.NewQMatrix3", "", m11 as Any, m12 as Any, m21 as Any, m22 as Any, dx as Any, dy as Any]) as! QMatrix }
public func NewQMatrix5(matrix: QMatrix_ITF? = nil) -> QMatrix { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.NewQMatrix5", "", matrix as Any]) as! QMatrix }
public protocol QMatrix4x4_ITF {
    func QMatrix4x4_PTR() -> QMatrix4x4
}

public class QMatrix4x4: Internal, QMatrix4x4_ITF {
    public func QMatrix4x4_PTR() -> QMatrix4x4 { callLocalFunction(l: ["", Pointer(), ___className, "QMatrix4x4_PTR"]) as! QMatrix4x4 }
    public func DestroyQMatrix4x4() { _ = callLocalFunction(l: ["", Pointer(), ___className, "DestroyQMatrix4x4"]) }
    public func Column(index: Int) -> QVector4D { callLocalFunction(l: ["", Pointer(), ___className, "Column", index as Any]) as! QVector4D }
    public func ConstData() -> Float { callLocalFunction(l: ["", Pointer(), ___className, "ConstData"]) as! Float }
    public func CopyDataTo(values: Float) { _ = callLocalFunction(l: ["", Pointer(), ___className, "CopyDataTo", values as Any]) }
    public func Data() -> Float { callLocalFunction(l: ["", Pointer(), ___className, "Data"]) as! Float }
    public func Data2() -> Float { callLocalFunction(l: ["", Pointer(), ___className, "Data2"]) as! Float }
    public func Determinant() -> Float { callLocalFunction(l: ["", Pointer(), ___className, "Determinant"]) as! Float }
    public func Fill(value: Float) { _ = callLocalFunction(l: ["", Pointer(), ___className, "Fill", value as Any]) }
    public func Frustum(left: Float, right: Float, bottom: Float, top: Float, nearPlane: Float, farPlane: Float) { _ = callLocalFunction(l: ["", Pointer(), ___className, "Frustum", left as Any, right as Any, bottom as Any, top as Any, nearPlane as Any, farPlane as Any]) }
    public func Inverted(invertible: Bool) -> QMatrix4x4 { callLocalFunction(l: ["", Pointer(), ___className, "Inverted", invertible as Any]) as! QMatrix4x4 }
    public func IsAffine() -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "IsAffine"]) as! Bool }
    public func IsIdentity() -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "IsIdentity"]) as! Bool }
    public func LookAt(eye: QVector3D_ITF? = nil, center: QVector3D_ITF? = nil, up: QVector3D_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "LookAt", eye as Any, center as Any, up as Any]) }
    public func Map(point: QPoint_ITF? = nil) -> QPoint { callLocalFunction(l: ["", Pointer(), ___className, "Map", point as Any]) as! QPoint }
    public func Map2(point: QPointF_ITF? = nil) -> QPointF { callLocalFunction(l: ["", Pointer(), ___className, "Map2", point as Any]) as! QPointF }
    public func Map3(point: QVector3D_ITF? = nil) -> QVector3D { callLocalFunction(l: ["", Pointer(), ___className, "Map3", point as Any]) as! QVector3D }
    public func Map4(point: QVector4D_ITF? = nil) -> QVector4D { callLocalFunction(l: ["", Pointer(), ___className, "Map4", point as Any]) as! QVector4D }
    public func MapRect(rect: QRect_ITF? = nil) -> QRect { callLocalFunction(l: ["", Pointer(), ___className, "MapRect", rect as Any]) as! QRect }
    public func MapRect2(rect: QRectF_ITF? = nil) -> QRectF { callLocalFunction(l: ["", Pointer(), ___className, "MapRect2", rect as Any]) as! QRectF }
    public func MapVector(vector: QVector3D_ITF? = nil) -> QVector3D { callLocalFunction(l: ["", Pointer(), ___className, "MapVector", vector as Any]) as! QVector3D }
    public func Optimize() { _ = callLocalFunction(l: ["", Pointer(), ___className, "Optimize"]) }
    public func Ortho(left: Float, right: Float, bottom: Float, top: Float, nearPlane: Float, farPlane: Float) { _ = callLocalFunction(l: ["", Pointer(), ___className, "Ortho", left as Any, right as Any, bottom as Any, top as Any, nearPlane as Any, farPlane as Any]) }
    public func Ortho2(rect: QRect_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "Ortho2", rect as Any]) }
    public func Ortho3(rect: QRectF_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "Ortho3", rect as Any]) }
    public func Perspective(verticalAngle: Float, aspectRatio: Float, nearPlane: Float, farPlane: Float) { _ = callLocalFunction(l: ["", Pointer(), ___className, "Perspective", verticalAngle as Any, aspectRatio as Any, nearPlane as Any, farPlane as Any]) }
    public func Rotate(angle: Float, vector: QVector3D_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "Rotate", angle as Any, vector as Any]) }
    public func Rotate2(angle: Float, x: Float, y: Float, z: Float) { _ = callLocalFunction(l: ["", Pointer(), ___className, "Rotate2", angle as Any, x as Any, y as Any, z as Any]) }
    public func Rotate3(quaternion: QQuaternion_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "Rotate3", quaternion as Any]) }
    public func Row(index: Int) -> QVector4D { callLocalFunction(l: ["", Pointer(), ___className, "Row", index as Any]) as! QVector4D }
    public func Scale(vector: QVector3D_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "Scale", vector as Any]) }
    public func Scale2(x: Float, y: Float) { _ = callLocalFunction(l: ["", Pointer(), ___className, "Scale2", x as Any, y as Any]) }
    public func Scale3(x: Float, y: Float, z: Float) { _ = callLocalFunction(l: ["", Pointer(), ___className, "Scale3", x as Any, y as Any, z as Any]) }
    public func Scale4(factor: Float) { _ = callLocalFunction(l: ["", Pointer(), ___className, "Scale4", factor as Any]) }
    public func SetColumn(index: Int, value: QVector4D_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetColumn", index as Any, value as Any]) }
    public func SetRow(index: Int, value: QVector4D_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetRow", index as Any, value as Any]) }
    public func SetToIdentity() { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetToIdentity"]) }
    public func ToAffine() -> QMatrix { callLocalFunction(l: ["", Pointer(), ___className, "ToAffine"]) as! QMatrix }
    public func ToTransform() -> QTransform { callLocalFunction(l: ["", Pointer(), ___className, "ToTransform"]) as! QTransform }
    public func ToTransform2(distanceToPlane: Float) -> QTransform { callLocalFunction(l: ["", Pointer(), ___className, "ToTransform2", distanceToPlane as Any]) as! QTransform }
    public func Translate(vector: QVector3D_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "Translate", vector as Any]) }
    public func Translate2(x: Float, y: Float) { _ = callLocalFunction(l: ["", Pointer(), ___className, "Translate2", x as Any, y as Any]) }
    public func Translate3(x: Float, y: Float, z: Float) { _ = callLocalFunction(l: ["", Pointer(), ___className, "Translate3", x as Any, y as Any, z as Any]) }
    public func Transposed() -> QMatrix4x4 { callLocalFunction(l: ["", Pointer(), ___className, "Transposed"]) as! QMatrix4x4 }
    public func Viewport(left: Float, bottom: Float, width: Float, height: Float, nearPlane: Float, farPlane: Float) { _ = callLocalFunction(l: ["", Pointer(), ___className, "Viewport", left as Any, bottom as Any, width as Any, height as Any, nearPlane as Any, farPlane as Any]) }
    public func Viewport2(rect: QRectF_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "Viewport2", rect as Any]) }
}

public func NewQMatrix4x4FromPointer(ptr: String) -> QMatrix4x4 { let r = QMatrix4x4(); r.initFrom(p: ptr, n: "gui.QMatrix4x4"); return r }
public func NewQMatrix4x4() -> QMatrix4x4 { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.NewQMatrix4x4", ""]) as! QMatrix4x4 }
public func NewQMatrix4x43(values: Float) -> QMatrix4x4 { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.NewQMatrix4x43", "", values as Any]) as! QMatrix4x4 }
public func NewQMatrix4x44(m11: Float, m12: Float, m13: Float, m14: Float, m21: Float, m22: Float, m23: Float, m24: Float, m31: Float, m32: Float, m33: Float, m34: Float, m41: Float, m42: Float, m43: Float, m44: Float) -> QMatrix4x4 { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.NewQMatrix4x44", "", m11 as Any, m12 as Any, m13 as Any, m14 as Any, m21 as Any, m22 as Any, m23 as Any, m24 as Any, m31 as Any, m32 as Any, m33 as Any, m34 as Any, m41 as Any, m42 as Any, m43 as Any, m44 as Any]) as! QMatrix4x4 }
public func NewQMatrix4x46(matrix: QMatrix_ITF? = nil) -> QMatrix4x4 { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.NewQMatrix4x46", "", matrix as Any]) as! QMatrix4x4 }
public protocol QMessageDialogOptions_ITF {
    func QMessageDialogOptions_PTR() -> QMessageDialogOptions
}

public class QMessageDialogOptions: Internal, QMessageDialogOptions_ITF {
    public func QMessageDialogOptions_PTR() -> QMessageDialogOptions { callLocalFunction(l: ["", Pointer(), ___className, "QMessageDialogOptions_PTR"]) as! QMessageDialogOptions }
    public func DestroyQMessageDialogOptions() { _ = callLocalFunction(l: ["", Pointer(), ___className, "DestroyQMessageDialogOptions"]) }
}

public protocol QMouseEvent_ITF: QInputEvent_ITF {
    func QMouseEvent_PTR() -> QMouseEvent
}

public class QMouseEvent: QInputEvent, QMouseEvent_ITF {
    public func QMouseEvent_PTR() -> QMouseEvent { callLocalFunction(l: ["", Pointer(), ___className, "QMouseEvent_PTR"]) as! QMouseEvent }
    public func DestroyQMouseEvent() { _ = callLocalFunction(l: ["", Pointer(), ___className, "DestroyQMouseEvent"]) }
    public func Button() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "Button"]) as! Float) }
    public func Buttons() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "Buttons"]) as! Float) }
    public func Flags() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "Flags"]) as! Float) }
    public func GlobalPos() -> QPoint { callLocalFunction(l: ["", Pointer(), ___className, "GlobalPos"]) as! QPoint }
    public func GlobalX() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "GlobalX"]) as! Float) }
    public func GlobalY() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "GlobalY"]) as! Float) }
    public func LocalPos() -> QPointF { callLocalFunction(l: ["", Pointer(), ___className, "LocalPos"]) as! QPointF }
    public func Pos() -> QPoint { callLocalFunction(l: ["", Pointer(), ___className, "Pos"]) as! QPoint }
    public func ScreenPos() -> QPointF { callLocalFunction(l: ["", Pointer(), ___className, "ScreenPos"]) as! QPointF }
    public func Source() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "Source"]) as! Float) }
    public func WindowPos() -> QPointF { callLocalFunction(l: ["", Pointer(), ___className, "WindowPos"]) as! QPointF }
    public func X() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "X"]) as! Float) }
    public func Y() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "Y"]) as! Float) }
}

public func NewQMouseEventFromPointer(ptr: String) -> QMouseEvent { let r = QMouseEvent(); r.initFrom(p: ptr, n: "gui.QMouseEvent"); return r }
public func NewQMouseEvent(ty: Int, localPos: QPointF_ITF? = nil, button: Int, buttons: Int, modifiers: Int) -> QMouseEvent { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.NewQMouseEvent", "", ty as Any, localPos as Any, button as Any, buttons as Any, modifiers as Any]) as! QMouseEvent }
public func NewQMouseEvent2(ty: Int, localPos: QPointF_ITF? = nil, screenPos: QPointF_ITF? = nil, button: Int, buttons: Int, modifiers: Int) -> QMouseEvent { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.NewQMouseEvent2", "", ty as Any, localPos as Any, screenPos as Any, button as Any, buttons as Any, modifiers as Any]) as! QMouseEvent }
public func NewQMouseEvent3(ty: Int, localPos: QPointF_ITF? = nil, windowPos: QPointF_ITF? = nil, screenPos: QPointF_ITF? = nil, button: Int, buttons: Int, modifiers: Int) -> QMouseEvent { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.NewQMouseEvent3", "", ty as Any, localPos as Any, windowPos as Any, screenPos as Any, button as Any, buttons as Any, modifiers as Any]) as! QMouseEvent }
public func NewQMouseEvent4(ty: Int, localPos: QPointF_ITF? = nil, windowPos: QPointF_ITF? = nil, screenPos: QPointF_ITF? = nil, button: Int, buttons: Int, modifiers: Int, source: Int) -> QMouseEvent { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.NewQMouseEvent4", "", ty as Any, localPos as Any, windowPos as Any, screenPos as Any, button as Any, buttons as Any, modifiers as Any, source as Any]) as! QMouseEvent }
public protocol QMoveEvent_ITF: QEvent_ITF {
    func QMoveEvent_PTR() -> QMoveEvent
}

public class QMoveEvent: QEvent, QMoveEvent_ITF {
    public func QMoveEvent_PTR() -> QMoveEvent { callLocalFunction(l: ["", Pointer(), ___className, "QMoveEvent_PTR"]) as! QMoveEvent }
    public func DestroyQMoveEvent() { _ = callLocalFunction(l: ["", Pointer(), ___className, "DestroyQMoveEvent"]) }
    public func OldPos() -> QPoint { callLocalFunction(l: ["", Pointer(), ___className, "OldPos"]) as! QPoint }
    public func Pos() -> QPoint { callLocalFunction(l: ["", Pointer(), ___className, "Pos"]) as! QPoint }
}

public func NewQMoveEventFromPointer(ptr: String) -> QMoveEvent { let r = QMoveEvent(); r.initFrom(p: ptr, n: "gui.QMoveEvent"); return r }
public func NewQMoveEvent(pos: QPoint_ITF? = nil, oldPos: QPoint_ITF? = nil) -> QMoveEvent { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.NewQMoveEvent", "", pos as Any, oldPos as Any]) as! QMoveEvent }
public protocol QMovie_ITF: QObject_ITF {
    func QMovie_PTR() -> QMovie
}

public class QMovie: QObject, QMovie_ITF {
    public func QMovie_PTR() -> QMovie { callLocalFunction(l: ["", Pointer(), ___className, "QMovie_PTR"]) as! QMovie }
    public func BackgroundColor() -> QColor { callLocalFunction(l: ["", Pointer(), ___className, "BackgroundColor"]) as! QColor }
    public func CacheMode() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "CacheMode"]) as! Float) }
    public func CurrentFrameNumber() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "CurrentFrameNumber"]) as! Float) }
    public func CurrentImage() -> QImage { callLocalFunction(l: ["", Pointer(), ___className, "CurrentImage"]) as! QImage }
    public func CurrentPixmap() -> QPixmap { callLocalFunction(l: ["", Pointer(), ___className, "CurrentPixmap"]) as! QPixmap }
    public func Device() -> QIODevice { callLocalFunction(l: ["", Pointer(), ___className, "Device"]) as! QIODevice }
    public func ConnectError(f: @escaping (_ error: Int) -> Void) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectError", "___REMOTE_CALLBACK___"], f: { (inp: [Any]) -> Any in f(Int(inp[0] as! Float)) } as Any) }
    public func DisconnectError() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectError"]) }
    public func Error(error: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "Error", error as Any]) }
    public func FileName() -> String { callLocalFunction(l: ["", Pointer(), ___className, "FileName"]) as! String }
    public func ConnectFinished(f: @escaping () -> Void) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectFinished", "___REMOTE_CALLBACK___"], f: { (_: [Any]) -> Any in f() } as Any) }
    public func DisconnectFinished() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectFinished"]) }
    public func Finished() { _ = callLocalFunction(l: ["", Pointer(), ___className, "Finished"]) }
    public func Format() -> QByteArray { callLocalFunction(l: ["", Pointer(), ___className, "Format"]) as! QByteArray }
    public func ConnectFrameChanged(f: @escaping (_ frameNumber: Int) -> Void) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectFrameChanged", "___REMOTE_CALLBACK___"], f: { (inp: [Any]) -> Any in f(Int(inp[0] as! Float)) } as Any) }
    public func DisconnectFrameChanged() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectFrameChanged"]) }
    public func FrameChanged(frameNumber: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "FrameChanged", frameNumber as Any]) }
    public func FrameCount() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "FrameCount"]) as! Float) }
    public func FrameRect() -> QRect { callLocalFunction(l: ["", Pointer(), ___className, "FrameRect"]) as! QRect }
    public func IsValid() -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "IsValid"]) as! Bool }
    public func JumpToFrame(frameNumber: Int) -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "JumpToFrame", frameNumber as Any]) as! Bool }
    public func ConnectJumpToNextFrame(f: @escaping () -> Bool) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectJumpToNextFrame", "___REMOTE_CALLBACK___"], f: { (_: [Any]) -> Any in f() } as Any) }
    public func DisconnectJumpToNextFrame() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectJumpToNextFrame"]) }
    public func JumpToNextFrame() -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "JumpToNextFrame"]) as! Bool }
    public func JumpToNextFrameDefault() -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "JumpToNextFrameDefault"]) as! Bool }
    public func LastError() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "LastError"]) as! Float) }
    public func LastErrorString() -> String { callLocalFunction(l: ["", Pointer(), ___className, "LastErrorString"]) as! String }
    public func LoopCount() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "LoopCount"]) as! Float) }
    public func NextFrameDelay() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "NextFrameDelay"]) as! Float) }
    public func ConnectResized(f: @escaping (_ size: QSize) -> Void) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectResized", "___REMOTE_CALLBACK___"], f: { (inp: [Any]) -> Any in f(inp[0] as! QSize) } as Any) }
    public func DisconnectResized() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectResized"]) }
    public func Resized(size: QSize_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "Resized", size as Any]) }
    public func ScaledSize() -> QSize { callLocalFunction(l: ["", Pointer(), ___className, "ScaledSize"]) as! QSize }
    public func SetBackgroundColor(color: QColor_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetBackgroundColor", color as Any]) }
    public func SetCacheMode(mode: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetCacheMode", mode as Any]) }
    public func SetDevice(device: QIODevice_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetDevice", device as Any]) }
    public func SetFileName(fileName: String) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetFileName", fileName as Any]) }
    public func SetFormat(format: QByteArray_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetFormat", format as Any]) }
    public func ConnectSetPaused(f: @escaping (_ paused: Bool) -> Void) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectSetPaused", "___REMOTE_CALLBACK___"], f: { (inp: [Any]) -> Any in f(inp[0] as! Bool) } as Any) }
    public func DisconnectSetPaused() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectSetPaused"]) }
    public func SetPaused(paused: Bool) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetPaused", paused as Any]) }
    public func SetPausedDefault(paused: Bool) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetPausedDefault", paused as Any]) }
    public func SetScaledSize(size: QSize_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetScaledSize", size as Any]) }
    public func ConnectSetSpeed(f: @escaping (_ percentSpeed: Int) -> Void) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectSetSpeed", "___REMOTE_CALLBACK___"], f: { (inp: [Any]) -> Any in f(Int(inp[0] as! Float)) } as Any) }
    public func DisconnectSetSpeed() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectSetSpeed"]) }
    public func SetSpeed(percentSpeed: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetSpeed", percentSpeed as Any]) }
    public func SetSpeedDefault(percentSpeed: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetSpeedDefault", percentSpeed as Any]) }
    public func Speed() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "Speed"]) as! Float) }
    public func ConnectStart(f: @escaping () -> Void) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectStart", "___REMOTE_CALLBACK___"], f: { (_: [Any]) -> Any in f() } as Any) }
    public func DisconnectStart() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectStart"]) }
    public func Start() { _ = callLocalFunction(l: ["", Pointer(), ___className, "Start"]) }
    public func StartDefault() { _ = callLocalFunction(l: ["", Pointer(), ___className, "StartDefault"]) }
    public func ConnectStarted(f: @escaping () -> Void) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectStarted", "___REMOTE_CALLBACK___"], f: { (_: [Any]) -> Any in f() } as Any) }
    public func DisconnectStarted() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectStarted"]) }
    public func Started() { _ = callLocalFunction(l: ["", Pointer(), ___className, "Started"]) }
    public func State() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "State"]) as! Float) }
    public func ConnectStateChanged(f: @escaping (_ state: Int) -> Void) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectStateChanged", "___REMOTE_CALLBACK___"], f: { (inp: [Any]) -> Any in f(Int(inp[0] as! Float)) } as Any) }
    public func DisconnectStateChanged() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectStateChanged"]) }
    public func StateChanged(state: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "StateChanged", state as Any]) }
    public func ConnectStop(f: @escaping () -> Void) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectStop", "___REMOTE_CALLBACK___"], f: { (_: [Any]) -> Any in f() } as Any) }
    public func DisconnectStop() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectStop"]) }
    public func Stop() { _ = callLocalFunction(l: ["", Pointer(), ___className, "Stop"]) }
    public func StopDefault() { _ = callLocalFunction(l: ["", Pointer(), ___className, "StopDefault"]) }
    public func SupportedFormats() -> [QByteArray] { callLocalFunction(l: ["", Pointer(), ___className, "SupportedFormats"]) as! [QByteArray] }
    public func ConnectUpdated(f: @escaping (_ rect: QRect) -> Void) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectUpdated", "___REMOTE_CALLBACK___"], f: { (inp: [Any]) -> Any in f(inp[0] as! QRect) } as Any) }
    public func DisconnectUpdated() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectUpdated"]) }
    public func Updated(rect: QRect_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "Updated", rect as Any]) }
    public func ConnectDestroyQMovie(f: @escaping () -> Void) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectDestroyQMovie", "___REMOTE_CALLBACK___"], f: { (_: [Any]) -> Any in f() } as Any) }
    public func DisconnectDestroyQMovie() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectDestroyQMovie"]) }
    public func DestroyQMovie() { _ = callLocalFunction(l: ["", Pointer(), ___className, "DestroyQMovie"]) }
    public func DestroyQMovieDefault() { _ = callLocalFunction(l: ["", Pointer(), ___className, "DestroyQMovieDefault"]) }
    override public func ChildEventDefault(event: QChildEvent_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "ChildEventDefault", event as Any]) }
    override public func ConnectNotifyDefault(sign: QMetaMethod_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "ConnectNotifyDefault", sign as Any]) }
    override public func CustomEventDefault(event: QEvent_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "CustomEventDefault", event as Any]) }
    override public func DeleteLaterDefault() { _ = callLocalFunction(l: ["", Pointer(), ___className, "DeleteLaterDefault"]) }
    override public func DisconnectNotifyDefault(sign: QMetaMethod_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "DisconnectNotifyDefault", sign as Any]) }
    override public func EventDefault(e: QEvent_ITF? = nil) -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "EventDefault", e as Any]) as! Bool }
    override public func EventFilterDefault(watched: QObject_ITF? = nil, event: QEvent_ITF? = nil) -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "EventFilterDefault", watched as Any, event as Any]) as! Bool }
    override public func MetaObjectDefault() -> QMetaObject { callLocalFunction(l: ["", Pointer(), ___className, "MetaObjectDefault"]) as! QMetaObject }
    override public func TimerEventDefault(event: QTimerEvent_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "TimerEventDefault", event as Any]) }
}

public func NewQMovieFromPointer(ptr: String) -> QMovie { let r = QMovie(); r.initFrom(p: ptr, n: "gui.QMovie"); return r }
public func NewQMovie(parent: QObject_ITF? = nil) -> QMovie { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.NewQMovie", "", parent as Any]) as! QMovie }
public func NewQMovie2(device: QIODevice_ITF? = nil, format: QByteArray_ITF? = nil, parent: QObject_ITF? = nil) -> QMovie { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.NewQMovie2", "", device as Any, format as Any, parent as Any]) as! QMovie }
public func NewQMovie3(fileName: String, format: QByteArray_ITF? = nil, parent: QObject_ITF? = nil) -> QMovie { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.NewQMovie3", "", fileName as Any, format as Any, parent as Any]) as! QMovie }
public func QMovie_SupportedFormats() -> [QByteArray] { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.QMovie_SupportedFormats", ""]) as! [QByteArray] }
public protocol QNativeGestureEvent_ITF: QInputEvent_ITF {
    func QNativeGestureEvent_PTR() -> QNativeGestureEvent
}

public class QNativeGestureEvent: QInputEvent, QNativeGestureEvent_ITF {
    public func QNativeGestureEvent_PTR() -> QNativeGestureEvent { callLocalFunction(l: ["", Pointer(), ___className, "QNativeGestureEvent_PTR"]) as! QNativeGestureEvent }
    public func DestroyQNativeGestureEvent() { _ = callLocalFunction(l: ["", Pointer(), ___className, "DestroyQNativeGestureEvent"]) }
    public func Device() -> QTouchDevice { callLocalFunction(l: ["", Pointer(), ___className, "Device"]) as! QTouchDevice }
    public func GestureType() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "GestureType"]) as! Float) }
    public func GlobalPos() -> QPoint { callLocalFunction(l: ["", Pointer(), ___className, "GlobalPos"]) as! QPoint }
    public func LocalPos() -> QPointF { callLocalFunction(l: ["", Pointer(), ___className, "LocalPos"]) as! QPointF }
    public func Pos() -> QPoint { callLocalFunction(l: ["", Pointer(), ___className, "Pos"]) as! QPoint }
    public func ScreenPos() -> QPointF { callLocalFunction(l: ["", Pointer(), ___className, "ScreenPos"]) as! QPointF }
    public func Value() -> Float { callLocalFunction(l: ["", Pointer(), ___className, "Value"]) as! Float }
    public func WindowPos() -> QPointF { callLocalFunction(l: ["", Pointer(), ___className, "WindowPos"]) as! QPointF }
}

public func NewQNativeGestureEventFromPointer(ptr: String) -> QNativeGestureEvent { let r = QNativeGestureEvent(); r.initFrom(p: ptr, n: "gui.QNativeGestureEvent"); return r }
public func NewQNativeGestureEvent2(ty: Int, device: QTouchDevice_ITF? = nil, localPos: QPointF_ITF? = nil, windowPos: QPointF_ITF? = nil, screenPos: QPointF_ITF? = nil, realValue: Float, sequenceId: Int, intValue: Int) -> QNativeGestureEvent { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.NewQNativeGestureEvent2", "", ty as Any, device as Any, localPos as Any, windowPos as Any, screenPos as Any, realValue as Any, sequenceId as Any, intValue as Any]) as! QNativeGestureEvent }
public protocol QOffscreenSurface_ITF: QSurface_ITF {
    func QOffscreenSurface_PTR() -> QOffscreenSurface
    func QObject_PTR() -> QObject
}

public class QOffscreenSurface: QSurface, QOffscreenSurface_ITF {
    public func QObject_PTR() -> QObject { callLocalFunction(l: ["", Pointer(), ___className, "QObject_PTR"]) as! QObject }
    public func QOffscreenSurface_PTR() -> QOffscreenSurface { callLocalFunction(l: ["", Pointer(), ___className, "QOffscreenSurface_PTR"]) as! QOffscreenSurface }
    public func Create() { _ = callLocalFunction(l: ["", Pointer(), ___className, "Create"]) }
    public func Destroy() { _ = callLocalFunction(l: ["", Pointer(), ___className, "Destroy"]) }
    override public func ConnectFormat(f: @escaping () -> QSurfaceFormat) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectFormat", "___REMOTE_CALLBACK___"], f: { (_: [Any]) -> Any in f() } as Any) }
    override public func DisconnectFormat() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectFormat"]) }
    override public func Format() -> QSurfaceFormat { callLocalFunction(l: ["", Pointer(), ___className, "Format"]) as! QSurfaceFormat }
    public func FormatDefault() -> QSurfaceFormat { callLocalFunction(l: ["", Pointer(), ___className, "FormatDefault"]) as! QSurfaceFormat }
    public func IsValid() -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "IsValid"]) as! Bool }
    public func NativeHandle() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "NativeHandle"]) as! Float) }
    public func RequestedFormat() -> QSurfaceFormat { callLocalFunction(l: ["", Pointer(), ___className, "RequestedFormat"]) as! QSurfaceFormat }
    public func Screen() -> QScreen { callLocalFunction(l: ["", Pointer(), ___className, "Screen"]) as! QScreen }
    public func ConnectScreenChanged(f: @escaping (_ screen: QScreen) -> Void) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectScreenChanged", "___REMOTE_CALLBACK___"], f: { (inp: [Any]) -> Any in f(inp[0] as! QScreen) } as Any) }
    public func DisconnectScreenChanged() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectScreenChanged"]) }
    public func ScreenChanged(screen: QScreen_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "ScreenChanged", screen as Any]) }
    public func SetFormat(format: QSurfaceFormat_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetFormat", format as Any]) }
    public func SetNativeHandle(handle: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetNativeHandle", handle as Any]) }
    public func SetScreen(newScreen: QScreen_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetScreen", newScreen as Any]) }
    override public func ConnectSize(f: @escaping () -> QSize) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectSize", "___REMOTE_CALLBACK___"], f: { (_: [Any]) -> Any in f() } as Any) }
    override public func DisconnectSize() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectSize"]) }
    override public func Size() -> QSize { callLocalFunction(l: ["", Pointer(), ___className, "Size"]) as! QSize }
    public func SizeDefault() -> QSize { callLocalFunction(l: ["", Pointer(), ___className, "SizeDefault"]) as! QSize }
    override public func ConnectSurfaceType(f: @escaping () -> Int) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectSurfaceType", "___REMOTE_CALLBACK___"], f: { (_: [Any]) -> Any in f() } as Any) }
    override public func DisconnectSurfaceType() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectSurfaceType"]) }
    override public func SurfaceType() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "SurfaceType"]) as! Float) }
    public func SurfaceTypeDefault() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "SurfaceTypeDefault"]) as! Float) }
    public func ConnectDestroyQOffscreenSurface(f: @escaping () -> Void) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectDestroyQOffscreenSurface", "___REMOTE_CALLBACK___"], f: { (_: [Any]) -> Any in f() } as Any) }
    public func DisconnectDestroyQOffscreenSurface() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectDestroyQOffscreenSurface"]) }
    public func DestroyQOffscreenSurface() { _ = callLocalFunction(l: ["", Pointer(), ___className, "DestroyQOffscreenSurface"]) }
    public func DestroyQOffscreenSurfaceDefault() { _ = callLocalFunction(l: ["", Pointer(), ___className, "DestroyQOffscreenSurfaceDefault"]) }
    public func ChildEvent(event: QChildEvent_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "ChildEvent", event as Any]) }
    public func ChildEventDefault(event: QChildEvent_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "ChildEventDefault", event as Any]) }
    public func ConnectNotify(sign: QMetaMethod_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "ConnectNotify", sign as Any]) }
    public func ConnectNotifyDefault(sign: QMetaMethod_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "ConnectNotifyDefault", sign as Any]) }
    public func CustomEvent(event: QEvent_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "CustomEvent", event as Any]) }
    public func CustomEventDefault(event: QEvent_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "CustomEventDefault", event as Any]) }
    public func DeleteLater() { _ = callLocalFunction(l: ["", Pointer(), ___className, "DeleteLater"]) }
    public func DeleteLaterDefault() { _ = callLocalFunction(l: ["", Pointer(), ___className, "DeleteLaterDefault"]) }
    public func DisconnectNotify(sign: QMetaMethod_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "DisconnectNotify", sign as Any]) }
    public func DisconnectNotifyDefault(sign: QMetaMethod_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "DisconnectNotifyDefault", sign as Any]) }
    public func Event(e: QEvent_ITF? = nil) -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "Event", e as Any]) as! Bool }
    public func EventDefault(e: QEvent_ITF? = nil) -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "EventDefault", e as Any]) as! Bool }
    public func EventFilter(watched: QObject_ITF? = nil, event: QEvent_ITF? = nil) -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "EventFilter", watched as Any, event as Any]) as! Bool }
    public func EventFilterDefault(watched: QObject_ITF? = nil, event: QEvent_ITF? = nil) -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "EventFilterDefault", watched as Any, event as Any]) as! Bool }
    public func MetaObject() -> QMetaObject { callLocalFunction(l: ["", Pointer(), ___className, "MetaObject"]) as! QMetaObject }
    public func MetaObjectDefault() -> QMetaObject { callLocalFunction(l: ["", Pointer(), ___className, "MetaObjectDefault"]) as! QMetaObject }
    public func TimerEvent(event: QTimerEvent_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "TimerEvent", event as Any]) }
    public func TimerEventDefault(event: QTimerEvent_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "TimerEventDefault", event as Any]) }
}

public func NewQOffscreenSurfaceFromPointer(ptr: String) -> QOffscreenSurface { let r = QOffscreenSurface(); r.initFrom(p: ptr, n: "gui.QOffscreenSurface"); return r }
public func NewQOffscreenSurface(targetScreen: QScreen_ITF? = nil, parent: QObject_ITF? = nil) -> QOffscreenSurface { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.NewQOffscreenSurface", "", targetScreen as Any, parent as Any]) as! QOffscreenSurface }
public func NewQOffscreenSurface2(targetScreen: QScreen_ITF? = nil) -> QOffscreenSurface { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.NewQOffscreenSurface2", "", targetScreen as Any]) as! QOffscreenSurface }
public protocol QOpenGLBuffer_ITF {
    func QOpenGLBuffer_PTR() -> QOpenGLBuffer
}

public class QOpenGLBuffer: Internal, QOpenGLBuffer_ITF {
    public func QOpenGLBuffer_PTR() -> QOpenGLBuffer { callLocalFunction(l: ["", Pointer(), ___className, "QOpenGLBuffer_PTR"]) as! QOpenGLBuffer }
    public func Allocate(data: Int, count: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "Allocate", data as Any, count as Any]) }
    public func Allocate2(count: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "Allocate2", count as Any]) }
    public func Bind() -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "Bind"]) as! Bool }
    public func BufferId() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "BufferId"]) as! Float) }
    public func Create() -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "Create"]) as! Bool }
    public func Destroy() { _ = callLocalFunction(l: ["", Pointer(), ___className, "Destroy"]) }
    public func IsCreated() -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "IsCreated"]) as! Bool }
    public func Map(access: Int) -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "Map", access as Any]) as! Float) }
    public func MapRange(offset: Int, count: Int, access: Int) -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "MapRange", offset as Any, count as Any, access as Any]) as! Float) }
    public func Read(offset: Int, data: Int, count: Int) -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "Read", offset as Any, data as Any, count as Any]) as! Bool }
    public func Release() { _ = callLocalFunction(l: ["", Pointer(), ___className, "Release"]) }
    public func Release2(ty: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "Release2", ty as Any]) }
    public func SetUsagePattern(value: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetUsagePattern", value as Any]) }
    public func Size() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "Size"]) as! Float) }
    public func Type() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "Type"]) as! Float) }
    public func Unmap() -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "Unmap"]) as! Bool }
    public func UsagePattern() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "UsagePattern"]) as! Float) }
    public func Write(offset: Int, data: Int, count: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "Write", offset as Any, data as Any, count as Any]) }
    public func DestroyQOpenGLBuffer() { _ = callLocalFunction(l: ["", Pointer(), ___className, "DestroyQOpenGLBuffer"]) }
}

public func NewQOpenGLBufferFromPointer(ptr: String) -> QOpenGLBuffer { let r = QOpenGLBuffer(); r.initFrom(p: ptr, n: "gui.QOpenGLBuffer"); return r }
public func NewQOpenGLBuffer() -> QOpenGLBuffer { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.NewQOpenGLBuffer", ""]) as! QOpenGLBuffer }
public func NewQOpenGLBuffer2(ty: Int) -> QOpenGLBuffer { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.NewQOpenGLBuffer2", "", ty as Any]) as! QOpenGLBuffer }
public func NewQOpenGLBuffer3(other: QOpenGLBuffer_ITF? = nil) -> QOpenGLBuffer { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.NewQOpenGLBuffer3", "", other as Any]) as! QOpenGLBuffer }
public func QOpenGLBuffer_Release2(ty: Int) { Gui.initModule(); _ = callLocalFunction(l: ["", "", "gui.QOpenGLBuffer_Release2", "", ty as Any]) }
public protocol QOpenGLContext_ITF: QObject_ITF {
    func QOpenGLContext_PTR() -> QOpenGLContext
}

public class QOpenGLContext: QObject, QOpenGLContext_ITF {
    public func QOpenGLContext_PTR() -> QOpenGLContext { callLocalFunction(l: ["", Pointer(), ___className, "QOpenGLContext_PTR"]) as! QOpenGLContext }
    public func ConnectAboutToBeDestroyed(f: @escaping () -> Void) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectAboutToBeDestroyed", "___REMOTE_CALLBACK___"], f: { (_: [Any]) -> Any in f() } as Any) }
    public func DisconnectAboutToBeDestroyed() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectAboutToBeDestroyed"]) }
    public func AboutToBeDestroyed() { _ = callLocalFunction(l: ["", Pointer(), ___className, "AboutToBeDestroyed"]) }
    public func AreSharing(first: QOpenGLContext_ITF? = nil, second: QOpenGLContext_ITF? = nil) -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "AreSharing", first as Any, second as Any]) as! Bool }
    public func Create() -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "Create"]) as! Bool }
    public func CurrentContext() -> QOpenGLContext { callLocalFunction(l: ["", Pointer(), ___className, "CurrentContext"]) as! QOpenGLContext }
    public func DefaultFramebufferObject() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "DefaultFramebufferObject"]) as! Float) }
    public func DoneCurrent() { _ = callLocalFunction(l: ["", Pointer(), ___className, "DoneCurrent"]) }
    public func ExtraFunctions() -> QOpenGLExtraFunctions { callLocalFunction(l: ["", Pointer(), ___className, "ExtraFunctions"]) as! QOpenGLExtraFunctions }
    public func Format() -> QSurfaceFormat { callLocalFunction(l: ["", Pointer(), ___className, "Format"]) as! QSurfaceFormat }
    public func Functions() -> QOpenGLFunctions { callLocalFunction(l: ["", Pointer(), ___className, "Functions"]) as! QOpenGLFunctions }
    public func GetProcAddress(procName: QByteArray_ITF? = nil) -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "GetProcAddress", procName as Any]) as! Float) }
    public func GetProcAddress2(procName: String) -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "GetProcAddress2", procName as Any]) as! Float) }
    public func GlobalShareContext() -> QOpenGLContext { callLocalFunction(l: ["", Pointer(), ___className, "GlobalShareContext"]) as! QOpenGLContext }
    public func HasExtension(extensi: QByteArray_ITF? = nil) -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "HasExtension", extensi as Any]) as! Bool }
    public func IsOpenGLES() -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "IsOpenGLES"]) as! Bool }
    public func IsValid() -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "IsValid"]) as! Bool }
    public func MakeCurrent(surface: QSurface_ITF? = nil) -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "MakeCurrent", surface as Any]) as! Bool }
    public func NativeHandle() -> QVariant { callLocalFunction(l: ["", Pointer(), ___className, "NativeHandle"]) as! QVariant }
    public func OpenGLModuleHandle() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "OpenGLModuleHandle"]) as! Float) }
    public func OpenGLModuleType() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "OpenGLModuleType"]) as! Float) }
    public func Screen() -> QScreen { callLocalFunction(l: ["", Pointer(), ___className, "Screen"]) as! QScreen }
    public func SetFormat(format: QSurfaceFormat_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetFormat", format as Any]) }
    public func SetNativeHandle(handle: QVariant_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetNativeHandle", handle as Any]) }
    public func SetScreen(screen: QScreen_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetScreen", screen as Any]) }
    public func SetShareContext(shareContext: QOpenGLContext_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetShareContext", shareContext as Any]) }
    public func ShareContext() -> QOpenGLContext { callLocalFunction(l: ["", Pointer(), ___className, "ShareContext"]) as! QOpenGLContext }
    public func ShareGroup() -> QOpenGLContextGroup { callLocalFunction(l: ["", Pointer(), ___className, "ShareGroup"]) as! QOpenGLContextGroup }
    public func SupportsThreadedOpenGL() -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "SupportsThreadedOpenGL"]) as! Bool }
    public func Surface() -> QSurface { callLocalFunction(l: ["", Pointer(), ___className, "Surface"]) as! QSurface }
    public func SwapBuffers(surface: QSurface_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SwapBuffers", surface as Any]) }
    public func VersionFunctions(versionProfile: QOpenGLVersionProfile_ITF? = nil) -> QAbstractOpenGLFunctions { callLocalFunction(l: ["", Pointer(), ___className, "VersionFunctions", versionProfile as Any]) as! QAbstractOpenGLFunctions }
    public func ConnectDestroyQOpenGLContext(f: @escaping () -> Void) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectDestroyQOpenGLContext", "___REMOTE_CALLBACK___"], f: { (_: [Any]) -> Any in f() } as Any) }
    public func DisconnectDestroyQOpenGLContext() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectDestroyQOpenGLContext"]) }
    public func DestroyQOpenGLContext() { _ = callLocalFunction(l: ["", Pointer(), ___className, "DestroyQOpenGLContext"]) }
    public func DestroyQOpenGLContextDefault() { _ = callLocalFunction(l: ["", Pointer(), ___className, "DestroyQOpenGLContextDefault"]) }
    override public func ChildEventDefault(event: QChildEvent_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "ChildEventDefault", event as Any]) }
    override public func ConnectNotifyDefault(sign: QMetaMethod_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "ConnectNotifyDefault", sign as Any]) }
    override public func CustomEventDefault(event: QEvent_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "CustomEventDefault", event as Any]) }
    override public func DeleteLaterDefault() { _ = callLocalFunction(l: ["", Pointer(), ___className, "DeleteLaterDefault"]) }
    override public func DisconnectNotifyDefault(sign: QMetaMethod_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "DisconnectNotifyDefault", sign as Any]) }
    override public func EventDefault(e: QEvent_ITF? = nil) -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "EventDefault", e as Any]) as! Bool }
    override public func EventFilterDefault(watched: QObject_ITF? = nil, event: QEvent_ITF? = nil) -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "EventFilterDefault", watched as Any, event as Any]) as! Bool }
    override public func MetaObjectDefault() -> QMetaObject { callLocalFunction(l: ["", Pointer(), ___className, "MetaObjectDefault"]) as! QMetaObject }
    override public func TimerEventDefault(event: QTimerEvent_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "TimerEventDefault", event as Any]) }
}

public func NewQOpenGLContextFromPointer(ptr: String) -> QOpenGLContext { let r = QOpenGLContext(); r.initFrom(p: ptr, n: "gui.QOpenGLContext"); return r }
public func NewQOpenGLContext(parent: QObject_ITF? = nil) -> QOpenGLContext { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.NewQOpenGLContext", "", parent as Any]) as! QOpenGLContext }
public func QOpenGLContext_AreSharing(first: QOpenGLContext_ITF? = nil, second: QOpenGLContext_ITF? = nil) -> Bool { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.QOpenGLContext_AreSharing", "", first as Any, second as Any]) as! Bool }
public func QOpenGLContext_CurrentContext() -> QOpenGLContext { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.QOpenGLContext_CurrentContext", ""]) as! QOpenGLContext }
public func QOpenGLContext_GlobalShareContext() -> QOpenGLContext { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.QOpenGLContext_GlobalShareContext", ""]) as! QOpenGLContext }
public func QOpenGLContext_OpenGLModuleHandle() -> Int { Gui.initModule(); return Int(callLocalFunction(l: ["", "", "gui.QOpenGLContext_OpenGLModuleHandle", ""]) as! Float) }
public func QOpenGLContext_OpenGLModuleType() -> Int { Gui.initModule(); return Int(callLocalFunction(l: ["", "", "gui.QOpenGLContext_OpenGLModuleType", ""]) as! Float) }
public func QOpenGLContext_SupportsThreadedOpenGL() -> Bool { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.QOpenGLContext_SupportsThreadedOpenGL", ""]) as! Bool }
public protocol QOpenGLContextGroup_ITF: QObject_ITF {
    func QOpenGLContextGroup_PTR() -> QOpenGLContextGroup
}

public class QOpenGLContextGroup: QObject, QOpenGLContextGroup_ITF {
    public func QOpenGLContextGroup_PTR() -> QOpenGLContextGroup { callLocalFunction(l: ["", Pointer(), ___className, "QOpenGLContextGroup_PTR"]) as! QOpenGLContextGroup }
    public func CurrentContextGroup() -> QOpenGLContextGroup { callLocalFunction(l: ["", Pointer(), ___className, "CurrentContextGroup"]) as! QOpenGLContextGroup }
    public func Shares() -> [QOpenGLContext] { callLocalFunction(l: ["", Pointer(), ___className, "Shares"]) as! [QOpenGLContext] }
    override public func ChildEventDefault(event: QChildEvent_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "ChildEventDefault", event as Any]) }
    override public func ConnectNotifyDefault(sign: QMetaMethod_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "ConnectNotifyDefault", sign as Any]) }
    override public func CustomEventDefault(event: QEvent_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "CustomEventDefault", event as Any]) }
    override public func DeleteLaterDefault() { _ = callLocalFunction(l: ["", Pointer(), ___className, "DeleteLaterDefault"]) }
    override public func DisconnectNotifyDefault(sign: QMetaMethod_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "DisconnectNotifyDefault", sign as Any]) }
    override public func EventDefault(e: QEvent_ITF? = nil) -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "EventDefault", e as Any]) as! Bool }
    override public func EventFilterDefault(watched: QObject_ITF? = nil, event: QEvent_ITF? = nil) -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "EventFilterDefault", watched as Any, event as Any]) as! Bool }
    override public func MetaObjectDefault() -> QMetaObject { callLocalFunction(l: ["", Pointer(), ___className, "MetaObjectDefault"]) as! QMetaObject }
    override public func TimerEventDefault(event: QTimerEvent_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "TimerEventDefault", event as Any]) }
}

public func NewQOpenGLContextGroupFromPointer(ptr: String) -> QOpenGLContextGroup { let r = QOpenGLContextGroup(); r.initFrom(p: ptr, n: "gui.QOpenGLContextGroup"); return r }
public func QOpenGLContextGroup_CurrentContextGroup() -> QOpenGLContextGroup { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.QOpenGLContextGroup_CurrentContextGroup", ""]) as! QOpenGLContextGroup }
public protocol QOpenGLDebugLogger_ITF: QObject_ITF {
    func QOpenGLDebugLogger_PTR() -> QOpenGLDebugLogger
}

public class QOpenGLDebugLogger: QObject, QOpenGLDebugLogger_ITF {
    public func QOpenGLDebugLogger_PTR() -> QOpenGLDebugLogger { callLocalFunction(l: ["", Pointer(), ___className, "QOpenGLDebugLogger_PTR"]) as! QOpenGLDebugLogger }
    public func DisableMessages(sources: Int, types: Int, severities: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "DisableMessages", sources as Any, types as Any, severities as Any]) }
    public func DisableMessages2(ids: [Int], sources: Int, types: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "DisableMessages2", ids as Any, sources as Any, types as Any]) }
    public func EnableMessages(sources: Int, types: Int, severities: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "EnableMessages", sources as Any, types as Any, severities as Any]) }
    public func EnableMessages2(ids: [Int], sources: Int, types: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "EnableMessages2", ids as Any, sources as Any, types as Any]) }
    public func Initialize() -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "Initialize"]) as! Bool }
    public func IsLogging() -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "IsLogging"]) as! Bool }
    public func ConnectLogMessage(f: @escaping (_ debugMessage: QOpenGLDebugMessage) -> Void) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectLogMessage", "___REMOTE_CALLBACK___"], f: { (inp: [Any]) -> Any in f(inp[0] as! QOpenGLDebugMessage) } as Any) }
    public func DisconnectLogMessage() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectLogMessage"]) }
    public func LogMessage(debugMessage: QOpenGLDebugMessage_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "LogMessage", debugMessage as Any]) }
    public func LogMessageDefault(debugMessage: QOpenGLDebugMessage_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "LogMessageDefault", debugMessage as Any]) }
    public func LoggedMessages() -> [QOpenGLDebugMessage] { callLocalFunction(l: ["", Pointer(), ___className, "LoggedMessages"]) as! [QOpenGLDebugMessage] }
    public func LoggingMode() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "LoggingMode"]) as! Float) }
    public func MaximumMessageLength() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "MaximumMessageLength"]) as! Float) }
    public func ConnectMessageLogged(f: @escaping (_ debugMessage: QOpenGLDebugMessage) -> Void) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectMessageLogged", "___REMOTE_CALLBACK___"], f: { (inp: [Any]) -> Any in f(inp[0] as! QOpenGLDebugMessage) } as Any) }
    public func DisconnectMessageLogged() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectMessageLogged"]) }
    public func MessageLogged(debugMessage: QOpenGLDebugMessage_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "MessageLogged", debugMessage as Any]) }
    public func PopGroup() { _ = callLocalFunction(l: ["", Pointer(), ___className, "PopGroup"]) }
    public func PushGroup(name: String, id: Int, source: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "PushGroup", name as Any, id as Any, source as Any]) }
    public func ConnectStartLogging(f: @escaping (_ loggingMode: Int) -> Void) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectStartLogging", "___REMOTE_CALLBACK___"], f: { (inp: [Any]) -> Any in f(Int(inp[0] as! Float)) } as Any) }
    public func DisconnectStartLogging() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectStartLogging"]) }
    public func StartLogging(loggingMode: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "StartLogging", loggingMode as Any]) }
    public func StartLoggingDefault(loggingMode: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "StartLoggingDefault", loggingMode as Any]) }
    public func ConnectStopLogging(f: @escaping () -> Void) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectStopLogging", "___REMOTE_CALLBACK___"], f: { (_: [Any]) -> Any in f() } as Any) }
    public func DisconnectStopLogging() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectStopLogging"]) }
    public func StopLogging() { _ = callLocalFunction(l: ["", Pointer(), ___className, "StopLogging"]) }
    public func StopLoggingDefault() { _ = callLocalFunction(l: ["", Pointer(), ___className, "StopLoggingDefault"]) }
    public func ConnectDestroyQOpenGLDebugLogger(f: @escaping () -> Void) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectDestroyQOpenGLDebugLogger", "___REMOTE_CALLBACK___"], f: { (_: [Any]) -> Any in f() } as Any) }
    public func DisconnectDestroyQOpenGLDebugLogger() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectDestroyQOpenGLDebugLogger"]) }
    public func DestroyQOpenGLDebugLogger() { _ = callLocalFunction(l: ["", Pointer(), ___className, "DestroyQOpenGLDebugLogger"]) }
    public func DestroyQOpenGLDebugLoggerDefault() { _ = callLocalFunction(l: ["", Pointer(), ___className, "DestroyQOpenGLDebugLoggerDefault"]) }
    override public func ChildEventDefault(event: QChildEvent_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "ChildEventDefault", event as Any]) }
    override public func ConnectNotifyDefault(sign: QMetaMethod_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "ConnectNotifyDefault", sign as Any]) }
    override public func CustomEventDefault(event: QEvent_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "CustomEventDefault", event as Any]) }
    override public func DeleteLaterDefault() { _ = callLocalFunction(l: ["", Pointer(), ___className, "DeleteLaterDefault"]) }
    override public func DisconnectNotifyDefault(sign: QMetaMethod_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "DisconnectNotifyDefault", sign as Any]) }
    override public func EventDefault(e: QEvent_ITF? = nil) -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "EventDefault", e as Any]) as! Bool }
    override public func EventFilterDefault(watched: QObject_ITF? = nil, event: QEvent_ITF? = nil) -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "EventFilterDefault", watched as Any, event as Any]) as! Bool }
    override public func MetaObjectDefault() -> QMetaObject { callLocalFunction(l: ["", Pointer(), ___className, "MetaObjectDefault"]) as! QMetaObject }
    override public func TimerEventDefault(event: QTimerEvent_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "TimerEventDefault", event as Any]) }
}

public func NewQOpenGLDebugLoggerFromPointer(ptr: String) -> QOpenGLDebugLogger { let r = QOpenGLDebugLogger(); r.initFrom(p: ptr, n: "gui.QOpenGLDebugLogger"); return r }
public func NewQOpenGLDebugLogger(parent: QObject_ITF? = nil) -> QOpenGLDebugLogger { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.NewQOpenGLDebugLogger", "", parent as Any]) as! QOpenGLDebugLogger }
public protocol QOpenGLDebugMessage_ITF {
    func QOpenGLDebugMessage_PTR() -> QOpenGLDebugMessage
}

public class QOpenGLDebugMessage: Internal, QOpenGLDebugMessage_ITF {
    public func QOpenGLDebugMessage_PTR() -> QOpenGLDebugMessage { callLocalFunction(l: ["", Pointer(), ___className, "QOpenGLDebugMessage_PTR"]) as! QOpenGLDebugMessage }
    public func CreateApplicationMessage(text: String, id: Int, severity: Int, ty: Int) -> QOpenGLDebugMessage { callLocalFunction(l: ["", Pointer(), ___className, "CreateApplicationMessage", text as Any, id as Any, severity as Any, ty as Any]) as! QOpenGLDebugMessage }
    public func CreateThirdPartyMessage(text: String, id: Int, severity: Int, ty: Int) -> QOpenGLDebugMessage { callLocalFunction(l: ["", Pointer(), ___className, "CreateThirdPartyMessage", text as Any, id as Any, severity as Any, ty as Any]) as! QOpenGLDebugMessage }
    public func Id() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "Id"]) as! Float) }
    public func Message() -> String { callLocalFunction(l: ["", Pointer(), ___className, "Message"]) as! String }
    public func Severity() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "Severity"]) as! Float) }
    public func Source() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "Source"]) as! Float) }
    public func Swap(debugMessage: QOpenGLDebugMessage_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "Swap", debugMessage as Any]) }
    public func Type() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "Type"]) as! Float) }
    public func DestroyQOpenGLDebugMessage() { _ = callLocalFunction(l: ["", Pointer(), ___className, "DestroyQOpenGLDebugMessage"]) }
}

public func NewQOpenGLDebugMessageFromPointer(ptr: String) -> QOpenGLDebugMessage { let r = QOpenGLDebugMessage(); r.initFrom(p: ptr, n: "gui.QOpenGLDebugMessage"); return r }
public func NewQOpenGLDebugMessage() -> QOpenGLDebugMessage { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.NewQOpenGLDebugMessage", ""]) as! QOpenGLDebugMessage }
public func NewQOpenGLDebugMessage2(debugMessage: QOpenGLDebugMessage_ITF? = nil) -> QOpenGLDebugMessage { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.NewQOpenGLDebugMessage2", "", debugMessage as Any]) as! QOpenGLDebugMessage }
public func QOpenGLDebugMessage_CreateApplicationMessage(text: String, id: Int, severity: Int, ty: Int) -> QOpenGLDebugMessage { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.QOpenGLDebugMessage_CreateApplicationMessage", "", text as Any, id as Any, severity as Any, ty as Any]) as! QOpenGLDebugMessage }
public func QOpenGLDebugMessage_CreateThirdPartyMessage(text: String, id: Int, severity: Int, ty: Int) -> QOpenGLDebugMessage { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.QOpenGLDebugMessage_CreateThirdPartyMessage", "", text as Any, id as Any, severity as Any, ty as Any]) as! QOpenGLDebugMessage }
public protocol QOpenGLExtraFunctions_ITF: QOpenGLFunctions_ITF {
    func QOpenGLExtraFunctions_PTR() -> QOpenGLExtraFunctions
}

public class QOpenGLExtraFunctions: QOpenGLFunctions, QOpenGLExtraFunctions_ITF {
    public func QOpenGLExtraFunctions_PTR() -> QOpenGLExtraFunctions { callLocalFunction(l: ["", Pointer(), ___className, "QOpenGLExtraFunctions_PTR"]) as! QOpenGLExtraFunctions }
    public func DestroyQOpenGLExtraFunctions() { _ = callLocalFunction(l: ["", Pointer(), ___className, "DestroyQOpenGLExtraFunctions"]) }
    public func GlActiveShaderProgram(pipeline: Int, program: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "GlActiveShaderProgram", pipeline as Any, program as Any]) }
    public func GlBeginQuery(target: Int, id: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "GlBeginQuery", target as Any, id as Any]) }
    public func GlBeginTransformFeedback(primitiveMode: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "GlBeginTransformFeedback", primitiveMode as Any]) }
    public func GlBindBufferBase(target: Int, index: Int, buffer: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "GlBindBufferBase", target as Any, index as Any, buffer as Any]) }
    public func GlBindImageTexture(unit: Int, texture: Int, level: Int, layered: Bool, layer: Int, access: Int, format: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "GlBindImageTexture", unit as Any, texture as Any, level as Any, layered as Any, layer as Any, access as Any, format as Any]) }
    public func GlBindProgramPipeline(pipeline: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "GlBindProgramPipeline", pipeline as Any]) }
    public func GlBindSampler(unit: Int, sampler: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "GlBindSampler", unit as Any, sampler as Any]) }
    public func GlBindTransformFeedback(target: Int, id: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "GlBindTransformFeedback", target as Any, id as Any]) }
    public func GlBindVertexArray(array: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "GlBindVertexArray", array as Any]) }
    public func GlBlendBarrier() { _ = callLocalFunction(l: ["", Pointer(), ___className, "GlBlendBarrier"]) }
    public func GlBlendEquationSeparatei(buf: Int, modeRGB: Int, modeAlpha: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "GlBlendEquationSeparatei", buf as Any, modeRGB as Any, modeAlpha as Any]) }
    public func GlBlendEquationi(buf: Int, mode: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "GlBlendEquationi", buf as Any, mode as Any]) }
    public func GlBlendFuncSeparatei(buf: Int, srcRGB: Int, dstRGB: Int, srcAlpha: Int, dstAlpha: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "GlBlendFuncSeparatei", buf as Any, srcRGB as Any, dstRGB as Any, srcAlpha as Any, dstAlpha as Any]) }
    public func GlBlendFunci(buf: Int, src: Int, dst: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "GlBlendFunci", buf as Any, src as Any, dst as Any]) }
    public func GlBlitFramebuffer(srcX0: Int, srcY0: Int, srcX1: Int, srcY1: Int, dstX0: Int, dstY0: Int, dstX1: Int, dstY1: Int, mask: Int, filter: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "GlBlitFramebuffer", srcX0 as Any, srcY0 as Any, srcX1 as Any, srcY1 as Any, dstX0 as Any, dstY0 as Any, dstX1 as Any, dstY1 as Any, mask as Any, filter as Any]) }
    public func GlClearBufferfi(buffer: Int, drawbuffer: Int, depth: Float, stencil: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "GlClearBufferfi", buffer as Any, drawbuffer as Any, depth as Any, stencil as Any]) }
    public func GlClearBufferfv(buffer: Int, drawbuffer: Int, value: Float) { _ = callLocalFunction(l: ["", Pointer(), ___className, "GlClearBufferfv", buffer as Any, drawbuffer as Any, value as Any]) }
    public func GlClearBufferiv(buffer: Int, drawbuffer: Int, value: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "GlClearBufferiv", buffer as Any, drawbuffer as Any, value as Any]) }
    public func GlClearBufferuiv(buffer: Int, drawbuffer: Int, value: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "GlClearBufferuiv", buffer as Any, drawbuffer as Any, value as Any]) }
    public func GlColorMaski(index: Int, r: Bool, g: Bool, b: Bool, a: Bool) { _ = callLocalFunction(l: ["", Pointer(), ___className, "GlColorMaski", index as Any, r as Any, g as Any, b as Any, a as Any]) }
    public func GlCompressedTexImage3D(target: Int, level: Int, internalformat: Int, width: Int, height: Int, depth: Int, border: Int, imageSize: Int, data: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "GlCompressedTexImage3D", target as Any, level as Any, internalformat as Any, width as Any, height as Any, depth as Any, border as Any, imageSize as Any, data as Any]) }
    public func GlCompressedTexSubImage3D(target: Int, level: Int, xoffset: Int, yoffset: Int, zoffset: Int, width: Int, height: Int, depth: Int, format: Int, imageSize: Int, data: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "GlCompressedTexSubImage3D", target as Any, level as Any, xoffset as Any, yoffset as Any, zoffset as Any, width as Any, height as Any, depth as Any, format as Any, imageSize as Any, data as Any]) }
    public func GlCopyImageSubData(srcName: Int, srcTarget: Int, srcLevel: Int, srcX: Int, srcY: Int, srcZ: Int, dstName: Int, dstTarget: Int, dstLevel: Int, dstX: Int, dstY: Int, dstZ: Int, srcWidth: Int, srcHeight: Int, srcDepth: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "GlCopyImageSubData", srcName as Any, srcTarget as Any, srcLevel as Any, srcX as Any, srcY as Any, srcZ as Any, dstName as Any, dstTarget as Any, dstLevel as Any, dstX as Any, dstY as Any, dstZ as Any, srcWidth as Any, srcHeight as Any, srcDepth as Any]) }
    public func GlCopyTexSubImage3D(target: Int, level: Int, xoffset: Int, yoffset: Int, zoffset: Int, x: Int, y: Int, width: Int, height: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "GlCopyTexSubImage3D", target as Any, level as Any, xoffset as Any, yoffset as Any, zoffset as Any, x as Any, y as Any, width as Any, height as Any]) }
    public func GlDebugMessageControl(source: Int, ty: Int, severity: Int, count: Int, ids: Int, enabled: Bool) { _ = callLocalFunction(l: ["", Pointer(), ___className, "GlDebugMessageControl", source as Any, ty as Any, severity as Any, count as Any, ids as Any, enabled as Any]) }
    public func GlDeleteProgramPipelines(n: Int, pipelines: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "GlDeleteProgramPipelines", n as Any, pipelines as Any]) }
    public func GlDeleteQueries(n: Int, ids: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "GlDeleteQueries", n as Any, ids as Any]) }
    public func GlDeleteSamplers(count: Int, samplers: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "GlDeleteSamplers", count as Any, samplers as Any]) }
    public func GlDeleteTransformFeedbacks(n: Int, ids: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "GlDeleteTransformFeedbacks", n as Any, ids as Any]) }
    public func GlDeleteVertexArrays(n: Int, arrays: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "GlDeleteVertexArrays", n as Any, arrays as Any]) }
    public func GlDisablei(target: Int, index: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "GlDisablei", target as Any, index as Any]) }
    public func GlDispatchCompute(num_groups_x: Int, num_groups_y: Int, num_groups_z: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "GlDispatchCompute", num_groups_x as Any, num_groups_y as Any, num_groups_z as Any]) }
    public func GlDrawArraysIndirect(mode: Int, indirect: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "GlDrawArraysIndirect", mode as Any, indirect as Any]) }
    public func GlDrawArraysInstanced(mode: Int, first: Int, count: Int, instancecount: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "GlDrawArraysInstanced", mode as Any, first as Any, count as Any, instancecount as Any]) }
    public func GlDrawBuffers(n: Int, bufs: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "GlDrawBuffers", n as Any, bufs as Any]) }
    public func GlDrawElementsBaseVertex(mode: Int, count: Int, ty: Int, indices: Int, basevertex: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "GlDrawElementsBaseVertex", mode as Any, count as Any, ty as Any, indices as Any, basevertex as Any]) }
    public func GlDrawElementsIndirect(mode: Int, ty: Int, indirect: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "GlDrawElementsIndirect", mode as Any, ty as Any, indirect as Any]) }
    public func GlDrawElementsInstanced(mode: Int, count: Int, ty: Int, indices: Int, instancecount: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "GlDrawElementsInstanced", mode as Any, count as Any, ty as Any, indices as Any, instancecount as Any]) }
    public func GlDrawElementsInstancedBaseVertex(mode: Int, count: Int, ty: Int, indices: Int, instancecount: Int, basevertex: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "GlDrawElementsInstancedBaseVertex", mode as Any, count as Any, ty as Any, indices as Any, instancecount as Any, basevertex as Any]) }
    public func GlDrawRangeElements(mode: Int, start: Int, end: Int, count: Int, ty: Int, indices: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "GlDrawRangeElements", mode as Any, start as Any, end as Any, count as Any, ty as Any, indices as Any]) }
    public func GlDrawRangeElementsBaseVertex(mode: Int, start: Int, end: Int, count: Int, ty: Int, indices: Int, basevertex: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "GlDrawRangeElementsBaseVertex", mode as Any, start as Any, end as Any, count as Any, ty as Any, indices as Any, basevertex as Any]) }
    public func GlEnablei(target: Int, index: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "GlEnablei", target as Any, index as Any]) }
    public func GlEndQuery(target: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "GlEndQuery", target as Any]) }
    public func GlEndTransformFeedback() { _ = callLocalFunction(l: ["", Pointer(), ___className, "GlEndTransformFeedback"]) }
    public func GlFramebufferParameteri(target: Int, pname: Int, param: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "GlFramebufferParameteri", target as Any, pname as Any, param as Any]) }
    public func GlFramebufferTexture(target: Int, attachment: Int, texture: Int, level: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "GlFramebufferTexture", target as Any, attachment as Any, texture as Any, level as Any]) }
    public func GlFramebufferTextureLayer(target: Int, attachment: Int, texture: Int, level: Int, layer: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "GlFramebufferTextureLayer", target as Any, attachment as Any, texture as Any, level as Any, layer as Any]) }
    public func GlGenProgramPipelines(n: Int, pipelines: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "GlGenProgramPipelines", n as Any, pipelines as Any]) }
    public func GlGenQueries(n: Int, ids: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "GlGenQueries", n as Any, ids as Any]) }
    public func GlGenSamplers(count: Int, samplers: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "GlGenSamplers", count as Any, samplers as Any]) }
    public func GlGenTransformFeedbacks(n: Int, ids: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "GlGenTransformFeedbacks", n as Any, ids as Any]) }
    public func GlGenVertexArrays(n: Int, arrays: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "GlGenVertexArrays", n as Any, arrays as Any]) }
    public func GlGetActiveUniformBlockiv(program: Int, uniformBlockIndex: Int, pname: Int, params: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "GlGetActiveUniformBlockiv", program as Any, uniformBlockIndex as Any, pname as Any, params as Any]) }
    public func GlGetActiveUniformsiv(program: Int, uniformCount: Int, uniformIndices: Int, pname: Int, params: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "GlGetActiveUniformsiv", program as Any, uniformCount as Any, uniformIndices as Any, pname as Any, params as Any]) }
    public func GlGetBooleani_v(target: Int, index: Int, data: Bool) { _ = callLocalFunction(l: ["", Pointer(), ___className, "GlGetBooleani_v", target as Any, index as Any, data as Any]) }
    public func GlGetBufferPointerv(target: Int, pname: Int, params: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "GlGetBufferPointerv", target as Any, pname as Any, params as Any]) }
    public func GlGetFramebufferParameteriv(target: Int, pname: Int, params: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "GlGetFramebufferParameteriv", target as Any, pname as Any, params as Any]) }
    public func GlGetGraphicsResetStatus() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "GlGetGraphicsResetStatus"]) as! Float) }
    public func GlGetIntegeri_v(target: Int, index: Int, data: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "GlGetIntegeri_v", target as Any, index as Any, data as Any]) }
    public func GlGetInternalformativ(target: Int, internalformat: Int, pname: Int, bufSize: Int, params: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "GlGetInternalformativ", target as Any, internalformat as Any, pname as Any, bufSize as Any, params as Any]) }
    public func GlGetMultisamplefv(pname: Int, index: Int, val: Float) { _ = callLocalFunction(l: ["", Pointer(), ___className, "GlGetMultisamplefv", pname as Any, index as Any, val as Any]) }
    public func GlGetPointerv(pname: Int, params: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "GlGetPointerv", pname as Any, params as Any]) }
    public func GlGetProgramBinary(program: Int, bufSize: Int, length: Int, binaryFormat: Int, binary: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "GlGetProgramBinary", program as Any, bufSize as Any, length as Any, binaryFormat as Any, binary as Any]) }
    public func GlGetProgramInterfaceiv(program: Int, programInterface: Int, pname: Int, params: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "GlGetProgramInterfaceiv", program as Any, programInterface as Any, pname as Any, params as Any]) }
    public func GlGetProgramPipelineiv(pipeline: Int, pname: Int, params: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "GlGetProgramPipelineiv", pipeline as Any, pname as Any, params as Any]) }
    public func GlGetProgramResourceiv(program: Int, programInterface: Int, index: Int, propCount: Int, props: Int, bufSize: Int, length: Int, params: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "GlGetProgramResourceiv", program as Any, programInterface as Any, index as Any, propCount as Any, props as Any, bufSize as Any, length as Any, params as Any]) }
    public func GlGetQueryObjectuiv(id: Int, pname: Int, params: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "GlGetQueryObjectuiv", id as Any, pname as Any, params as Any]) }
    public func GlGetQueryiv(target: Int, pname: Int, params: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "GlGetQueryiv", target as Any, pname as Any, params as Any]) }
    public func GlGetSamplerParameterIiv(sampler: Int, pname: Int, params: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "GlGetSamplerParameterIiv", sampler as Any, pname as Any, params as Any]) }
    public func GlGetSamplerParameterIuiv(sampler: Int, pname: Int, params: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "GlGetSamplerParameterIuiv", sampler as Any, pname as Any, params as Any]) }
    public func GlGetSamplerParameterfv(sampler: Int, pname: Int, params: Float) { _ = callLocalFunction(l: ["", Pointer(), ___className, "GlGetSamplerParameterfv", sampler as Any, pname as Any, params as Any]) }
    public func GlGetSamplerParameteriv(sampler: Int, pname: Int, params: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "GlGetSamplerParameteriv", sampler as Any, pname as Any, params as Any]) }
    public func GlGetStringi(name: Int, index: Int) -> String { callLocalFunction(l: ["", Pointer(), ___className, "GlGetStringi", name as Any, index as Any]) as! String }
    public func GlGetTexLevelParameterfv(target: Int, level: Int, pname: Int, params: Float) { _ = callLocalFunction(l: ["", Pointer(), ___className, "GlGetTexLevelParameterfv", target as Any, level as Any, pname as Any, params as Any]) }
    public func GlGetTexLevelParameteriv(target: Int, level: Int, pname: Int, params: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "GlGetTexLevelParameteriv", target as Any, level as Any, pname as Any, params as Any]) }
    public func GlGetTexParameterIiv(target: Int, pname: Int, params: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "GlGetTexParameterIiv", target as Any, pname as Any, params as Any]) }
    public func GlGetTexParameterIuiv(target: Int, pname: Int, params: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "GlGetTexParameterIuiv", target as Any, pname as Any, params as Any]) }
    public func GlGetUniformuiv(program: Int, location: Int, params: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "GlGetUniformuiv", program as Any, location as Any, params as Any]) }
    public func GlGetVertexAttribIiv(index: Int, pname: Int, params: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "GlGetVertexAttribIiv", index as Any, pname as Any, params as Any]) }
    public func GlGetVertexAttribIuiv(index: Int, pname: Int, params: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "GlGetVertexAttribIuiv", index as Any, pname as Any, params as Any]) }
    public func GlGetnUniformfv(program: Int, location: Int, bufSize: Int, params: Float) { _ = callLocalFunction(l: ["", Pointer(), ___className, "GlGetnUniformfv", program as Any, location as Any, bufSize as Any, params as Any]) }
    public func GlGetnUniformiv(program: Int, location: Int, bufSize: Int, params: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "GlGetnUniformiv", program as Any, location as Any, bufSize as Any, params as Any]) }
    public func GlGetnUniformuiv(program: Int, location: Int, bufSize: Int, params: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "GlGetnUniformuiv", program as Any, location as Any, bufSize as Any, params as Any]) }
    public func GlInvalidateFramebuffer(target: Int, numAttachments: Int, attachments: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "GlInvalidateFramebuffer", target as Any, numAttachments as Any, attachments as Any]) }
    public func GlInvalidateSubFramebuffer(target: Int, numAttachments: Int, attachments: Int, x: Int, y: Int, width: Int, height: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "GlInvalidateSubFramebuffer", target as Any, numAttachments as Any, attachments as Any, x as Any, y as Any, width as Any, height as Any]) }
    public func GlIsEnabledi(target: Int, index: Int) -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "GlIsEnabledi", target as Any, index as Any]) as! Bool }
    public func GlIsProgramPipeline(pipeline: Int) -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "GlIsProgramPipeline", pipeline as Any]) as! Bool }
    public func GlIsQuery(id: Int) -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "GlIsQuery", id as Any]) as! Bool }
    public func GlIsSampler(sampler: Int) -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "GlIsSampler", sampler as Any]) as! Bool }
    public func GlIsTransformFeedback(id: Int) -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "GlIsTransformFeedback", id as Any]) as! Bool }
    public func GlIsVertexArray(array: Int) -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "GlIsVertexArray", array as Any]) as! Bool }
    public func GlMemoryBarrier(barriers: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "GlMemoryBarrier", barriers as Any]) }
    public func GlMemoryBarrierByRegion(barriers: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "GlMemoryBarrierByRegion", barriers as Any]) }
    public func GlMinSampleShading(value: Float) { _ = callLocalFunction(l: ["", Pointer(), ___className, "GlMinSampleShading", value as Any]) }
    public func GlPatchParameteri(pname: Int, value: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "GlPatchParameteri", pname as Any, value as Any]) }
    public func GlPauseTransformFeedback() { _ = callLocalFunction(l: ["", Pointer(), ___className, "GlPauseTransformFeedback"]) }
    public func GlPopDebugGroup() { _ = callLocalFunction(l: ["", Pointer(), ___className, "GlPopDebugGroup"]) }
    public func GlPrimitiveBoundingBox(minX: Float, minY: Float, minZ: Float, minW: Float, maxX: Float, maxY: Float, maxZ: Float, maxW: Float) { _ = callLocalFunction(l: ["", Pointer(), ___className, "GlPrimitiveBoundingBox", minX as Any, minY as Any, minZ as Any, minW as Any, maxX as Any, maxY as Any, maxZ as Any, maxW as Any]) }
    public func GlProgramBinary(program: Int, binaryFormat: Int, binary: Int, length: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "GlProgramBinary", program as Any, binaryFormat as Any, binary as Any, length as Any]) }
    public func GlProgramParameteri(program: Int, pname: Int, value: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "GlProgramParameteri", program as Any, pname as Any, value as Any]) }
    public func GlProgramUniform1f(program: Int, location: Int, v0: Float) { _ = callLocalFunction(l: ["", Pointer(), ___className, "GlProgramUniform1f", program as Any, location as Any, v0 as Any]) }
    public func GlProgramUniform1fv(program: Int, location: Int, count: Int, value: Float) { _ = callLocalFunction(l: ["", Pointer(), ___className, "GlProgramUniform1fv", program as Any, location as Any, count as Any, value as Any]) }
    public func GlProgramUniform1i(program: Int, location: Int, v0: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "GlProgramUniform1i", program as Any, location as Any, v0 as Any]) }
    public func GlProgramUniform1iv(program: Int, location: Int, count: Int, value: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "GlProgramUniform1iv", program as Any, location as Any, count as Any, value as Any]) }
    public func GlProgramUniform1ui(program: Int, location: Int, v0: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "GlProgramUniform1ui", program as Any, location as Any, v0 as Any]) }
    public func GlProgramUniform1uiv(program: Int, location: Int, count: Int, value: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "GlProgramUniform1uiv", program as Any, location as Any, count as Any, value as Any]) }
    public func GlProgramUniform2f(program: Int, location: Int, v0: Float, v1: Float) { _ = callLocalFunction(l: ["", Pointer(), ___className, "GlProgramUniform2f", program as Any, location as Any, v0 as Any, v1 as Any]) }
    public func GlProgramUniform2fv(program: Int, location: Int, count: Int, value: Float) { _ = callLocalFunction(l: ["", Pointer(), ___className, "GlProgramUniform2fv", program as Any, location as Any, count as Any, value as Any]) }
    public func GlProgramUniform2i(program: Int, location: Int, v0: Int, v1: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "GlProgramUniform2i", program as Any, location as Any, v0 as Any, v1 as Any]) }
    public func GlProgramUniform2iv(program: Int, location: Int, count: Int, value: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "GlProgramUniform2iv", program as Any, location as Any, count as Any, value as Any]) }
    public func GlProgramUniform2ui(program: Int, location: Int, v0: Int, v1: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "GlProgramUniform2ui", program as Any, location as Any, v0 as Any, v1 as Any]) }
    public func GlProgramUniform2uiv(program: Int, location: Int, count: Int, value: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "GlProgramUniform2uiv", program as Any, location as Any, count as Any, value as Any]) }
    public func GlProgramUniform3f(program: Int, location: Int, v0: Float, v1: Float, v2: Float) { _ = callLocalFunction(l: ["", Pointer(), ___className, "GlProgramUniform3f", program as Any, location as Any, v0 as Any, v1 as Any, v2 as Any]) }
    public func GlProgramUniform3fv(program: Int, location: Int, count: Int, value: Float) { _ = callLocalFunction(l: ["", Pointer(), ___className, "GlProgramUniform3fv", program as Any, location as Any, count as Any, value as Any]) }
    public func GlProgramUniform3i(program: Int, location: Int, v0: Int, v1: Int, v2: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "GlProgramUniform3i", program as Any, location as Any, v0 as Any, v1 as Any, v2 as Any]) }
    public func GlProgramUniform3iv(program: Int, location: Int, count: Int, value: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "GlProgramUniform3iv", program as Any, location as Any, count as Any, value as Any]) }
    public func GlProgramUniform3ui(program: Int, location: Int, v0: Int, v1: Int, v2: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "GlProgramUniform3ui", program as Any, location as Any, v0 as Any, v1 as Any, v2 as Any]) }
    public func GlProgramUniform3uiv(program: Int, location: Int, count: Int, value: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "GlProgramUniform3uiv", program as Any, location as Any, count as Any, value as Any]) }
    public func GlProgramUniform4f(program: Int, location: Int, v0: Float, v1: Float, v2: Float, v3: Float) { _ = callLocalFunction(l: ["", Pointer(), ___className, "GlProgramUniform4f", program as Any, location as Any, v0 as Any, v1 as Any, v2 as Any, v3 as Any]) }
    public func GlProgramUniform4fv(program: Int, location: Int, count: Int, value: Float) { _ = callLocalFunction(l: ["", Pointer(), ___className, "GlProgramUniform4fv", program as Any, location as Any, count as Any, value as Any]) }
    public func GlProgramUniform4i(program: Int, location: Int, v0: Int, v1: Int, v2: Int, v3: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "GlProgramUniform4i", program as Any, location as Any, v0 as Any, v1 as Any, v2 as Any, v3 as Any]) }
    public func GlProgramUniform4iv(program: Int, location: Int, count: Int, value: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "GlProgramUniform4iv", program as Any, location as Any, count as Any, value as Any]) }
    public func GlProgramUniform4ui(program: Int, location: Int, v0: Int, v1: Int, v2: Int, v3: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "GlProgramUniform4ui", program as Any, location as Any, v0 as Any, v1 as Any, v2 as Any, v3 as Any]) }
    public func GlProgramUniform4uiv(program: Int, location: Int, count: Int, value: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "GlProgramUniform4uiv", program as Any, location as Any, count as Any, value as Any]) }
    public func GlProgramUniformMatrix2fv(program: Int, location: Int, count: Int, transpose: Bool, value: Float) { _ = callLocalFunction(l: ["", Pointer(), ___className, "GlProgramUniformMatrix2fv", program as Any, location as Any, count as Any, transpose as Any, value as Any]) }
    public func GlProgramUniformMatrix2x3fv(program: Int, location: Int, count: Int, transpose: Bool, value: Float) { _ = callLocalFunction(l: ["", Pointer(), ___className, "GlProgramUniformMatrix2x3fv", program as Any, location as Any, count as Any, transpose as Any, value as Any]) }
    public func GlProgramUniformMatrix2x4fv(program: Int, location: Int, count: Int, transpose: Bool, value: Float) { _ = callLocalFunction(l: ["", Pointer(), ___className, "GlProgramUniformMatrix2x4fv", program as Any, location as Any, count as Any, transpose as Any, value as Any]) }
    public func GlProgramUniformMatrix3fv(program: Int, location: Int, count: Int, transpose: Bool, value: Float) { _ = callLocalFunction(l: ["", Pointer(), ___className, "GlProgramUniformMatrix3fv", program as Any, location as Any, count as Any, transpose as Any, value as Any]) }
    public func GlProgramUniformMatrix3x2fv(program: Int, location: Int, count: Int, transpose: Bool, value: Float) { _ = callLocalFunction(l: ["", Pointer(), ___className, "GlProgramUniformMatrix3x2fv", program as Any, location as Any, count as Any, transpose as Any, value as Any]) }
    public func GlProgramUniformMatrix3x4fv(program: Int, location: Int, count: Int, transpose: Bool, value: Float) { _ = callLocalFunction(l: ["", Pointer(), ___className, "GlProgramUniformMatrix3x4fv", program as Any, location as Any, count as Any, transpose as Any, value as Any]) }
    public func GlProgramUniformMatrix4fv(program: Int, location: Int, count: Int, transpose: Bool, value: Float) { _ = callLocalFunction(l: ["", Pointer(), ___className, "GlProgramUniformMatrix4fv", program as Any, location as Any, count as Any, transpose as Any, value as Any]) }
    public func GlProgramUniformMatrix4x2fv(program: Int, location: Int, count: Int, transpose: Bool, value: Float) { _ = callLocalFunction(l: ["", Pointer(), ___className, "GlProgramUniformMatrix4x2fv", program as Any, location as Any, count as Any, transpose as Any, value as Any]) }
    public func GlProgramUniformMatrix4x3fv(program: Int, location: Int, count: Int, transpose: Bool, value: Float) { _ = callLocalFunction(l: ["", Pointer(), ___className, "GlProgramUniformMatrix4x3fv", program as Any, location as Any, count as Any, transpose as Any, value as Any]) }
    public func GlReadBuffer(src: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "GlReadBuffer", src as Any]) }
    public func GlReadnPixels(x: Int, y: Int, width: Int, height: Int, format: Int, ty: Int, bufSize: Int, data: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "GlReadnPixels", x as Any, y as Any, width as Any, height as Any, format as Any, ty as Any, bufSize as Any, data as Any]) }
    public func GlRenderbufferStorageMultisample(target: Int, samples: Int, internalformat: Int, width: Int, height: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "GlRenderbufferStorageMultisample", target as Any, samples as Any, internalformat as Any, width as Any, height as Any]) }
    public func GlResumeTransformFeedback() { _ = callLocalFunction(l: ["", Pointer(), ___className, "GlResumeTransformFeedback"]) }
    public func GlSampleMaski(maskNumber: Int, mask: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "GlSampleMaski", maskNumber as Any, mask as Any]) }
    public func GlSamplerParameterIiv(sampler: Int, pname: Int, param: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "GlSamplerParameterIiv", sampler as Any, pname as Any, param as Any]) }
    public func GlSamplerParameterIuiv(sampler: Int, pname: Int, param: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "GlSamplerParameterIuiv", sampler as Any, pname as Any, param as Any]) }
    public func GlSamplerParameterf(sampler: Int, pname: Int, param: Float) { _ = callLocalFunction(l: ["", Pointer(), ___className, "GlSamplerParameterf", sampler as Any, pname as Any, param as Any]) }
    public func GlSamplerParameterfv(sampler: Int, pname: Int, param: Float) { _ = callLocalFunction(l: ["", Pointer(), ___className, "GlSamplerParameterfv", sampler as Any, pname as Any, param as Any]) }
    public func GlSamplerParameteri(sampler: Int, pname: Int, param: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "GlSamplerParameteri", sampler as Any, pname as Any, param as Any]) }
    public func GlSamplerParameteriv(sampler: Int, pname: Int, param: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "GlSamplerParameteriv", sampler as Any, pname as Any, param as Any]) }
    public func GlTexBuffer(target: Int, internalformat: Int, buffer: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "GlTexBuffer", target as Any, internalformat as Any, buffer as Any]) }
    public func GlTexImage3D(target: Int, level: Int, internalformat: Int, width: Int, height: Int, depth: Int, border: Int, format: Int, ty: Int, pixels: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "GlTexImage3D", target as Any, level as Any, internalformat as Any, width as Any, height as Any, depth as Any, border as Any, format as Any, ty as Any, pixels as Any]) }
    public func GlTexParameterIiv(target: Int, pname: Int, params: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "GlTexParameterIiv", target as Any, pname as Any, params as Any]) }
    public func GlTexParameterIuiv(target: Int, pname: Int, params: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "GlTexParameterIuiv", target as Any, pname as Any, params as Any]) }
    public func GlTexStorage2D(target: Int, levels: Int, internalformat: Int, width: Int, height: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "GlTexStorage2D", target as Any, levels as Any, internalformat as Any, width as Any, height as Any]) }
    public func GlTexStorage2DMultisample(target: Int, samples: Int, internalformat: Int, width: Int, height: Int, fixedsamplelocations: Bool) { _ = callLocalFunction(l: ["", Pointer(), ___className, "GlTexStorage2DMultisample", target as Any, samples as Any, internalformat as Any, width as Any, height as Any, fixedsamplelocations as Any]) }
    public func GlTexStorage3D(target: Int, levels: Int, internalformat: Int, width: Int, height: Int, depth: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "GlTexStorage3D", target as Any, levels as Any, internalformat as Any, width as Any, height as Any, depth as Any]) }
    public func GlTexStorage3DMultisample(target: Int, samples: Int, internalformat: Int, width: Int, height: Int, depth: Int, fixedsamplelocations: Bool) { _ = callLocalFunction(l: ["", Pointer(), ___className, "GlTexStorage3DMultisample", target as Any, samples as Any, internalformat as Any, width as Any, height as Any, depth as Any, fixedsamplelocations as Any]) }
    public func GlTexSubImage3D(target: Int, level: Int, xoffset: Int, yoffset: Int, zoffset: Int, width: Int, height: Int, depth: Int, format: Int, ty: Int, pixels: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "GlTexSubImage3D", target as Any, level as Any, xoffset as Any, yoffset as Any, zoffset as Any, width as Any, height as Any, depth as Any, format as Any, ty as Any, pixels as Any]) }
    public func GlUniform1ui(location: Int, v0: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "GlUniform1ui", location as Any, v0 as Any]) }
    public func GlUniform1uiv(location: Int, count: Int, value: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "GlUniform1uiv", location as Any, count as Any, value as Any]) }
    public func GlUniform2ui(location: Int, v0: Int, v1: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "GlUniform2ui", location as Any, v0 as Any, v1 as Any]) }
    public func GlUniform2uiv(location: Int, count: Int, value: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "GlUniform2uiv", location as Any, count as Any, value as Any]) }
    public func GlUniform3ui(location: Int, v0: Int, v1: Int, v2: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "GlUniform3ui", location as Any, v0 as Any, v1 as Any, v2 as Any]) }
    public func GlUniform3uiv(location: Int, count: Int, value: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "GlUniform3uiv", location as Any, count as Any, value as Any]) }
    public func GlUniform4ui(location: Int, v0: Int, v1: Int, v2: Int, v3: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "GlUniform4ui", location as Any, v0 as Any, v1 as Any, v2 as Any, v3 as Any]) }
    public func GlUniform4uiv(location: Int, count: Int, value: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "GlUniform4uiv", location as Any, count as Any, value as Any]) }
    public func GlUniformBlockBinding(program: Int, uniformBlockIndex: Int, uniformBlockBinding: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "GlUniformBlockBinding", program as Any, uniformBlockIndex as Any, uniformBlockBinding as Any]) }
    public func GlUniformMatrix2x3fv(location: Int, count: Int, transpose: Bool, value: Float) { _ = callLocalFunction(l: ["", Pointer(), ___className, "GlUniformMatrix2x3fv", location as Any, count as Any, transpose as Any, value as Any]) }
    public func GlUniformMatrix2x4fv(location: Int, count: Int, transpose: Bool, value: Float) { _ = callLocalFunction(l: ["", Pointer(), ___className, "GlUniformMatrix2x4fv", location as Any, count as Any, transpose as Any, value as Any]) }
    public func GlUniformMatrix3x2fv(location: Int, count: Int, transpose: Bool, value: Float) { _ = callLocalFunction(l: ["", Pointer(), ___className, "GlUniformMatrix3x2fv", location as Any, count as Any, transpose as Any, value as Any]) }
    public func GlUniformMatrix3x4fv(location: Int, count: Int, transpose: Bool, value: Float) { _ = callLocalFunction(l: ["", Pointer(), ___className, "GlUniformMatrix3x4fv", location as Any, count as Any, transpose as Any, value as Any]) }
    public func GlUniformMatrix4x2fv(location: Int, count: Int, transpose: Bool, value: Float) { _ = callLocalFunction(l: ["", Pointer(), ___className, "GlUniformMatrix4x2fv", location as Any, count as Any, transpose as Any, value as Any]) }
    public func GlUniformMatrix4x3fv(location: Int, count: Int, transpose: Bool, value: Float) { _ = callLocalFunction(l: ["", Pointer(), ___className, "GlUniformMatrix4x3fv", location as Any, count as Any, transpose as Any, value as Any]) }
    public func GlUnmapBuffer(target: Int) -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "GlUnmapBuffer", target as Any]) as! Bool }
    public func GlUseProgramStages(pipeline: Int, stages: Int, program: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "GlUseProgramStages", pipeline as Any, stages as Any, program as Any]) }
    public func GlValidateProgramPipeline(pipeline: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "GlValidateProgramPipeline", pipeline as Any]) }
    public func GlVertexAttribBinding(attribindex: Int, bindingindex: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "GlVertexAttribBinding", attribindex as Any, bindingindex as Any]) }
    public func GlVertexAttribDivisor(index: Int, divisor: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "GlVertexAttribDivisor", index as Any, divisor as Any]) }
    public func GlVertexAttribFormat(attribindex: Int, size: Int, ty: Int, normalized: Bool, relativeoffset: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "GlVertexAttribFormat", attribindex as Any, size as Any, ty as Any, normalized as Any, relativeoffset as Any]) }
    public func GlVertexAttribI4i(index: Int, x: Int, y: Int, z: Int, w: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "GlVertexAttribI4i", index as Any, x as Any, y as Any, z as Any, w as Any]) }
    public func GlVertexAttribI4iv(index: Int, v: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "GlVertexAttribI4iv", index as Any, v as Any]) }
    public func GlVertexAttribI4ui(index: Int, x: Int, y: Int, z: Int, w: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "GlVertexAttribI4ui", index as Any, x as Any, y as Any, z as Any, w as Any]) }
    public func GlVertexAttribI4uiv(index: Int, v: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "GlVertexAttribI4uiv", index as Any, v as Any]) }
    public func GlVertexAttribIFormat(attribindex: Int, size: Int, ty: Int, relativeoffset: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "GlVertexAttribIFormat", attribindex as Any, size as Any, ty as Any, relativeoffset as Any]) }
    public func GlVertexAttribIPointer(index: Int, size: Int, ty: Int, stride: Int, pointer: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "GlVertexAttribIPointer", index as Any, size as Any, ty as Any, stride as Any, pointer as Any]) }
    public func GlVertexBindingDivisor(bindingindex: Int, divisor: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "GlVertexBindingDivisor", bindingindex as Any, divisor as Any]) }
}

public func NewQOpenGLExtraFunctionsFromPointer(ptr: String) -> QOpenGLExtraFunctions { let r = QOpenGLExtraFunctions(); r.initFrom(p: ptr, n: "gui.QOpenGLExtraFunctions"); return r }
public func NewQOpenGLExtraFunctions() -> QOpenGLExtraFunctions { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.NewQOpenGLExtraFunctions", ""]) as! QOpenGLExtraFunctions }
public func NewQOpenGLExtraFunctions2(context: QOpenGLContext_ITF? = nil) -> QOpenGLExtraFunctions { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.NewQOpenGLExtraFunctions2", "", context as Any]) as! QOpenGLExtraFunctions }
public protocol QOpenGLFramebufferObject_ITF {
    func QOpenGLFramebufferObject_PTR() -> QOpenGLFramebufferObject
}

public class QOpenGLFramebufferObject: Internal, QOpenGLFramebufferObject_ITF {
    public func QOpenGLFramebufferObject_PTR() -> QOpenGLFramebufferObject { callLocalFunction(l: ["", Pointer(), ___className, "QOpenGLFramebufferObject_PTR"]) as! QOpenGLFramebufferObject }
    public func AddColorAttachment(size: QSize_ITF? = nil, internalFormat: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "AddColorAttachment", size as Any, internalFormat as Any]) }
    public func AddColorAttachment2(width: Int, height: Int, internalFormat: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "AddColorAttachment2", width as Any, height as Any, internalFormat as Any]) }
    public func Attachment() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "Attachment"]) as! Float) }
    public func Bind() -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "Bind"]) as! Bool }
    public func BindDefault() -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "BindDefault"]) as! Bool }
    public func BlitFramebuffer(target: QOpenGLFramebufferObject_ITF? = nil, targetRect: QRect_ITF? = nil, source: QOpenGLFramebufferObject_ITF? = nil, sourceRect: QRect_ITF? = nil, buffers: Int, filter: Int, readColorAttachmentIndex: Int, drawColorAttachmentIndex: Int, restorePolicy: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "BlitFramebuffer", target as Any, targetRect as Any, source as Any, sourceRect as Any, buffers as Any, filter as Any, readColorAttachmentIndex as Any, drawColorAttachmentIndex as Any, restorePolicy as Any]) }
    public func BlitFramebuffer2(target: QOpenGLFramebufferObject_ITF? = nil, targetRect: QRect_ITF? = nil, source: QOpenGLFramebufferObject_ITF? = nil, sourceRect: QRect_ITF? = nil, buffers: Int, filter: Int, readColorAttachmentIndex: Int, drawColorAttachmentIndex: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "BlitFramebuffer2", target as Any, targetRect as Any, source as Any, sourceRect as Any, buffers as Any, filter as Any, readColorAttachmentIndex as Any, drawColorAttachmentIndex as Any]) }
    public func BlitFramebuffer3(target: QOpenGLFramebufferObject_ITF? = nil, targetRect: QRect_ITF? = nil, source: QOpenGLFramebufferObject_ITF? = nil, sourceRect: QRect_ITF? = nil, buffers: Int, filter: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "BlitFramebuffer3", target as Any, targetRect as Any, source as Any, sourceRect as Any, buffers as Any, filter as Any]) }
    public func BlitFramebuffer4(target: QOpenGLFramebufferObject_ITF? = nil, source: QOpenGLFramebufferObject_ITF? = nil, buffers: Int, filter: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "BlitFramebuffer4", target as Any, source as Any, buffers as Any, filter as Any]) }
    public func Format() -> QOpenGLFramebufferObjectFormat { callLocalFunction(l: ["", Pointer(), ___className, "Format"]) as! QOpenGLFramebufferObjectFormat }
    public func Handle() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "Handle"]) as! Float) }
    public func HasOpenGLFramebufferBlit() -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "HasOpenGLFramebufferBlit"]) as! Bool }
    public func HasOpenGLFramebufferObjects() -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "HasOpenGLFramebufferObjects"]) as! Bool }
    public func Height() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "Height"]) as! Float) }
    public func IsBound() -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "IsBound"]) as! Bool }
    public func IsValid() -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "IsValid"]) as! Bool }
    public func Release() -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "Release"]) as! Bool }
    public func SetAttachment(attachment: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetAttachment", attachment as Any]) }
    public func Size() -> QSize { callLocalFunction(l: ["", Pointer(), ___className, "Size"]) as! QSize }
    public func Sizes() -> [QSize] { callLocalFunction(l: ["", Pointer(), ___className, "Sizes"]) as! [QSize] }
    public func TakeTexture() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "TakeTexture"]) as! Float) }
    public func TakeTexture2(colorAttachmentIndex: Int) -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "TakeTexture2", colorAttachmentIndex as Any]) as! Float) }
    public func Texture() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "Texture"]) as! Float) }
    public func Textures() -> [Int] { callLocalFunction(l: ["", Pointer(), ___className, "Textures"]) as! [Int] }
    public func ToImage(flipped: Bool) -> QImage { callLocalFunction(l: ["", Pointer(), ___className, "ToImage", flipped as Any]) as! QImage }
    public func ToImage2() -> QImage { callLocalFunction(l: ["", Pointer(), ___className, "ToImage2"]) as! QImage }
    public func ToImage3(flipped: Bool, colorAttachmentIndex: Int) -> QImage { callLocalFunction(l: ["", Pointer(), ___className, "ToImage3", flipped as Any, colorAttachmentIndex as Any]) as! QImage }
    public func Width() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "Width"]) as! Float) }
    public func ConnectDestroyQOpenGLFramebufferObject(f: @escaping () -> Void) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectDestroyQOpenGLFramebufferObject", "___REMOTE_CALLBACK___"], f: { (_: [Any]) -> Any in f() } as Any) }
    public func DisconnectDestroyQOpenGLFramebufferObject() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectDestroyQOpenGLFramebufferObject"]) }
    public func DestroyQOpenGLFramebufferObject() { _ = callLocalFunction(l: ["", Pointer(), ___className, "DestroyQOpenGLFramebufferObject"]) }
    public func DestroyQOpenGLFramebufferObjectDefault() { _ = callLocalFunction(l: ["", Pointer(), ___className, "DestroyQOpenGLFramebufferObjectDefault"]) }
}

public func NewQOpenGLFramebufferObjectFromPointer(ptr: String) -> QOpenGLFramebufferObject { let r = QOpenGLFramebufferObject(); r.initFrom(p: ptr, n: "gui.QOpenGLFramebufferObject"); return r }
public func NewQOpenGLFramebufferObject(size: QSize_ITF? = nil, target: Int) -> QOpenGLFramebufferObject { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.NewQOpenGLFramebufferObject", "", size as Any, target as Any]) as! QOpenGLFramebufferObject }
public func NewQOpenGLFramebufferObject2(width: Int, height: Int, target: Int) -> QOpenGLFramebufferObject { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.NewQOpenGLFramebufferObject2", "", width as Any, height as Any, target as Any]) as! QOpenGLFramebufferObject }
public func NewQOpenGLFramebufferObject3(size: QSize_ITF? = nil, attachment: Int, target: Int, internalFormat: Int) -> QOpenGLFramebufferObject { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.NewQOpenGLFramebufferObject3", "", size as Any, attachment as Any, target as Any, internalFormat as Any]) as! QOpenGLFramebufferObject }
public func NewQOpenGLFramebufferObject4(width: Int, height: Int, attachment: Int, target: Int, internalFormat: Int) -> QOpenGLFramebufferObject { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.NewQOpenGLFramebufferObject4", "", width as Any, height as Any, attachment as Any, target as Any, internalFormat as Any]) as! QOpenGLFramebufferObject }
public func NewQOpenGLFramebufferObject5(size: QSize_ITF? = nil, format: QOpenGLFramebufferObjectFormat_ITF? = nil) -> QOpenGLFramebufferObject { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.NewQOpenGLFramebufferObject5", "", size as Any, format as Any]) as! QOpenGLFramebufferObject }
public func NewQOpenGLFramebufferObject6(width: Int, height: Int, format: QOpenGLFramebufferObjectFormat_ITF? = nil) -> QOpenGLFramebufferObject { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.NewQOpenGLFramebufferObject6", "", width as Any, height as Any, format as Any]) as! QOpenGLFramebufferObject }
public func QOpenGLFramebufferObject_BindDefault() -> Bool { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.QOpenGLFramebufferObject_BindDefault", ""]) as! Bool }
public func QOpenGLFramebufferObject_BlitFramebuffer(target: QOpenGLFramebufferObject_ITF? = nil, targetRect: QRect_ITF? = nil, source: QOpenGLFramebufferObject_ITF? = nil, sourceRect: QRect_ITF? = nil, buffers: Int, filter: Int, readColorAttachmentIndex: Int, drawColorAttachmentIndex: Int, restorePolicy: Int) { Gui.initModule(); _ = callLocalFunction(l: ["", "", "gui.QOpenGLFramebufferObject_BlitFramebuffer", "", target as Any, targetRect as Any, source as Any, sourceRect as Any, buffers as Any, filter as Any, readColorAttachmentIndex as Any, drawColorAttachmentIndex as Any, restorePolicy as Any]) }
public func QOpenGLFramebufferObject_BlitFramebuffer2(target: QOpenGLFramebufferObject_ITF? = nil, targetRect: QRect_ITF? = nil, source: QOpenGLFramebufferObject_ITF? = nil, sourceRect: QRect_ITF? = nil, buffers: Int, filter: Int, readColorAttachmentIndex: Int, drawColorAttachmentIndex: Int) { Gui.initModule(); _ = callLocalFunction(l: ["", "", "gui.QOpenGLFramebufferObject_BlitFramebuffer2", "", target as Any, targetRect as Any, source as Any, sourceRect as Any, buffers as Any, filter as Any, readColorAttachmentIndex as Any, drawColorAttachmentIndex as Any]) }
public func QOpenGLFramebufferObject_BlitFramebuffer3(target: QOpenGLFramebufferObject_ITF? = nil, targetRect: QRect_ITF? = nil, source: QOpenGLFramebufferObject_ITF? = nil, sourceRect: QRect_ITF? = nil, buffers: Int, filter: Int) { Gui.initModule(); _ = callLocalFunction(l: ["", "", "gui.QOpenGLFramebufferObject_BlitFramebuffer3", "", target as Any, targetRect as Any, source as Any, sourceRect as Any, buffers as Any, filter as Any]) }
public func QOpenGLFramebufferObject_BlitFramebuffer4(target: QOpenGLFramebufferObject_ITF? = nil, source: QOpenGLFramebufferObject_ITF? = nil, buffers: Int, filter: Int) { Gui.initModule(); _ = callLocalFunction(l: ["", "", "gui.QOpenGLFramebufferObject_BlitFramebuffer4", "", target as Any, source as Any, buffers as Any, filter as Any]) }
public func QOpenGLFramebufferObject_HasOpenGLFramebufferBlit() -> Bool { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.QOpenGLFramebufferObject_HasOpenGLFramebufferBlit", ""]) as! Bool }
public func QOpenGLFramebufferObject_HasOpenGLFramebufferObjects() -> Bool { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.QOpenGLFramebufferObject_HasOpenGLFramebufferObjects", ""]) as! Bool }
public protocol QOpenGLFramebufferObjectFormat_ITF {
    func QOpenGLFramebufferObjectFormat_PTR() -> QOpenGLFramebufferObjectFormat
}

public class QOpenGLFramebufferObjectFormat: Internal, QOpenGLFramebufferObjectFormat_ITF {
    public func QOpenGLFramebufferObjectFormat_PTR() -> QOpenGLFramebufferObjectFormat { callLocalFunction(l: ["", Pointer(), ___className, "QOpenGLFramebufferObjectFormat_PTR"]) as! QOpenGLFramebufferObjectFormat }
    public func Attachment() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "Attachment"]) as! Float) }
    public func InternalTextureFormat() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "InternalTextureFormat"]) as! Float) }
    public func Mipmap() -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "Mipmap"]) as! Bool }
    public func Samples() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "Samples"]) as! Float) }
    public func SetAttachment(attachment: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetAttachment", attachment as Any]) }
    public func SetInternalTextureFormat(internalTextureFormat: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetInternalTextureFormat", internalTextureFormat as Any]) }
    public func SetMipmap(enabled: Bool) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetMipmap", enabled as Any]) }
    public func SetSamples(samples: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetSamples", samples as Any]) }
    public func SetTextureTarget(target: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetTextureTarget", target as Any]) }
    public func TextureTarget() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "TextureTarget"]) as! Float) }
    public func DestroyQOpenGLFramebufferObjectFormat() { _ = callLocalFunction(l: ["", Pointer(), ___className, "DestroyQOpenGLFramebufferObjectFormat"]) }
}

public func NewQOpenGLFramebufferObjectFormatFromPointer(ptr: String) -> QOpenGLFramebufferObjectFormat { let r = QOpenGLFramebufferObjectFormat(); r.initFrom(p: ptr, n: "gui.QOpenGLFramebufferObjectFormat"); return r }
public func NewQOpenGLFramebufferObjectFormat() -> QOpenGLFramebufferObjectFormat { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.NewQOpenGLFramebufferObjectFormat", ""]) as! QOpenGLFramebufferObjectFormat }
public func NewQOpenGLFramebufferObjectFormat2(other: QOpenGLFramebufferObjectFormat_ITF? = nil) -> QOpenGLFramebufferObjectFormat { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.NewQOpenGLFramebufferObjectFormat2", "", other as Any]) as! QOpenGLFramebufferObjectFormat }
public protocol QOpenGLFunctions_ITF {
    func QOpenGLFunctions_PTR() -> QOpenGLFunctions
}

public class QOpenGLFunctions: Internal, QOpenGLFunctions_ITF {
    public func QOpenGLFunctions_PTR() -> QOpenGLFunctions { callLocalFunction(l: ["", Pointer(), ___className, "QOpenGLFunctions_PTR"]) as! QOpenGLFunctions }
    public func GlActiveTexture(texture: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "GlActiveTexture", texture as Any]) }
    public func GlAttachShader(program: Int, shader: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "GlAttachShader", program as Any, shader as Any]) }
    public func GlBindAttribLocation(program: Int, index: Int, name: String) { _ = callLocalFunction(l: ["", Pointer(), ___className, "GlBindAttribLocation", program as Any, index as Any, name as Any]) }
    public func GlBindBuffer(target: Int, buffer: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "GlBindBuffer", target as Any, buffer as Any]) }
    public func GlBindFramebuffer(target: Int, framebuffer: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "GlBindFramebuffer", target as Any, framebuffer as Any]) }
    public func GlBindRenderbuffer(target: Int, renderbuffer: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "GlBindRenderbuffer", target as Any, renderbuffer as Any]) }
    public func GlBindTexture(target: Int, texture: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "GlBindTexture", target as Any, texture as Any]) }
    public func GlBlendColor(red: Float, green: Float, blue: Float, alpha: Float) { _ = callLocalFunction(l: ["", Pointer(), ___className, "GlBlendColor", red as Any, green as Any, blue as Any, alpha as Any]) }
    public func GlBlendEquation(mode: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "GlBlendEquation", mode as Any]) }
    public func GlBlendEquationSeparate(modeRGB: Int, modeAlpha: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "GlBlendEquationSeparate", modeRGB as Any, modeAlpha as Any]) }
    public func GlBlendFunc(sfactor: Int, dfactor: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "GlBlendFunc", sfactor as Any, dfactor as Any]) }
    public func GlBlendFuncSeparate(srcRGB: Int, dstRGB: Int, srcAlpha: Int, dstAlpha: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "GlBlendFuncSeparate", srcRGB as Any, dstRGB as Any, srcAlpha as Any, dstAlpha as Any]) }
    public func GlCheckFramebufferStatus(target: Int) -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "GlCheckFramebufferStatus", target as Any]) as! Float) }
    public func GlClear(mask: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "GlClear", mask as Any]) }
    public func GlClearColor(red: Float, green: Float, blue: Float, alpha: Float) { _ = callLocalFunction(l: ["", Pointer(), ___className, "GlClearColor", red as Any, green as Any, blue as Any, alpha as Any]) }
    public func GlClearDepthf(depth: Float) { _ = callLocalFunction(l: ["", Pointer(), ___className, "GlClearDepthf", depth as Any]) }
    public func GlClearStencil(s: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "GlClearStencil", s as Any]) }
    public func GlColorMask(red: Bool, green: Bool, blue: Bool, alpha: Bool) { _ = callLocalFunction(l: ["", Pointer(), ___className, "GlColorMask", red as Any, green as Any, blue as Any, alpha as Any]) }
    public func GlCompileShader(shader: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "GlCompileShader", shader as Any]) }
    public func GlCompressedTexImage2D(target: Int, level: Int, internalformat: Int, width: Int, height: Int, border: Int, imageSize: Int, data: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "GlCompressedTexImage2D", target as Any, level as Any, internalformat as Any, width as Any, height as Any, border as Any, imageSize as Any, data as Any]) }
    public func GlCompressedTexSubImage2D(target: Int, level: Int, xoffset: Int, yoffset: Int, width: Int, height: Int, format: Int, imageSize: Int, data: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "GlCompressedTexSubImage2D", target as Any, level as Any, xoffset as Any, yoffset as Any, width as Any, height as Any, format as Any, imageSize as Any, data as Any]) }
    public func GlCopyTexImage2D(target: Int, level: Int, internalformat: Int, x: Int, y: Int, width: Int, height: Int, border: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "GlCopyTexImage2D", target as Any, level as Any, internalformat as Any, x as Any, y as Any, width as Any, height as Any, border as Any]) }
    public func GlCopyTexSubImage2D(target: Int, level: Int, xoffset: Int, yoffset: Int, x: Int, y: Int, width: Int, height: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "GlCopyTexSubImage2D", target as Any, level as Any, xoffset as Any, yoffset as Any, x as Any, y as Any, width as Any, height as Any]) }
    public func GlCreateProgram() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "GlCreateProgram"]) as! Float) }
    public func GlCreateShader(ty: Int) -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "GlCreateShader", ty as Any]) as! Float) }
    public func GlCullFace(mode: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "GlCullFace", mode as Any]) }
    public func GlDeleteBuffers(n: Int, buffers: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "GlDeleteBuffers", n as Any, buffers as Any]) }
    public func GlDeleteFramebuffers(n: Int, framebuffers: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "GlDeleteFramebuffers", n as Any, framebuffers as Any]) }
    public func GlDeleteProgram(program: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "GlDeleteProgram", program as Any]) }
    public func GlDeleteRenderbuffers(n: Int, renderbuffers: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "GlDeleteRenderbuffers", n as Any, renderbuffers as Any]) }
    public func GlDeleteShader(shader: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "GlDeleteShader", shader as Any]) }
    public func GlDeleteTextures(n: Int, textures: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "GlDeleteTextures", n as Any, textures as Any]) }
    public func GlDepthFunc(fu: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "GlDepthFunc", fu as Any]) }
    public func GlDepthMask(flag: Bool) { _ = callLocalFunction(l: ["", Pointer(), ___className, "GlDepthMask", flag as Any]) }
    public func GlDepthRangef(zNear: Float, zFar: Float) { _ = callLocalFunction(l: ["", Pointer(), ___className, "GlDepthRangef", zNear as Any, zFar as Any]) }
    public func GlDetachShader(program: Int, shader: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "GlDetachShader", program as Any, shader as Any]) }
    public func GlDisable(cap: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "GlDisable", cap as Any]) }
    public func GlDisableVertexAttribArray(index: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "GlDisableVertexAttribArray", index as Any]) }
    public func GlDrawArrays(mode: Int, first: Int, count: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "GlDrawArrays", mode as Any, first as Any, count as Any]) }
    public func GlDrawElements(mode: Int, count: Int, ty: Int, indices: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "GlDrawElements", mode as Any, count as Any, ty as Any, indices as Any]) }
    public func GlEnable(cap: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "GlEnable", cap as Any]) }
    public func GlEnableVertexAttribArray(index: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "GlEnableVertexAttribArray", index as Any]) }
    public func GlFinish() { _ = callLocalFunction(l: ["", Pointer(), ___className, "GlFinish"]) }
    public func GlFlush() { _ = callLocalFunction(l: ["", Pointer(), ___className, "GlFlush"]) }
    public func GlFramebufferRenderbuffer(target: Int, attachment: Int, renderbuffertarget: Int, renderbuffer: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "GlFramebufferRenderbuffer", target as Any, attachment as Any, renderbuffertarget as Any, renderbuffer as Any]) }
    public func GlFramebufferTexture2D(target: Int, attachment: Int, textarget: Int, texture: Int, level: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "GlFramebufferTexture2D", target as Any, attachment as Any, textarget as Any, texture as Any, level as Any]) }
    public func GlFrontFace(mode: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "GlFrontFace", mode as Any]) }
    public func GlGenBuffers(n: Int, buffers: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "GlGenBuffers", n as Any, buffers as Any]) }
    public func GlGenFramebuffers(n: Int, framebuffers: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "GlGenFramebuffers", n as Any, framebuffers as Any]) }
    public func GlGenRenderbuffers(n: Int, renderbuffers: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "GlGenRenderbuffers", n as Any, renderbuffers as Any]) }
    public func GlGenTextures(n: Int, textures: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "GlGenTextures", n as Any, textures as Any]) }
    public func GlGenerateMipmap(target: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "GlGenerateMipmap", target as Any]) }
    public func GlGetActiveAttrib(program: Int, index: Int, bufsize: Int, length: Int, size: Int, ty: Int, name: String) { _ = callLocalFunction(l: ["", Pointer(), ___className, "GlGetActiveAttrib", program as Any, index as Any, bufsize as Any, length as Any, size as Any, ty as Any, name as Any]) }
    public func GlGetActiveUniform(program: Int, index: Int, bufsize: Int, length: Int, size: Int, ty: Int, name: String) { _ = callLocalFunction(l: ["", Pointer(), ___className, "GlGetActiveUniform", program as Any, index as Any, bufsize as Any, length as Any, size as Any, ty as Any, name as Any]) }
    public func GlGetAttachedShaders(program: Int, maxcount: Int, count: Int, shaders: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "GlGetAttachedShaders", program as Any, maxcount as Any, count as Any, shaders as Any]) }
    public func GlGetAttribLocation(program: Int, name: String) -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "GlGetAttribLocation", program as Any, name as Any]) as! Float) }
    public func GlGetBooleanv(pname: Int, params: Bool) { _ = callLocalFunction(l: ["", Pointer(), ___className, "GlGetBooleanv", pname as Any, params as Any]) }
    public func GlGetBufferParameteriv(target: Int, pname: Int, params: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "GlGetBufferParameteriv", target as Any, pname as Any, params as Any]) }
    public func GlGetError() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "GlGetError"]) as! Float) }
    public func GlGetFloatv(pname: Int, params: Float) { _ = callLocalFunction(l: ["", Pointer(), ___className, "GlGetFloatv", pname as Any, params as Any]) }
    public func GlGetFramebufferAttachmentParameteriv(target: Int, attachment: Int, pname: Int, params: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "GlGetFramebufferAttachmentParameteriv", target as Any, attachment as Any, pname as Any, params as Any]) }
    public func GlGetIntegerv(pname: Int, params: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "GlGetIntegerv", pname as Any, params as Any]) }
    public func GlGetProgramInfoLog(program: Int, bufsize: Int, length: Int, infolog: String) { _ = callLocalFunction(l: ["", Pointer(), ___className, "GlGetProgramInfoLog", program as Any, bufsize as Any, length as Any, infolog as Any]) }
    public func GlGetProgramiv(program: Int, pname: Int, params: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "GlGetProgramiv", program as Any, pname as Any, params as Any]) }
    public func GlGetRenderbufferParameteriv(target: Int, pname: Int, params: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "GlGetRenderbufferParameteriv", target as Any, pname as Any, params as Any]) }
    public func GlGetShaderInfoLog(shader: Int, bufsize: Int, length: Int, infolog: String) { _ = callLocalFunction(l: ["", Pointer(), ___className, "GlGetShaderInfoLog", shader as Any, bufsize as Any, length as Any, infolog as Any]) }
    public func GlGetShaderPrecisionFormat(shadertype: Int, precisiontype: Int, ran: Int, precision: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "GlGetShaderPrecisionFormat", shadertype as Any, precisiontype as Any, ran as Any, precision as Any]) }
    public func GlGetShaderSource(shader: Int, bufsize: Int, length: Int, source: String) { _ = callLocalFunction(l: ["", Pointer(), ___className, "GlGetShaderSource", shader as Any, bufsize as Any, length as Any, source as Any]) }
    public func GlGetShaderiv(shader: Int, pname: Int, params: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "GlGetShaderiv", shader as Any, pname as Any, params as Any]) }
    public func GlGetString(name: Int) -> String { callLocalFunction(l: ["", Pointer(), ___className, "GlGetString", name as Any]) as! String }
    public func GlGetTexParameterfv(target: Int, pname: Int, params: Float) { _ = callLocalFunction(l: ["", Pointer(), ___className, "GlGetTexParameterfv", target as Any, pname as Any, params as Any]) }
    public func GlGetTexParameteriv(target: Int, pname: Int, params: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "GlGetTexParameteriv", target as Any, pname as Any, params as Any]) }
    public func GlGetUniformLocation(program: Int, name: String) -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "GlGetUniformLocation", program as Any, name as Any]) as! Float) }
    public func GlGetUniformfv(program: Int, location: Int, params: Float) { _ = callLocalFunction(l: ["", Pointer(), ___className, "GlGetUniformfv", program as Any, location as Any, params as Any]) }
    public func GlGetUniformiv(program: Int, location: Int, params: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "GlGetUniformiv", program as Any, location as Any, params as Any]) }
    public func GlGetVertexAttribPointerv(index: Int, pname: Int, pointer: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "GlGetVertexAttribPointerv", index as Any, pname as Any, pointer as Any]) }
    public func GlGetVertexAttribfv(index: Int, pname: Int, params: Float) { _ = callLocalFunction(l: ["", Pointer(), ___className, "GlGetVertexAttribfv", index as Any, pname as Any, params as Any]) }
    public func GlGetVertexAttribiv(index: Int, pname: Int, params: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "GlGetVertexAttribiv", index as Any, pname as Any, params as Any]) }
    public func GlHint(target: Int, mode: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "GlHint", target as Any, mode as Any]) }
    public func GlIsBuffer(buffer: Int) -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "GlIsBuffer", buffer as Any]) as! Bool }
    public func GlIsEnabled(cap: Int) -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "GlIsEnabled", cap as Any]) as! Bool }
    public func GlIsFramebuffer(framebuffer: Int) -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "GlIsFramebuffer", framebuffer as Any]) as! Bool }
    public func GlIsProgram(program: Int) -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "GlIsProgram", program as Any]) as! Bool }
    public func GlIsRenderbuffer(renderbuffer: Int) -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "GlIsRenderbuffer", renderbuffer as Any]) as! Bool }
    public func GlIsShader(shader: Int) -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "GlIsShader", shader as Any]) as! Bool }
    public func GlIsTexture(texture: Int) -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "GlIsTexture", texture as Any]) as! Bool }
    public func GlLineWidth(width: Float) { _ = callLocalFunction(l: ["", Pointer(), ___className, "GlLineWidth", width as Any]) }
    public func GlLinkProgram(program: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "GlLinkProgram", program as Any]) }
    public func GlPixelStorei(pname: Int, param: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "GlPixelStorei", pname as Any, param as Any]) }
    public func GlPolygonOffset(factor: Float, units: Float) { _ = callLocalFunction(l: ["", Pointer(), ___className, "GlPolygonOffset", factor as Any, units as Any]) }
    public func GlReadPixels(x: Int, y: Int, width: Int, height: Int, format: Int, ty: Int, pixels: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "GlReadPixels", x as Any, y as Any, width as Any, height as Any, format as Any, ty as Any, pixels as Any]) }
    public func GlReleaseShaderCompiler() { _ = callLocalFunction(l: ["", Pointer(), ___className, "GlReleaseShaderCompiler"]) }
    public func GlRenderbufferStorage(target: Int, internalformat: Int, width: Int, height: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "GlRenderbufferStorage", target as Any, internalformat as Any, width as Any, height as Any]) }
    public func GlSampleCoverage(value: Float, invert: Bool) { _ = callLocalFunction(l: ["", Pointer(), ___className, "GlSampleCoverage", value as Any, invert as Any]) }
    public func GlScissor(x: Int, y: Int, width: Int, height: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "GlScissor", x as Any, y as Any, width as Any, height as Any]) }
    public func GlShaderBinary(n: Int, shaders: Int, binaryformat: Int, binary: Int, length: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "GlShaderBinary", n as Any, shaders as Any, binaryformat as Any, binary as Any, length as Any]) }
    public func GlStencilFunc(fu: Int, ref: Int, mask: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "GlStencilFunc", fu as Any, ref as Any, mask as Any]) }
    public func GlStencilFuncSeparate(face: Int, fu: Int, ref: Int, mask: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "GlStencilFuncSeparate", face as Any, fu as Any, ref as Any, mask as Any]) }
    public func GlStencilMask(mask: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "GlStencilMask", mask as Any]) }
    public func GlStencilMaskSeparate(face: Int, mask: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "GlStencilMaskSeparate", face as Any, mask as Any]) }
    public func GlStencilOp(fail: Int, zfail: Int, zpass: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "GlStencilOp", fail as Any, zfail as Any, zpass as Any]) }
    public func GlStencilOpSeparate(face: Int, fail: Int, zfail: Int, zpass: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "GlStencilOpSeparate", face as Any, fail as Any, zfail as Any, zpass as Any]) }
    public func GlTexImage2D(target: Int, level: Int, internalformat: Int, width: Int, height: Int, border: Int, format: Int, ty: Int, pixels: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "GlTexImage2D", target as Any, level as Any, internalformat as Any, width as Any, height as Any, border as Any, format as Any, ty as Any, pixels as Any]) }
    public func GlTexParameterf(target: Int, pname: Int, param: Float) { _ = callLocalFunction(l: ["", Pointer(), ___className, "GlTexParameterf", target as Any, pname as Any, param as Any]) }
    public func GlTexParameterfv(target: Int, pname: Int, params: Float) { _ = callLocalFunction(l: ["", Pointer(), ___className, "GlTexParameterfv", target as Any, pname as Any, params as Any]) }
    public func GlTexParameteri(target: Int, pname: Int, param: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "GlTexParameteri", target as Any, pname as Any, param as Any]) }
    public func GlTexParameteriv(target: Int, pname: Int, params: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "GlTexParameteriv", target as Any, pname as Any, params as Any]) }
    public func GlTexSubImage2D(target: Int, level: Int, xoffset: Int, yoffset: Int, width: Int, height: Int, format: Int, ty: Int, pixels: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "GlTexSubImage2D", target as Any, level as Any, xoffset as Any, yoffset as Any, width as Any, height as Any, format as Any, ty as Any, pixels as Any]) }
    public func GlUniform1f(location: Int, x: Float) { _ = callLocalFunction(l: ["", Pointer(), ___className, "GlUniform1f", location as Any, x as Any]) }
    public func GlUniform1fv(location: Int, count: Int, v: Float) { _ = callLocalFunction(l: ["", Pointer(), ___className, "GlUniform1fv", location as Any, count as Any, v as Any]) }
    public func GlUniform1i(location: Int, x: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "GlUniform1i", location as Any, x as Any]) }
    public func GlUniform1iv(location: Int, count: Int, v: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "GlUniform1iv", location as Any, count as Any, v as Any]) }
    public func GlUniform2f(location: Int, x: Float, y: Float) { _ = callLocalFunction(l: ["", Pointer(), ___className, "GlUniform2f", location as Any, x as Any, y as Any]) }
    public func GlUniform2fv(location: Int, count: Int, v: Float) { _ = callLocalFunction(l: ["", Pointer(), ___className, "GlUniform2fv", location as Any, count as Any, v as Any]) }
    public func GlUniform2i(location: Int, x: Int, y: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "GlUniform2i", location as Any, x as Any, y as Any]) }
    public func GlUniform2iv(location: Int, count: Int, v: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "GlUniform2iv", location as Any, count as Any, v as Any]) }
    public func GlUniform3f(location: Int, x: Float, y: Float, z: Float) { _ = callLocalFunction(l: ["", Pointer(), ___className, "GlUniform3f", location as Any, x as Any, y as Any, z as Any]) }
    public func GlUniform3fv(location: Int, count: Int, v: Float) { _ = callLocalFunction(l: ["", Pointer(), ___className, "GlUniform3fv", location as Any, count as Any, v as Any]) }
    public func GlUniform3i(location: Int, x: Int, y: Int, z: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "GlUniform3i", location as Any, x as Any, y as Any, z as Any]) }
    public func GlUniform3iv(location: Int, count: Int, v: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "GlUniform3iv", location as Any, count as Any, v as Any]) }
    public func GlUniform4f(location: Int, x: Float, y: Float, z: Float, w: Float) { _ = callLocalFunction(l: ["", Pointer(), ___className, "GlUniform4f", location as Any, x as Any, y as Any, z as Any, w as Any]) }
    public func GlUniform4fv(location: Int, count: Int, v: Float) { _ = callLocalFunction(l: ["", Pointer(), ___className, "GlUniform4fv", location as Any, count as Any, v as Any]) }
    public func GlUniform4i(location: Int, x: Int, y: Int, z: Int, w: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "GlUniform4i", location as Any, x as Any, y as Any, z as Any, w as Any]) }
    public func GlUniform4iv(location: Int, count: Int, v: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "GlUniform4iv", location as Any, count as Any, v as Any]) }
    public func GlUniformMatrix2fv(location: Int, count: Int, transpose: Bool, value: Float) { _ = callLocalFunction(l: ["", Pointer(), ___className, "GlUniformMatrix2fv", location as Any, count as Any, transpose as Any, value as Any]) }
    public func GlUniformMatrix3fv(location: Int, count: Int, transpose: Bool, value: Float) { _ = callLocalFunction(l: ["", Pointer(), ___className, "GlUniformMatrix3fv", location as Any, count as Any, transpose as Any, value as Any]) }
    public func GlUniformMatrix4fv(location: Int, count: Int, transpose: Bool, value: Float) { _ = callLocalFunction(l: ["", Pointer(), ___className, "GlUniformMatrix4fv", location as Any, count as Any, transpose as Any, value as Any]) }
    public func GlUseProgram(program: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "GlUseProgram", program as Any]) }
    public func GlValidateProgram(program: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "GlValidateProgram", program as Any]) }
    public func GlVertexAttrib1f(indx: Int, x: Float) { _ = callLocalFunction(l: ["", Pointer(), ___className, "GlVertexAttrib1f", indx as Any, x as Any]) }
    public func GlVertexAttrib1fv(indx: Int, values: Float) { _ = callLocalFunction(l: ["", Pointer(), ___className, "GlVertexAttrib1fv", indx as Any, values as Any]) }
    public func GlVertexAttrib2f(indx: Int, x: Float, y: Float) { _ = callLocalFunction(l: ["", Pointer(), ___className, "GlVertexAttrib2f", indx as Any, x as Any, y as Any]) }
    public func GlVertexAttrib2fv(indx: Int, values: Float) { _ = callLocalFunction(l: ["", Pointer(), ___className, "GlVertexAttrib2fv", indx as Any, values as Any]) }
    public func GlVertexAttrib3f(indx: Int, x: Float, y: Float, z: Float) { _ = callLocalFunction(l: ["", Pointer(), ___className, "GlVertexAttrib3f", indx as Any, x as Any, y as Any, z as Any]) }
    public func GlVertexAttrib3fv(indx: Int, values: Float) { _ = callLocalFunction(l: ["", Pointer(), ___className, "GlVertexAttrib3fv", indx as Any, values as Any]) }
    public func GlVertexAttrib4f(indx: Int, x: Float, y: Float, z: Float, w: Float) { _ = callLocalFunction(l: ["", Pointer(), ___className, "GlVertexAttrib4f", indx as Any, x as Any, y as Any, z as Any, w as Any]) }
    public func GlVertexAttrib4fv(indx: Int, values: Float) { _ = callLocalFunction(l: ["", Pointer(), ___className, "GlVertexAttrib4fv", indx as Any, values as Any]) }
    public func GlVertexAttribPointer(indx: Int, size: Int, ty: Int, normalized: Bool, stride: Int, p: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "GlVertexAttribPointer", indx as Any, size as Any, ty as Any, normalized as Any, stride as Any, p as Any]) }
    public func GlViewport(x: Int, y: Int, width: Int, height: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "GlViewport", x as Any, y as Any, width as Any, height as Any]) }
    public func HasOpenGLFeature(feature: Int) -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "HasOpenGLFeature", feature as Any]) as! Bool }
    public func InitializeOpenGLFunctions() { _ = callLocalFunction(l: ["", Pointer(), ___className, "InitializeOpenGLFunctions"]) }
    public func OpenGLFeatures() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "OpenGLFeatures"]) as! Float) }
    public func DestroyQOpenGLFunctions() { _ = callLocalFunction(l: ["", Pointer(), ___className, "DestroyQOpenGLFunctions"]) }
}

public func NewQOpenGLFunctionsFromPointer(ptr: String) -> QOpenGLFunctions { let r = QOpenGLFunctions(); r.initFrom(p: ptr, n: "gui.QOpenGLFunctions"); return r }
public func NewQOpenGLFunctions() -> QOpenGLFunctions { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.NewQOpenGLFunctions", ""]) as! QOpenGLFunctions }
public func NewQOpenGLFunctions2(context: QOpenGLContext_ITF? = nil) -> QOpenGLFunctions { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.NewQOpenGLFunctions2", "", context as Any]) as! QOpenGLFunctions }
public protocol QOpenGLFunctions_1_0_ITF: QAbstractOpenGLFunctions_ITF {
    func QOpenGLFunctions_1_0_PTR() -> QOpenGLFunctions_1_0
}

public class QOpenGLFunctions_1_0: QAbstractOpenGLFunctions, QOpenGLFunctions_1_0_ITF {
    public func QOpenGLFunctions_1_0_PTR() -> QOpenGLFunctions_1_0 { callLocalFunction(l: ["", Pointer(), ___className, "QOpenGLFunctions_1_0_PTR"]) as! QOpenGLFunctions_1_0 }
    public func DestroyQOpenGLFunctions_1_0() { _ = callLocalFunction(l: ["", Pointer(), ___className, "DestroyQOpenGLFunctions_1_0"]) }
}

public protocol QOpenGLFunctions_1_0_CoreBackend_ITF: QOpenGLVersionFunctionsBackend_ITF {
    func QOpenGLFunctions_1_0_CoreBackend_PTR() -> QOpenGLFunctions_1_0_CoreBackend
}

public class QOpenGLFunctions_1_0_CoreBackend: QOpenGLVersionFunctionsBackend, QOpenGLFunctions_1_0_CoreBackend_ITF {
    public func QOpenGLFunctions_1_0_CoreBackend_PTR() -> QOpenGLFunctions_1_0_CoreBackend { callLocalFunction(l: ["", Pointer(), ___className, "QOpenGLFunctions_1_0_CoreBackend_PTR"]) as! QOpenGLFunctions_1_0_CoreBackend }
    public func DestroyQOpenGLFunctions_1_0_CoreBackend() { _ = callLocalFunction(l: ["", Pointer(), ___className, "DestroyQOpenGLFunctions_1_0_CoreBackend"]) }
}

public protocol QOpenGLFunctions_1_0_DeprecatedBackend_ITF: QOpenGLVersionFunctionsBackend_ITF {
    func QOpenGLFunctions_1_0_DeprecatedBackend_PTR() -> QOpenGLFunctions_1_0_DeprecatedBackend
}

public class QOpenGLFunctions_1_0_DeprecatedBackend: QOpenGLVersionFunctionsBackend, QOpenGLFunctions_1_0_DeprecatedBackend_ITF {
    public func QOpenGLFunctions_1_0_DeprecatedBackend_PTR() -> QOpenGLFunctions_1_0_DeprecatedBackend { callLocalFunction(l: ["", Pointer(), ___className, "QOpenGLFunctions_1_0_DeprecatedBackend_PTR"]) as! QOpenGLFunctions_1_0_DeprecatedBackend }
    public func DestroyQOpenGLFunctions_1_0_DeprecatedBackend() { _ = callLocalFunction(l: ["", Pointer(), ___className, "DestroyQOpenGLFunctions_1_0_DeprecatedBackend"]) }
}

public protocol QOpenGLFunctions_1_1_ITF: QAbstractOpenGLFunctions_ITF {
    func QOpenGLFunctions_1_1_PTR() -> QOpenGLFunctions_1_1
}

public class QOpenGLFunctions_1_1: QAbstractOpenGLFunctions, QOpenGLFunctions_1_1_ITF {
    public func QOpenGLFunctions_1_1_PTR() -> QOpenGLFunctions_1_1 { callLocalFunction(l: ["", Pointer(), ___className, "QOpenGLFunctions_1_1_PTR"]) as! QOpenGLFunctions_1_1 }
    public func DestroyQOpenGLFunctions_1_1() { _ = callLocalFunction(l: ["", Pointer(), ___className, "DestroyQOpenGLFunctions_1_1"]) }
}

public protocol QOpenGLFunctions_1_1_CoreBackend_ITF: QOpenGLVersionFunctionsBackend_ITF {
    func QOpenGLFunctions_1_1_CoreBackend_PTR() -> QOpenGLFunctions_1_1_CoreBackend
}

public class QOpenGLFunctions_1_1_CoreBackend: QOpenGLVersionFunctionsBackend, QOpenGLFunctions_1_1_CoreBackend_ITF {
    public func QOpenGLFunctions_1_1_CoreBackend_PTR() -> QOpenGLFunctions_1_1_CoreBackend { callLocalFunction(l: ["", Pointer(), ___className, "QOpenGLFunctions_1_1_CoreBackend_PTR"]) as! QOpenGLFunctions_1_1_CoreBackend }
    public func DestroyQOpenGLFunctions_1_1_CoreBackend() { _ = callLocalFunction(l: ["", Pointer(), ___className, "DestroyQOpenGLFunctions_1_1_CoreBackend"]) }
}

public protocol QOpenGLFunctions_1_1_DeprecatedBackend_ITF: QOpenGLVersionFunctionsBackend_ITF {
    func QOpenGLFunctions_1_1_DeprecatedBackend_PTR() -> QOpenGLFunctions_1_1_DeprecatedBackend
}

public class QOpenGLFunctions_1_1_DeprecatedBackend: QOpenGLVersionFunctionsBackend, QOpenGLFunctions_1_1_DeprecatedBackend_ITF {
    public func QOpenGLFunctions_1_1_DeprecatedBackend_PTR() -> QOpenGLFunctions_1_1_DeprecatedBackend { callLocalFunction(l: ["", Pointer(), ___className, "QOpenGLFunctions_1_1_DeprecatedBackend_PTR"]) as! QOpenGLFunctions_1_1_DeprecatedBackend }
    public func DestroyQOpenGLFunctions_1_1_DeprecatedBackend() { _ = callLocalFunction(l: ["", Pointer(), ___className, "DestroyQOpenGLFunctions_1_1_DeprecatedBackend"]) }
}

public protocol QOpenGLFunctions_1_2_ITF: QAbstractOpenGLFunctions_ITF {
    func QOpenGLFunctions_1_2_PTR() -> QOpenGLFunctions_1_2
}

public class QOpenGLFunctions_1_2: QAbstractOpenGLFunctions, QOpenGLFunctions_1_2_ITF {
    public func QOpenGLFunctions_1_2_PTR() -> QOpenGLFunctions_1_2 { callLocalFunction(l: ["", Pointer(), ___className, "QOpenGLFunctions_1_2_PTR"]) as! QOpenGLFunctions_1_2 }
    public func DestroyQOpenGLFunctions_1_2() { _ = callLocalFunction(l: ["", Pointer(), ___className, "DestroyQOpenGLFunctions_1_2"]) }
}

public protocol QOpenGLFunctions_1_2_CoreBackend_ITF: QOpenGLVersionFunctionsBackend_ITF {
    func QOpenGLFunctions_1_2_CoreBackend_PTR() -> QOpenGLFunctions_1_2_CoreBackend
}

public class QOpenGLFunctions_1_2_CoreBackend: QOpenGLVersionFunctionsBackend, QOpenGLFunctions_1_2_CoreBackend_ITF {
    public func QOpenGLFunctions_1_2_CoreBackend_PTR() -> QOpenGLFunctions_1_2_CoreBackend { callLocalFunction(l: ["", Pointer(), ___className, "QOpenGLFunctions_1_2_CoreBackend_PTR"]) as! QOpenGLFunctions_1_2_CoreBackend }
    public func DestroyQOpenGLFunctions_1_2_CoreBackend() { _ = callLocalFunction(l: ["", Pointer(), ___className, "DestroyQOpenGLFunctions_1_2_CoreBackend"]) }
}

public protocol QOpenGLFunctions_1_2_DeprecatedBackend_ITF: QOpenGLVersionFunctionsBackend_ITF {
    func QOpenGLFunctions_1_2_DeprecatedBackend_PTR() -> QOpenGLFunctions_1_2_DeprecatedBackend
}

public class QOpenGLFunctions_1_2_DeprecatedBackend: QOpenGLVersionFunctionsBackend, QOpenGLFunctions_1_2_DeprecatedBackend_ITF {
    public func QOpenGLFunctions_1_2_DeprecatedBackend_PTR() -> QOpenGLFunctions_1_2_DeprecatedBackend { callLocalFunction(l: ["", Pointer(), ___className, "QOpenGLFunctions_1_2_DeprecatedBackend_PTR"]) as! QOpenGLFunctions_1_2_DeprecatedBackend }
    public func DestroyQOpenGLFunctions_1_2_DeprecatedBackend() { _ = callLocalFunction(l: ["", Pointer(), ___className, "DestroyQOpenGLFunctions_1_2_DeprecatedBackend"]) }
}

public protocol QOpenGLFunctions_1_3_ITF: QAbstractOpenGLFunctions_ITF {
    func QOpenGLFunctions_1_3_PTR() -> QOpenGLFunctions_1_3
}

public class QOpenGLFunctions_1_3: QAbstractOpenGLFunctions, QOpenGLFunctions_1_3_ITF {
    public func QOpenGLFunctions_1_3_PTR() -> QOpenGLFunctions_1_3 { callLocalFunction(l: ["", Pointer(), ___className, "QOpenGLFunctions_1_3_PTR"]) as! QOpenGLFunctions_1_3 }
    public func DestroyQOpenGLFunctions_1_3() { _ = callLocalFunction(l: ["", Pointer(), ___className, "DestroyQOpenGLFunctions_1_3"]) }
}

public protocol QOpenGLFunctions_1_3_CoreBackend_ITF: QOpenGLVersionFunctionsBackend_ITF {
    func QOpenGLFunctions_1_3_CoreBackend_PTR() -> QOpenGLFunctions_1_3_CoreBackend
}

public class QOpenGLFunctions_1_3_CoreBackend: QOpenGLVersionFunctionsBackend, QOpenGLFunctions_1_3_CoreBackend_ITF {
    public func QOpenGLFunctions_1_3_CoreBackend_PTR() -> QOpenGLFunctions_1_3_CoreBackend { callLocalFunction(l: ["", Pointer(), ___className, "QOpenGLFunctions_1_3_CoreBackend_PTR"]) as! QOpenGLFunctions_1_3_CoreBackend }
    public func DestroyQOpenGLFunctions_1_3_CoreBackend() { _ = callLocalFunction(l: ["", Pointer(), ___className, "DestroyQOpenGLFunctions_1_3_CoreBackend"]) }
}

public protocol QOpenGLFunctions_1_3_DeprecatedBackend_ITF: QOpenGLVersionFunctionsBackend_ITF {
    func QOpenGLFunctions_1_3_DeprecatedBackend_PTR() -> QOpenGLFunctions_1_3_DeprecatedBackend
}

public class QOpenGLFunctions_1_3_DeprecatedBackend: QOpenGLVersionFunctionsBackend, QOpenGLFunctions_1_3_DeprecatedBackend_ITF {
    public func QOpenGLFunctions_1_3_DeprecatedBackend_PTR() -> QOpenGLFunctions_1_3_DeprecatedBackend { callLocalFunction(l: ["", Pointer(), ___className, "QOpenGLFunctions_1_3_DeprecatedBackend_PTR"]) as! QOpenGLFunctions_1_3_DeprecatedBackend }
    public func DestroyQOpenGLFunctions_1_3_DeprecatedBackend() { _ = callLocalFunction(l: ["", Pointer(), ___className, "DestroyQOpenGLFunctions_1_3_DeprecatedBackend"]) }
}

public protocol QOpenGLFunctions_1_4_ITF: QAbstractOpenGLFunctions_ITF {
    func QOpenGLFunctions_1_4_PTR() -> QOpenGLFunctions_1_4
}

public class QOpenGLFunctions_1_4: QAbstractOpenGLFunctions, QOpenGLFunctions_1_4_ITF {
    public func QOpenGLFunctions_1_4_PTR() -> QOpenGLFunctions_1_4 { callLocalFunction(l: ["", Pointer(), ___className, "QOpenGLFunctions_1_4_PTR"]) as! QOpenGLFunctions_1_4 }
    public func DestroyQOpenGLFunctions_1_4() { _ = callLocalFunction(l: ["", Pointer(), ___className, "DestroyQOpenGLFunctions_1_4"]) }
}

public protocol QOpenGLFunctions_1_4_CoreBackend_ITF: QOpenGLVersionFunctionsBackend_ITF {
    func QOpenGLFunctions_1_4_CoreBackend_PTR() -> QOpenGLFunctions_1_4_CoreBackend
}

public class QOpenGLFunctions_1_4_CoreBackend: QOpenGLVersionFunctionsBackend, QOpenGLFunctions_1_4_CoreBackend_ITF {
    public func QOpenGLFunctions_1_4_CoreBackend_PTR() -> QOpenGLFunctions_1_4_CoreBackend { callLocalFunction(l: ["", Pointer(), ___className, "QOpenGLFunctions_1_4_CoreBackend_PTR"]) as! QOpenGLFunctions_1_4_CoreBackend }
    public func DestroyQOpenGLFunctions_1_4_CoreBackend() { _ = callLocalFunction(l: ["", Pointer(), ___className, "DestroyQOpenGLFunctions_1_4_CoreBackend"]) }
}

public protocol QOpenGLFunctions_1_4_DeprecatedBackend_ITF: QOpenGLVersionFunctionsBackend_ITF {
    func QOpenGLFunctions_1_4_DeprecatedBackend_PTR() -> QOpenGLFunctions_1_4_DeprecatedBackend
}

public class QOpenGLFunctions_1_4_DeprecatedBackend: QOpenGLVersionFunctionsBackend, QOpenGLFunctions_1_4_DeprecatedBackend_ITF {
    public func QOpenGLFunctions_1_4_DeprecatedBackend_PTR() -> QOpenGLFunctions_1_4_DeprecatedBackend { callLocalFunction(l: ["", Pointer(), ___className, "QOpenGLFunctions_1_4_DeprecatedBackend_PTR"]) as! QOpenGLFunctions_1_4_DeprecatedBackend }
    public func DestroyQOpenGLFunctions_1_4_DeprecatedBackend() { _ = callLocalFunction(l: ["", Pointer(), ___className, "DestroyQOpenGLFunctions_1_4_DeprecatedBackend"]) }
}

public protocol QOpenGLFunctions_1_5_ITF: QAbstractOpenGLFunctions_ITF {
    func QOpenGLFunctions_1_5_PTR() -> QOpenGLFunctions_1_5
}

public class QOpenGLFunctions_1_5: QAbstractOpenGLFunctions, QOpenGLFunctions_1_5_ITF {
    public func QOpenGLFunctions_1_5_PTR() -> QOpenGLFunctions_1_5 { callLocalFunction(l: ["", Pointer(), ___className, "QOpenGLFunctions_1_5_PTR"]) as! QOpenGLFunctions_1_5 }
    public func DestroyQOpenGLFunctions_1_5() { _ = callLocalFunction(l: ["", Pointer(), ___className, "DestroyQOpenGLFunctions_1_5"]) }
}

public protocol QOpenGLFunctions_1_5_CoreBackend_ITF: QOpenGLVersionFunctionsBackend_ITF {
    func QOpenGLFunctions_1_5_CoreBackend_PTR() -> QOpenGLFunctions_1_5_CoreBackend
}

public class QOpenGLFunctions_1_5_CoreBackend: QOpenGLVersionFunctionsBackend, QOpenGLFunctions_1_5_CoreBackend_ITF {
    public func QOpenGLFunctions_1_5_CoreBackend_PTR() -> QOpenGLFunctions_1_5_CoreBackend { callLocalFunction(l: ["", Pointer(), ___className, "QOpenGLFunctions_1_5_CoreBackend_PTR"]) as! QOpenGLFunctions_1_5_CoreBackend }
    public func DestroyQOpenGLFunctions_1_5_CoreBackend() { _ = callLocalFunction(l: ["", Pointer(), ___className, "DestroyQOpenGLFunctions_1_5_CoreBackend"]) }
}

public protocol QOpenGLFunctions_2_0_ITF: QAbstractOpenGLFunctions_ITF {
    func QOpenGLFunctions_2_0_PTR() -> QOpenGLFunctions_2_0
}

public class QOpenGLFunctions_2_0: QAbstractOpenGLFunctions, QOpenGLFunctions_2_0_ITF {
    public func QOpenGLFunctions_2_0_PTR() -> QOpenGLFunctions_2_0 { callLocalFunction(l: ["", Pointer(), ___className, "QOpenGLFunctions_2_0_PTR"]) as! QOpenGLFunctions_2_0 }
    public func DestroyQOpenGLFunctions_2_0() { _ = callLocalFunction(l: ["", Pointer(), ___className, "DestroyQOpenGLFunctions_2_0"]) }
}

public protocol QOpenGLFunctions_2_0_CoreBackend_ITF: QOpenGLVersionFunctionsBackend_ITF {
    func QOpenGLFunctions_2_0_CoreBackend_PTR() -> QOpenGLFunctions_2_0_CoreBackend
}

public class QOpenGLFunctions_2_0_CoreBackend: QOpenGLVersionFunctionsBackend, QOpenGLFunctions_2_0_CoreBackend_ITF {
    public func QOpenGLFunctions_2_0_CoreBackend_PTR() -> QOpenGLFunctions_2_0_CoreBackend { callLocalFunction(l: ["", Pointer(), ___className, "QOpenGLFunctions_2_0_CoreBackend_PTR"]) as! QOpenGLFunctions_2_0_CoreBackend }
    public func DestroyQOpenGLFunctions_2_0_CoreBackend() { _ = callLocalFunction(l: ["", Pointer(), ___className, "DestroyQOpenGLFunctions_2_0_CoreBackend"]) }
}

public protocol QOpenGLFunctions_2_0_DeprecatedBackend_ITF: QOpenGLVersionFunctionsBackend_ITF {
    func QOpenGLFunctions_2_0_DeprecatedBackend_PTR() -> QOpenGLFunctions_2_0_DeprecatedBackend
}

public class QOpenGLFunctions_2_0_DeprecatedBackend: QOpenGLVersionFunctionsBackend, QOpenGLFunctions_2_0_DeprecatedBackend_ITF {
    public func QOpenGLFunctions_2_0_DeprecatedBackend_PTR() -> QOpenGLFunctions_2_0_DeprecatedBackend { callLocalFunction(l: ["", Pointer(), ___className, "QOpenGLFunctions_2_0_DeprecatedBackend_PTR"]) as! QOpenGLFunctions_2_0_DeprecatedBackend }
    public func DestroyQOpenGLFunctions_2_0_DeprecatedBackend() { _ = callLocalFunction(l: ["", Pointer(), ___className, "DestroyQOpenGLFunctions_2_0_DeprecatedBackend"]) }
}

public protocol QOpenGLFunctions_2_1_ITF: QAbstractOpenGLFunctions_ITF {
    func QOpenGLFunctions_2_1_PTR() -> QOpenGLFunctions_2_1
}

public class QOpenGLFunctions_2_1: QAbstractOpenGLFunctions, QOpenGLFunctions_2_1_ITF {
    public func QOpenGLFunctions_2_1_PTR() -> QOpenGLFunctions_2_1 { callLocalFunction(l: ["", Pointer(), ___className, "QOpenGLFunctions_2_1_PTR"]) as! QOpenGLFunctions_2_1 }
    public func DestroyQOpenGLFunctions_2_1() { _ = callLocalFunction(l: ["", Pointer(), ___className, "DestroyQOpenGLFunctions_2_1"]) }
}

public protocol QOpenGLFunctions_2_1_CoreBackend_ITF: QOpenGLVersionFunctionsBackend_ITF {
    func QOpenGLFunctions_2_1_CoreBackend_PTR() -> QOpenGLFunctions_2_1_CoreBackend
}

public class QOpenGLFunctions_2_1_CoreBackend: QOpenGLVersionFunctionsBackend, QOpenGLFunctions_2_1_CoreBackend_ITF {
    public func QOpenGLFunctions_2_1_CoreBackend_PTR() -> QOpenGLFunctions_2_1_CoreBackend { callLocalFunction(l: ["", Pointer(), ___className, "QOpenGLFunctions_2_1_CoreBackend_PTR"]) as! QOpenGLFunctions_2_1_CoreBackend }
    public func DestroyQOpenGLFunctions_2_1_CoreBackend() { _ = callLocalFunction(l: ["", Pointer(), ___className, "DestroyQOpenGLFunctions_2_1_CoreBackend"]) }
}

public protocol QOpenGLFunctions_3_0_ITF: QAbstractOpenGLFunctions_ITF {
    func QOpenGLFunctions_3_0_PTR() -> QOpenGLFunctions_3_0
}

public class QOpenGLFunctions_3_0: QAbstractOpenGLFunctions, QOpenGLFunctions_3_0_ITF {
    public func QOpenGLFunctions_3_0_PTR() -> QOpenGLFunctions_3_0 { callLocalFunction(l: ["", Pointer(), ___className, "QOpenGLFunctions_3_0_PTR"]) as! QOpenGLFunctions_3_0 }
    public func DestroyQOpenGLFunctions_3_0() { _ = callLocalFunction(l: ["", Pointer(), ___className, "DestroyQOpenGLFunctions_3_0"]) }
}

public protocol QOpenGLFunctions_3_0_CoreBackend_ITF: QOpenGLVersionFunctionsBackend_ITF {
    func QOpenGLFunctions_3_0_CoreBackend_PTR() -> QOpenGLFunctions_3_0_CoreBackend
}

public class QOpenGLFunctions_3_0_CoreBackend: QOpenGLVersionFunctionsBackend, QOpenGLFunctions_3_0_CoreBackend_ITF {
    public func QOpenGLFunctions_3_0_CoreBackend_PTR() -> QOpenGLFunctions_3_0_CoreBackend { callLocalFunction(l: ["", Pointer(), ___className, "QOpenGLFunctions_3_0_CoreBackend_PTR"]) as! QOpenGLFunctions_3_0_CoreBackend }
    public func DestroyQOpenGLFunctions_3_0_CoreBackend() { _ = callLocalFunction(l: ["", Pointer(), ___className, "DestroyQOpenGLFunctions_3_0_CoreBackend"]) }
}

public protocol QOpenGLFunctions_3_0_DeprecatedBackend_ITF: QOpenGLVersionFunctionsBackend_ITF {
    func QOpenGLFunctions_3_0_DeprecatedBackend_PTR() -> QOpenGLFunctions_3_0_DeprecatedBackend
}

public class QOpenGLFunctions_3_0_DeprecatedBackend: QOpenGLVersionFunctionsBackend, QOpenGLFunctions_3_0_DeprecatedBackend_ITF {
    public func QOpenGLFunctions_3_0_DeprecatedBackend_PTR() -> QOpenGLFunctions_3_0_DeprecatedBackend { callLocalFunction(l: ["", Pointer(), ___className, "QOpenGLFunctions_3_0_DeprecatedBackend_PTR"]) as! QOpenGLFunctions_3_0_DeprecatedBackend }
    public func DestroyQOpenGLFunctions_3_0_DeprecatedBackend() { _ = callLocalFunction(l: ["", Pointer(), ___className, "DestroyQOpenGLFunctions_3_0_DeprecatedBackend"]) }
}

public protocol QOpenGLFunctions_3_1_ITF: QAbstractOpenGLFunctions_ITF {
    func QOpenGLFunctions_3_1_PTR() -> QOpenGLFunctions_3_1
}

public class QOpenGLFunctions_3_1: QAbstractOpenGLFunctions, QOpenGLFunctions_3_1_ITF {
    public func QOpenGLFunctions_3_1_PTR() -> QOpenGLFunctions_3_1 { callLocalFunction(l: ["", Pointer(), ___className, "QOpenGLFunctions_3_1_PTR"]) as! QOpenGLFunctions_3_1 }
    public func DestroyQOpenGLFunctions_3_1() { _ = callLocalFunction(l: ["", Pointer(), ___className, "DestroyQOpenGLFunctions_3_1"]) }
}

public protocol QOpenGLFunctions_3_1_CoreBackend_ITF: QOpenGLVersionFunctionsBackend_ITF {
    func QOpenGLFunctions_3_1_CoreBackend_PTR() -> QOpenGLFunctions_3_1_CoreBackend
}

public class QOpenGLFunctions_3_1_CoreBackend: QOpenGLVersionFunctionsBackend, QOpenGLFunctions_3_1_CoreBackend_ITF {
    public func QOpenGLFunctions_3_1_CoreBackend_PTR() -> QOpenGLFunctions_3_1_CoreBackend { callLocalFunction(l: ["", Pointer(), ___className, "QOpenGLFunctions_3_1_CoreBackend_PTR"]) as! QOpenGLFunctions_3_1_CoreBackend }
    public func DestroyQOpenGLFunctions_3_1_CoreBackend() { _ = callLocalFunction(l: ["", Pointer(), ___className, "DestroyQOpenGLFunctions_3_1_CoreBackend"]) }
}

public protocol QOpenGLFunctions_3_2_Compatibility_ITF: QAbstractOpenGLFunctions_ITF {
    func QOpenGLFunctions_3_2_Compatibility_PTR() -> QOpenGLFunctions_3_2_Compatibility
}

public class QOpenGLFunctions_3_2_Compatibility: QAbstractOpenGLFunctions, QOpenGLFunctions_3_2_Compatibility_ITF {
    public func QOpenGLFunctions_3_2_Compatibility_PTR() -> QOpenGLFunctions_3_2_Compatibility { callLocalFunction(l: ["", Pointer(), ___className, "QOpenGLFunctions_3_2_Compatibility_PTR"]) as! QOpenGLFunctions_3_2_Compatibility }
    public func DestroyQOpenGLFunctions_3_2_Compatibility() { _ = callLocalFunction(l: ["", Pointer(), ___className, "DestroyQOpenGLFunctions_3_2_Compatibility"]) }
}

public protocol QOpenGLFunctions_3_2_Core_ITF: QAbstractOpenGLFunctions_ITF {
    func QOpenGLFunctions_3_2_Core_PTR() -> QOpenGLFunctions_3_2_Core
}

public class QOpenGLFunctions_3_2_Core: QAbstractOpenGLFunctions, QOpenGLFunctions_3_2_Core_ITF {
    public func QOpenGLFunctions_3_2_Core_PTR() -> QOpenGLFunctions_3_2_Core { callLocalFunction(l: ["", Pointer(), ___className, "QOpenGLFunctions_3_2_Core_PTR"]) as! QOpenGLFunctions_3_2_Core }
    public func DestroyQOpenGLFunctions_3_2_Core() { _ = callLocalFunction(l: ["", Pointer(), ___className, "DestroyQOpenGLFunctions_3_2_Core"]) }
}

public protocol QOpenGLFunctions_3_2_CoreBackend_ITF: QOpenGLVersionFunctionsBackend_ITF {
    func QOpenGLFunctions_3_2_CoreBackend_PTR() -> QOpenGLFunctions_3_2_CoreBackend
}

public class QOpenGLFunctions_3_2_CoreBackend: QOpenGLVersionFunctionsBackend, QOpenGLFunctions_3_2_CoreBackend_ITF {
    public func QOpenGLFunctions_3_2_CoreBackend_PTR() -> QOpenGLFunctions_3_2_CoreBackend { callLocalFunction(l: ["", Pointer(), ___className, "QOpenGLFunctions_3_2_CoreBackend_PTR"]) as! QOpenGLFunctions_3_2_CoreBackend }
    public func DestroyQOpenGLFunctions_3_2_CoreBackend() { _ = callLocalFunction(l: ["", Pointer(), ___className, "DestroyQOpenGLFunctions_3_2_CoreBackend"]) }
}

public protocol QOpenGLFunctions_3_3_Compatibility_ITF: QAbstractOpenGLFunctions_ITF {
    func QOpenGLFunctions_3_3_Compatibility_PTR() -> QOpenGLFunctions_3_3_Compatibility
}

public class QOpenGLFunctions_3_3_Compatibility: QAbstractOpenGLFunctions, QOpenGLFunctions_3_3_Compatibility_ITF {
    public func QOpenGLFunctions_3_3_Compatibility_PTR() -> QOpenGLFunctions_3_3_Compatibility { callLocalFunction(l: ["", Pointer(), ___className, "QOpenGLFunctions_3_3_Compatibility_PTR"]) as! QOpenGLFunctions_3_3_Compatibility }
    public func DestroyQOpenGLFunctions_3_3_Compatibility() { _ = callLocalFunction(l: ["", Pointer(), ___className, "DestroyQOpenGLFunctions_3_3_Compatibility"]) }
}

public protocol QOpenGLFunctions_3_3_Core_ITF: QAbstractOpenGLFunctions_ITF {
    func QOpenGLFunctions_3_3_Core_PTR() -> QOpenGLFunctions_3_3_Core
}

public class QOpenGLFunctions_3_3_Core: QAbstractOpenGLFunctions, QOpenGLFunctions_3_3_Core_ITF {
    public func QOpenGLFunctions_3_3_Core_PTR() -> QOpenGLFunctions_3_3_Core { callLocalFunction(l: ["", Pointer(), ___className, "QOpenGLFunctions_3_3_Core_PTR"]) as! QOpenGLFunctions_3_3_Core }
    public func DestroyQOpenGLFunctions_3_3_Core() { _ = callLocalFunction(l: ["", Pointer(), ___className, "DestroyQOpenGLFunctions_3_3_Core"]) }
}

public protocol QOpenGLFunctions_3_3_CoreBackend_ITF: QOpenGLVersionFunctionsBackend_ITF {
    func QOpenGLFunctions_3_3_CoreBackend_PTR() -> QOpenGLFunctions_3_3_CoreBackend
}

public class QOpenGLFunctions_3_3_CoreBackend: QOpenGLVersionFunctionsBackend, QOpenGLFunctions_3_3_CoreBackend_ITF {
    public func QOpenGLFunctions_3_3_CoreBackend_PTR() -> QOpenGLFunctions_3_3_CoreBackend { callLocalFunction(l: ["", Pointer(), ___className, "QOpenGLFunctions_3_3_CoreBackend_PTR"]) as! QOpenGLFunctions_3_3_CoreBackend }
    public func DestroyQOpenGLFunctions_3_3_CoreBackend() { _ = callLocalFunction(l: ["", Pointer(), ___className, "DestroyQOpenGLFunctions_3_3_CoreBackend"]) }
}

public protocol QOpenGLFunctions_3_3_DeprecatedBackend_ITF: QOpenGLVersionFunctionsBackend_ITF {
    func QOpenGLFunctions_3_3_DeprecatedBackend_PTR() -> QOpenGLFunctions_3_3_DeprecatedBackend
}

public class QOpenGLFunctions_3_3_DeprecatedBackend: QOpenGLVersionFunctionsBackend, QOpenGLFunctions_3_3_DeprecatedBackend_ITF {
    public func QOpenGLFunctions_3_3_DeprecatedBackend_PTR() -> QOpenGLFunctions_3_3_DeprecatedBackend { callLocalFunction(l: ["", Pointer(), ___className, "QOpenGLFunctions_3_3_DeprecatedBackend_PTR"]) as! QOpenGLFunctions_3_3_DeprecatedBackend }
    public func DestroyQOpenGLFunctions_3_3_DeprecatedBackend() { _ = callLocalFunction(l: ["", Pointer(), ___className, "DestroyQOpenGLFunctions_3_3_DeprecatedBackend"]) }
}

public protocol QOpenGLFunctions_4_0_Compatibility_ITF: QAbstractOpenGLFunctions_ITF {
    func QOpenGLFunctions_4_0_Compatibility_PTR() -> QOpenGLFunctions_4_0_Compatibility
}

public class QOpenGLFunctions_4_0_Compatibility: QAbstractOpenGLFunctions, QOpenGLFunctions_4_0_Compatibility_ITF {
    public func QOpenGLFunctions_4_0_Compatibility_PTR() -> QOpenGLFunctions_4_0_Compatibility { callLocalFunction(l: ["", Pointer(), ___className, "QOpenGLFunctions_4_0_Compatibility_PTR"]) as! QOpenGLFunctions_4_0_Compatibility }
    public func DestroyQOpenGLFunctions_4_0_Compatibility() { _ = callLocalFunction(l: ["", Pointer(), ___className, "DestroyQOpenGLFunctions_4_0_Compatibility"]) }
}

public protocol QOpenGLFunctions_4_0_Core_ITF: QAbstractOpenGLFunctions_ITF {
    func QOpenGLFunctions_4_0_Core_PTR() -> QOpenGLFunctions_4_0_Core
}

public class QOpenGLFunctions_4_0_Core: QAbstractOpenGLFunctions, QOpenGLFunctions_4_0_Core_ITF {
    public func QOpenGLFunctions_4_0_Core_PTR() -> QOpenGLFunctions_4_0_Core { callLocalFunction(l: ["", Pointer(), ___className, "QOpenGLFunctions_4_0_Core_PTR"]) as! QOpenGLFunctions_4_0_Core }
    public func DestroyQOpenGLFunctions_4_0_Core() { _ = callLocalFunction(l: ["", Pointer(), ___className, "DestroyQOpenGLFunctions_4_0_Core"]) }
}

public protocol QOpenGLFunctions_4_0_CoreBackend_ITF: QOpenGLVersionFunctionsBackend_ITF {
    func QOpenGLFunctions_4_0_CoreBackend_PTR() -> QOpenGLFunctions_4_0_CoreBackend
}

public class QOpenGLFunctions_4_0_CoreBackend: QOpenGLVersionFunctionsBackend, QOpenGLFunctions_4_0_CoreBackend_ITF {
    public func QOpenGLFunctions_4_0_CoreBackend_PTR() -> QOpenGLFunctions_4_0_CoreBackend { callLocalFunction(l: ["", Pointer(), ___className, "QOpenGLFunctions_4_0_CoreBackend_PTR"]) as! QOpenGLFunctions_4_0_CoreBackend }
    public func DestroyQOpenGLFunctions_4_0_CoreBackend() { _ = callLocalFunction(l: ["", Pointer(), ___className, "DestroyQOpenGLFunctions_4_0_CoreBackend"]) }
}

public protocol QOpenGLFunctions_4_1_Compatibility_ITF: QAbstractOpenGLFunctions_ITF {
    func QOpenGLFunctions_4_1_Compatibility_PTR() -> QOpenGLFunctions_4_1_Compatibility
}

public class QOpenGLFunctions_4_1_Compatibility: QAbstractOpenGLFunctions, QOpenGLFunctions_4_1_Compatibility_ITF {
    public func QOpenGLFunctions_4_1_Compatibility_PTR() -> QOpenGLFunctions_4_1_Compatibility { callLocalFunction(l: ["", Pointer(), ___className, "QOpenGLFunctions_4_1_Compatibility_PTR"]) as! QOpenGLFunctions_4_1_Compatibility }
    public func DestroyQOpenGLFunctions_4_1_Compatibility() { _ = callLocalFunction(l: ["", Pointer(), ___className, "DestroyQOpenGLFunctions_4_1_Compatibility"]) }
}

public protocol QOpenGLFunctions_4_1_Core_ITF: QAbstractOpenGLFunctions_ITF {
    func QOpenGLFunctions_4_1_Core_PTR() -> QOpenGLFunctions_4_1_Core
}

public class QOpenGLFunctions_4_1_Core: QAbstractOpenGLFunctions, QOpenGLFunctions_4_1_Core_ITF {
    public func QOpenGLFunctions_4_1_Core_PTR() -> QOpenGLFunctions_4_1_Core { callLocalFunction(l: ["", Pointer(), ___className, "QOpenGLFunctions_4_1_Core_PTR"]) as! QOpenGLFunctions_4_1_Core }
    public func DestroyQOpenGLFunctions_4_1_Core() { _ = callLocalFunction(l: ["", Pointer(), ___className, "DestroyQOpenGLFunctions_4_1_Core"]) }
}

public protocol QOpenGLFunctions_4_1_CoreBackend_ITF: QOpenGLVersionFunctionsBackend_ITF {
    func QOpenGLFunctions_4_1_CoreBackend_PTR() -> QOpenGLFunctions_4_1_CoreBackend
}

public class QOpenGLFunctions_4_1_CoreBackend: QOpenGLVersionFunctionsBackend, QOpenGLFunctions_4_1_CoreBackend_ITF {
    public func QOpenGLFunctions_4_1_CoreBackend_PTR() -> QOpenGLFunctions_4_1_CoreBackend { callLocalFunction(l: ["", Pointer(), ___className, "QOpenGLFunctions_4_1_CoreBackend_PTR"]) as! QOpenGLFunctions_4_1_CoreBackend }
    public func DestroyQOpenGLFunctions_4_1_CoreBackend() { _ = callLocalFunction(l: ["", Pointer(), ___className, "DestroyQOpenGLFunctions_4_1_CoreBackend"]) }
}

public protocol QOpenGLFunctions_4_2_Compatibility_ITF: QAbstractOpenGLFunctions_ITF {
    func QOpenGLFunctions_4_2_Compatibility_PTR() -> QOpenGLFunctions_4_2_Compatibility
}

public class QOpenGLFunctions_4_2_Compatibility: QAbstractOpenGLFunctions, QOpenGLFunctions_4_2_Compatibility_ITF {
    public func QOpenGLFunctions_4_2_Compatibility_PTR() -> QOpenGLFunctions_4_2_Compatibility { callLocalFunction(l: ["", Pointer(), ___className, "QOpenGLFunctions_4_2_Compatibility_PTR"]) as! QOpenGLFunctions_4_2_Compatibility }
    public func DestroyQOpenGLFunctions_4_2_Compatibility() { _ = callLocalFunction(l: ["", Pointer(), ___className, "DestroyQOpenGLFunctions_4_2_Compatibility"]) }
}

public protocol QOpenGLFunctions_4_2_Core_ITF: QAbstractOpenGLFunctions_ITF {
    func QOpenGLFunctions_4_2_Core_PTR() -> QOpenGLFunctions_4_2_Core
}

public class QOpenGLFunctions_4_2_Core: QAbstractOpenGLFunctions, QOpenGLFunctions_4_2_Core_ITF {
    public func QOpenGLFunctions_4_2_Core_PTR() -> QOpenGLFunctions_4_2_Core { callLocalFunction(l: ["", Pointer(), ___className, "QOpenGLFunctions_4_2_Core_PTR"]) as! QOpenGLFunctions_4_2_Core }
    public func DestroyQOpenGLFunctions_4_2_Core() { _ = callLocalFunction(l: ["", Pointer(), ___className, "DestroyQOpenGLFunctions_4_2_Core"]) }
}

public protocol QOpenGLFunctions_4_2_CoreBackend_ITF: QOpenGLVersionFunctionsBackend_ITF {
    func QOpenGLFunctions_4_2_CoreBackend_PTR() -> QOpenGLFunctions_4_2_CoreBackend
}

public class QOpenGLFunctions_4_2_CoreBackend: QOpenGLVersionFunctionsBackend, QOpenGLFunctions_4_2_CoreBackend_ITF {
    public func QOpenGLFunctions_4_2_CoreBackend_PTR() -> QOpenGLFunctions_4_2_CoreBackend { callLocalFunction(l: ["", Pointer(), ___className, "QOpenGLFunctions_4_2_CoreBackend_PTR"]) as! QOpenGLFunctions_4_2_CoreBackend }
    public func DestroyQOpenGLFunctions_4_2_CoreBackend() { _ = callLocalFunction(l: ["", Pointer(), ___className, "DestroyQOpenGLFunctions_4_2_CoreBackend"]) }
}

public protocol QOpenGLFunctions_4_3_Compatibility_ITF: QAbstractOpenGLFunctions_ITF {
    func QOpenGLFunctions_4_3_Compatibility_PTR() -> QOpenGLFunctions_4_3_Compatibility
}

public class QOpenGLFunctions_4_3_Compatibility: QAbstractOpenGLFunctions, QOpenGLFunctions_4_3_Compatibility_ITF {
    public func QOpenGLFunctions_4_3_Compatibility_PTR() -> QOpenGLFunctions_4_3_Compatibility { callLocalFunction(l: ["", Pointer(), ___className, "QOpenGLFunctions_4_3_Compatibility_PTR"]) as! QOpenGLFunctions_4_3_Compatibility }
    public func DestroyQOpenGLFunctions_4_3_Compatibility() { _ = callLocalFunction(l: ["", Pointer(), ___className, "DestroyQOpenGLFunctions_4_3_Compatibility"]) }
}

public protocol QOpenGLFunctions_4_3_Core_ITF: QAbstractOpenGLFunctions_ITF {
    func QOpenGLFunctions_4_3_Core_PTR() -> QOpenGLFunctions_4_3_Core
}

public class QOpenGLFunctions_4_3_Core: QAbstractOpenGLFunctions, QOpenGLFunctions_4_3_Core_ITF {
    public func QOpenGLFunctions_4_3_Core_PTR() -> QOpenGLFunctions_4_3_Core { callLocalFunction(l: ["", Pointer(), ___className, "QOpenGLFunctions_4_3_Core_PTR"]) as! QOpenGLFunctions_4_3_Core }
    public func DestroyQOpenGLFunctions_4_3_Core() { _ = callLocalFunction(l: ["", Pointer(), ___className, "DestroyQOpenGLFunctions_4_3_Core"]) }
}

public protocol QOpenGLFunctions_4_3_CoreBackend_ITF: QOpenGLVersionFunctionsBackend_ITF {
    func QOpenGLFunctions_4_3_CoreBackend_PTR() -> QOpenGLFunctions_4_3_CoreBackend
}

public class QOpenGLFunctions_4_3_CoreBackend: QOpenGLVersionFunctionsBackend, QOpenGLFunctions_4_3_CoreBackend_ITF {
    public func QOpenGLFunctions_4_3_CoreBackend_PTR() -> QOpenGLFunctions_4_3_CoreBackend { callLocalFunction(l: ["", Pointer(), ___className, "QOpenGLFunctions_4_3_CoreBackend_PTR"]) as! QOpenGLFunctions_4_3_CoreBackend }
    public func DestroyQOpenGLFunctions_4_3_CoreBackend() { _ = callLocalFunction(l: ["", Pointer(), ___className, "DestroyQOpenGLFunctions_4_3_CoreBackend"]) }
}

public protocol QOpenGLFunctions_4_4_Compatibility_ITF: QAbstractOpenGLFunctions_ITF {
    func QOpenGLFunctions_4_4_Compatibility_PTR() -> QOpenGLFunctions_4_4_Compatibility
}

public class QOpenGLFunctions_4_4_Compatibility: QAbstractOpenGLFunctions, QOpenGLFunctions_4_4_Compatibility_ITF {
    public func QOpenGLFunctions_4_4_Compatibility_PTR() -> QOpenGLFunctions_4_4_Compatibility { callLocalFunction(l: ["", Pointer(), ___className, "QOpenGLFunctions_4_4_Compatibility_PTR"]) as! QOpenGLFunctions_4_4_Compatibility }
    public func DestroyQOpenGLFunctions_4_4_Compatibility() { _ = callLocalFunction(l: ["", Pointer(), ___className, "DestroyQOpenGLFunctions_4_4_Compatibility"]) }
}

public protocol QOpenGLFunctions_4_4_Core_ITF: QAbstractOpenGLFunctions_ITF {
    func QOpenGLFunctions_4_4_Core_PTR() -> QOpenGLFunctions_4_4_Core
}

public class QOpenGLFunctions_4_4_Core: QAbstractOpenGLFunctions, QOpenGLFunctions_4_4_Core_ITF {
    public func QOpenGLFunctions_4_4_Core_PTR() -> QOpenGLFunctions_4_4_Core { callLocalFunction(l: ["", Pointer(), ___className, "QOpenGLFunctions_4_4_Core_PTR"]) as! QOpenGLFunctions_4_4_Core }
    public func DestroyQOpenGLFunctions_4_4_Core() { _ = callLocalFunction(l: ["", Pointer(), ___className, "DestroyQOpenGLFunctions_4_4_Core"]) }
}

public protocol QOpenGLFunctions_4_4_CoreBackend_ITF: QOpenGLVersionFunctionsBackend_ITF {
    func QOpenGLFunctions_4_4_CoreBackend_PTR() -> QOpenGLFunctions_4_4_CoreBackend
}

public class QOpenGLFunctions_4_4_CoreBackend: QOpenGLVersionFunctionsBackend, QOpenGLFunctions_4_4_CoreBackend_ITF {
    public func QOpenGLFunctions_4_4_CoreBackend_PTR() -> QOpenGLFunctions_4_4_CoreBackend { callLocalFunction(l: ["", Pointer(), ___className, "QOpenGLFunctions_4_4_CoreBackend_PTR"]) as! QOpenGLFunctions_4_4_CoreBackend }
    public func DestroyQOpenGLFunctions_4_4_CoreBackend() { _ = callLocalFunction(l: ["", Pointer(), ___className, "DestroyQOpenGLFunctions_4_4_CoreBackend"]) }
}

public protocol QOpenGLFunctions_4_5_Compatibility_ITF: QAbstractOpenGLFunctions_ITF {
    func QOpenGLFunctions_4_5_Compatibility_PTR() -> QOpenGLFunctions_4_5_Compatibility
}

public class QOpenGLFunctions_4_5_Compatibility: QAbstractOpenGLFunctions, QOpenGLFunctions_4_5_Compatibility_ITF {
    public func QOpenGLFunctions_4_5_Compatibility_PTR() -> QOpenGLFunctions_4_5_Compatibility { callLocalFunction(l: ["", Pointer(), ___className, "QOpenGLFunctions_4_5_Compatibility_PTR"]) as! QOpenGLFunctions_4_5_Compatibility }
    public func DestroyQOpenGLFunctions_4_5_Compatibility() { _ = callLocalFunction(l: ["", Pointer(), ___className, "DestroyQOpenGLFunctions_4_5_Compatibility"]) }
}

public protocol QOpenGLFunctions_4_5_Core_ITF: QAbstractOpenGLFunctions_ITF {
    func QOpenGLFunctions_4_5_Core_PTR() -> QOpenGLFunctions_4_5_Core
}

public class QOpenGLFunctions_4_5_Core: QAbstractOpenGLFunctions, QOpenGLFunctions_4_5_Core_ITF {
    public func QOpenGLFunctions_4_5_Core_PTR() -> QOpenGLFunctions_4_5_Core { callLocalFunction(l: ["", Pointer(), ___className, "QOpenGLFunctions_4_5_Core_PTR"]) as! QOpenGLFunctions_4_5_Core }
    public func DestroyQOpenGLFunctions_4_5_Core() { _ = callLocalFunction(l: ["", Pointer(), ___className, "DestroyQOpenGLFunctions_4_5_Core"]) }
}

public protocol QOpenGLFunctions_4_5_CoreBackend_ITF: QOpenGLVersionFunctionsBackend_ITF {
    func QOpenGLFunctions_4_5_CoreBackend_PTR() -> QOpenGLFunctions_4_5_CoreBackend
}

public class QOpenGLFunctions_4_5_CoreBackend: QOpenGLVersionFunctionsBackend, QOpenGLFunctions_4_5_CoreBackend_ITF {
    public func QOpenGLFunctions_4_5_CoreBackend_PTR() -> QOpenGLFunctions_4_5_CoreBackend { callLocalFunction(l: ["", Pointer(), ___className, "QOpenGLFunctions_4_5_CoreBackend_PTR"]) as! QOpenGLFunctions_4_5_CoreBackend }
    public func DestroyQOpenGLFunctions_4_5_CoreBackend() { _ = callLocalFunction(l: ["", Pointer(), ___className, "DestroyQOpenGLFunctions_4_5_CoreBackend"]) }
}

public protocol QOpenGLFunctions_4_5_DeprecatedBackend_ITF: QOpenGLVersionFunctionsBackend_ITF {
    func QOpenGLFunctions_4_5_DeprecatedBackend_PTR() -> QOpenGLFunctions_4_5_DeprecatedBackend
}

public class QOpenGLFunctions_4_5_DeprecatedBackend: QOpenGLVersionFunctionsBackend, QOpenGLFunctions_4_5_DeprecatedBackend_ITF {
    public func QOpenGLFunctions_4_5_DeprecatedBackend_PTR() -> QOpenGLFunctions_4_5_DeprecatedBackend { callLocalFunction(l: ["", Pointer(), ___className, "QOpenGLFunctions_4_5_DeprecatedBackend_PTR"]) as! QOpenGLFunctions_4_5_DeprecatedBackend }
    public func DestroyQOpenGLFunctions_4_5_DeprecatedBackend() { _ = callLocalFunction(l: ["", Pointer(), ___className, "DestroyQOpenGLFunctions_4_5_DeprecatedBackend"]) }
}

public protocol QOpenGLFunctions_ES2_ITF: QAbstractOpenGLFunctions_ITF {
    func QOpenGLFunctions_ES2_PTR() -> QOpenGLFunctions_ES2
}

public class QOpenGLFunctions_ES2: QAbstractOpenGLFunctions, QOpenGLFunctions_ES2_ITF {
    public func QOpenGLFunctions_ES2_PTR() -> QOpenGLFunctions_ES2 { callLocalFunction(l: ["", Pointer(), ___className, "QOpenGLFunctions_ES2_PTR"]) as! QOpenGLFunctions_ES2 }
    public func DestroyQOpenGLFunctions_ES2() { _ = callLocalFunction(l: ["", Pointer(), ___className, "DestroyQOpenGLFunctions_ES2"]) }
}

public protocol QOpenGLPaintDevice_ITF: QPaintDevice_ITF {
    func QOpenGLPaintDevice_PTR() -> QOpenGLPaintDevice
}

public class QOpenGLPaintDevice: QPaintDevice, QOpenGLPaintDevice_ITF {
    public func QOpenGLPaintDevice_PTR() -> QOpenGLPaintDevice { callLocalFunction(l: ["", Pointer(), ___className, "QOpenGLPaintDevice_PTR"]) as! QOpenGLPaintDevice }
    public func Context() -> QOpenGLContext { callLocalFunction(l: ["", Pointer(), ___className, "Context"]) as! QOpenGLContext }
    public func DotsPerMeterX() -> Float { callLocalFunction(l: ["", Pointer(), ___className, "DotsPerMeterX"]) as! Float }
    public func DotsPerMeterY() -> Float { callLocalFunction(l: ["", Pointer(), ___className, "DotsPerMeterY"]) as! Float }
    public func ConnectEnsureActiveTarget(f: @escaping () -> Void) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectEnsureActiveTarget", "___REMOTE_CALLBACK___"], f: { (_: [Any]) -> Any in f() } as Any) }
    public func DisconnectEnsureActiveTarget() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectEnsureActiveTarget"]) }
    public func EnsureActiveTarget() { _ = callLocalFunction(l: ["", Pointer(), ___className, "EnsureActiveTarget"]) }
    public func EnsureActiveTargetDefault() { _ = callLocalFunction(l: ["", Pointer(), ___className, "EnsureActiveTargetDefault"]) }
    override public func ConnectPaintEngine(f: @escaping () -> QPaintEngine) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectPaintEngine", "___REMOTE_CALLBACK___"], f: { (_: [Any]) -> Any in f() } as Any) }
    override public func DisconnectPaintEngine() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectPaintEngine"]) }
    override public func PaintEngine() -> QPaintEngine { callLocalFunction(l: ["", Pointer(), ___className, "PaintEngine"]) as! QPaintEngine }
    public func PaintEngineDefault() -> QPaintEngine { callLocalFunction(l: ["", Pointer(), ___className, "PaintEngineDefault"]) as! QPaintEngine }
    public func PaintFlipped() -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "PaintFlipped"]) as! Bool }
    public func SetDevicePixelRatio(devicePixelRatio: Float) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetDevicePixelRatio", devicePixelRatio as Any]) }
    public func SetDotsPerMeterX(dpmx: Float) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetDotsPerMeterX", dpmx as Any]) }
    public func SetDotsPerMeterY(dpmy: Float) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetDotsPerMeterY", dpmy as Any]) }
    public func SetPaintFlipped(flipped: Bool) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetPaintFlipped", flipped as Any]) }
    public func SetSize(size: QSize_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetSize", size as Any]) }
    public func Size() -> QSize { callLocalFunction(l: ["", Pointer(), ___className, "Size"]) as! QSize }
    public func ConnectDestroyQOpenGLPaintDevice(f: @escaping () -> Void) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectDestroyQOpenGLPaintDevice", "___REMOTE_CALLBACK___"], f: { (_: [Any]) -> Any in f() } as Any) }
    public func DisconnectDestroyQOpenGLPaintDevice() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectDestroyQOpenGLPaintDevice"]) }
    public func DestroyQOpenGLPaintDevice() { _ = callLocalFunction(l: ["", Pointer(), ___className, "DestroyQOpenGLPaintDevice"]) }
    public func DestroyQOpenGLPaintDeviceDefault() { _ = callLocalFunction(l: ["", Pointer(), ___className, "DestroyQOpenGLPaintDeviceDefault"]) }
}

public func NewQOpenGLPaintDeviceFromPointer(ptr: String) -> QOpenGLPaintDevice { let r = QOpenGLPaintDevice(); r.initFrom(p: ptr, n: "gui.QOpenGLPaintDevice"); return r }
public func NewQOpenGLPaintDevice() -> QOpenGLPaintDevice { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.NewQOpenGLPaintDevice", ""]) as! QOpenGLPaintDevice }
public func NewQOpenGLPaintDevice2(size: QSize_ITF? = nil) -> QOpenGLPaintDevice { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.NewQOpenGLPaintDevice2", "", size as Any]) as! QOpenGLPaintDevice }
public func NewQOpenGLPaintDevice3(width: Int, height: Int) -> QOpenGLPaintDevice { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.NewQOpenGLPaintDevice3", "", width as Any, height as Any]) as! QOpenGLPaintDevice }
public protocol QOpenGLPixelTransferOptions_ITF {
    func QOpenGLPixelTransferOptions_PTR() -> QOpenGLPixelTransferOptions
}

public class QOpenGLPixelTransferOptions: Internal, QOpenGLPixelTransferOptions_ITF {
    public func QOpenGLPixelTransferOptions_PTR() -> QOpenGLPixelTransferOptions { callLocalFunction(l: ["", Pointer(), ___className, "QOpenGLPixelTransferOptions_PTR"]) as! QOpenGLPixelTransferOptions }
    public func Alignment() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "Alignment"]) as! Float) }
    public func ImageHeight() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "ImageHeight"]) as! Float) }
    public func IsLeastSignificantBitFirst() -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "IsLeastSignificantBitFirst"]) as! Bool }
    public func IsSwapBytesEnabled() -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "IsSwapBytesEnabled"]) as! Bool }
    public func RowLength() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "RowLength"]) as! Float) }
    public func SetAlignment(alignment: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetAlignment", alignment as Any]) }
    public func SetImageHeight(imageHeight: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetImageHeight", imageHeight as Any]) }
    public func SetLeastSignificantByteFirst(lsbFirst: Bool) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetLeastSignificantByteFirst", lsbFirst as Any]) }
    public func SetRowLength(rowLength: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetRowLength", rowLength as Any]) }
    public func SetSkipImages(skipImages: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetSkipImages", skipImages as Any]) }
    public func SetSkipPixels(skipPixels: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetSkipPixels", skipPixels as Any]) }
    public func SetSkipRows(skipRows: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetSkipRows", skipRows as Any]) }
    public func SetSwapBytesEnabled(swapBytes: Bool) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetSwapBytesEnabled", swapBytes as Any]) }
    public func SkipImages() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "SkipImages"]) as! Float) }
    public func SkipPixels() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "SkipPixels"]) as! Float) }
    public func SkipRows() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "SkipRows"]) as! Float) }
    public func DestroyQOpenGLPixelTransferOptions() { _ = callLocalFunction(l: ["", Pointer(), ___className, "DestroyQOpenGLPixelTransferOptions"]) }
}

public func NewQOpenGLPixelTransferOptionsFromPointer(ptr: String) -> QOpenGLPixelTransferOptions { let r = QOpenGLPixelTransferOptions(); r.initFrom(p: ptr, n: "gui.QOpenGLPixelTransferOptions"); return r }
public func NewQOpenGLPixelTransferOptions() -> QOpenGLPixelTransferOptions { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.NewQOpenGLPixelTransferOptions", ""]) as! QOpenGLPixelTransferOptions }
public protocol QOpenGLShader_ITF: QObject_ITF {
    func QOpenGLShader_PTR() -> QOpenGLShader
}

public class QOpenGLShader: QObject, QOpenGLShader_ITF {
    public func QOpenGLShader_PTR() -> QOpenGLShader { callLocalFunction(l: ["", Pointer(), ___className, "QOpenGLShader_PTR"]) as! QOpenGLShader }
    public func CompileSourceCode(source: String) -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "CompileSourceCode", source as Any]) as! Bool }
    public func CompileSourceCode2(source: QByteArray_ITF? = nil) -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "CompileSourceCode2", source as Any]) as! Bool }
    public func CompileSourceCode3(source: String) -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "CompileSourceCode3", source as Any]) as! Bool }
    public func CompileSourceFile(fileName: String) -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "CompileSourceFile", fileName as Any]) as! Bool }
    public func HasOpenGLShaders(ty: Int, context: QOpenGLContext_ITF? = nil) -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "HasOpenGLShaders", ty as Any, context as Any]) as! Bool }
    public func IsCompiled() -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "IsCompiled"]) as! Bool }
    public func Log() -> String { callLocalFunction(l: ["", Pointer(), ___className, "Log"]) as! String }
    public func ShaderId() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "ShaderId"]) as! Float) }
    public func ShaderType() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "ShaderType"]) as! Float) }
    public func SourceCode() -> QByteArray { callLocalFunction(l: ["", Pointer(), ___className, "SourceCode"]) as! QByteArray }
    public func ConnectDestroyQOpenGLShader(f: @escaping () -> Void) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectDestroyQOpenGLShader", "___REMOTE_CALLBACK___"], f: { (_: [Any]) -> Any in f() } as Any) }
    public func DisconnectDestroyQOpenGLShader() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectDestroyQOpenGLShader"]) }
    public func DestroyQOpenGLShader() { _ = callLocalFunction(l: ["", Pointer(), ___className, "DestroyQOpenGLShader"]) }
    public func DestroyQOpenGLShaderDefault() { _ = callLocalFunction(l: ["", Pointer(), ___className, "DestroyQOpenGLShaderDefault"]) }
    override public func ChildEventDefault(event: QChildEvent_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "ChildEventDefault", event as Any]) }
    override public func ConnectNotifyDefault(sign: QMetaMethod_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "ConnectNotifyDefault", sign as Any]) }
    override public func CustomEventDefault(event: QEvent_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "CustomEventDefault", event as Any]) }
    override public func DeleteLaterDefault() { _ = callLocalFunction(l: ["", Pointer(), ___className, "DeleteLaterDefault"]) }
    override public func DisconnectNotifyDefault(sign: QMetaMethod_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "DisconnectNotifyDefault", sign as Any]) }
    override public func EventDefault(e: QEvent_ITF? = nil) -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "EventDefault", e as Any]) as! Bool }
    override public func EventFilterDefault(watched: QObject_ITF? = nil, event: QEvent_ITF? = nil) -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "EventFilterDefault", watched as Any, event as Any]) as! Bool }
    override public func MetaObjectDefault() -> QMetaObject { callLocalFunction(l: ["", Pointer(), ___className, "MetaObjectDefault"]) as! QMetaObject }
    override public func TimerEventDefault(event: QTimerEvent_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "TimerEventDefault", event as Any]) }
}

public func NewQOpenGLShaderFromPointer(ptr: String) -> QOpenGLShader { let r = QOpenGLShader(); r.initFrom(p: ptr, n: "gui.QOpenGLShader"); return r }
public func NewQOpenGLShader(ty: Int, parent: QObject_ITF? = nil) -> QOpenGLShader { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.NewQOpenGLShader", "", ty as Any, parent as Any]) as! QOpenGLShader }
public func QOpenGLShader_HasOpenGLShaders(ty: Int, context: QOpenGLContext_ITF? = nil) -> Bool { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.QOpenGLShader_HasOpenGLShaders", "", ty as Any, context as Any]) as! Bool }
public protocol QOpenGLShaderProgram_ITF: QObject_ITF {
    func QOpenGLShaderProgram_PTR() -> QOpenGLShaderProgram
}

public class QOpenGLShaderProgram: QObject, QOpenGLShaderProgram_ITF {
    public func QOpenGLShaderProgram_PTR() -> QOpenGLShaderProgram { callLocalFunction(l: ["", Pointer(), ___className, "QOpenGLShaderProgram_PTR"]) as! QOpenGLShaderProgram }
    public func AddCacheableShaderFromSourceCode(ty: Int, source: String) -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "AddCacheableShaderFromSourceCode", ty as Any, source as Any]) as! Bool }
    public func AddCacheableShaderFromSourceCode2(ty: Int, source: QByteArray_ITF? = nil) -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "AddCacheableShaderFromSourceCode2", ty as Any, source as Any]) as! Bool }
    public func AddCacheableShaderFromSourceCode3(ty: Int, source: String) -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "AddCacheableShaderFromSourceCode3", ty as Any, source as Any]) as! Bool }
    public func AddCacheableShaderFromSourceFile(ty: Int, fileName: String) -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "AddCacheableShaderFromSourceFile", ty as Any, fileName as Any]) as! Bool }
    public func AddShader(shader: QOpenGLShader_ITF? = nil) -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "AddShader", shader as Any]) as! Bool }
    public func AddShaderFromSourceCode(ty: Int, source: String) -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "AddShaderFromSourceCode", ty as Any, source as Any]) as! Bool }
    public func AddShaderFromSourceCode2(ty: Int, source: QByteArray_ITF? = nil) -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "AddShaderFromSourceCode2", ty as Any, source as Any]) as! Bool }
    public func AddShaderFromSourceCode3(ty: Int, source: String) -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "AddShaderFromSourceCode3", ty as Any, source as Any]) as! Bool }
    public func AddShaderFromSourceFile(ty: Int, fileName: String) -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "AddShaderFromSourceFile", ty as Any, fileName as Any]) as! Bool }
    public func AttributeLocation(name: String) -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "AttributeLocation", name as Any]) as! Float) }
    public func AttributeLocation2(name: QByteArray_ITF? = nil) -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "AttributeLocation2", name as Any]) as! Float) }
    public func AttributeLocation3(name: String) -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "AttributeLocation3", name as Any]) as! Float) }
    public func Bind() -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "Bind"]) as! Bool }
    public func BindAttributeLocation(name: String, location: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "BindAttributeLocation", name as Any, location as Any]) }
    public func BindAttributeLocation2(name: QByteArray_ITF? = nil, location: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "BindAttributeLocation2", name as Any, location as Any]) }
    public func BindAttributeLocation3(name: String, location: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "BindAttributeLocation3", name as Any, location as Any]) }
    public func Create() -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "Create"]) as! Bool }
    public func DefaultInnerTessellationLevels() -> [Float] { callLocalFunction(l: ["", Pointer(), ___className, "DefaultInnerTessellationLevels"]) as! [Float] }
    public func DefaultOuterTessellationLevels() -> [Float] { callLocalFunction(l: ["", Pointer(), ___className, "DefaultOuterTessellationLevels"]) as! [Float] }
    public func DisableAttributeArray(location: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "DisableAttributeArray", location as Any]) }
    public func DisableAttributeArray2(name: String) { _ = callLocalFunction(l: ["", Pointer(), ___className, "DisableAttributeArray2", name as Any]) }
    public func EnableAttributeArray(location: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "EnableAttributeArray", location as Any]) }
    public func EnableAttributeArray2(name: String) { _ = callLocalFunction(l: ["", Pointer(), ___className, "EnableAttributeArray2", name as Any]) }
    public func HasOpenGLShaderPrograms(context: QOpenGLContext_ITF? = nil) -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "HasOpenGLShaderPrograms", context as Any]) as! Bool }
    public func IsLinked() -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "IsLinked"]) as! Bool }
    public func ConnectLink(f: @escaping () -> Bool) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectLink", "___REMOTE_CALLBACK___"], f: { (_: [Any]) -> Any in f() } as Any) }
    public func DisconnectLink() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectLink"]) }
    public func Link() -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "Link"]) as! Bool }
    public func LinkDefault() -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "LinkDefault"]) as! Bool }
    public func Log() -> String { callLocalFunction(l: ["", Pointer(), ___className, "Log"]) as! String }
    public func MaxGeometryOutputVertices() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "MaxGeometryOutputVertices"]) as! Float) }
    public func PatchVertexCount() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "PatchVertexCount"]) as! Float) }
    public func ProgramId() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "ProgramId"]) as! Float) }
    public func Release() { _ = callLocalFunction(l: ["", Pointer(), ___className, "Release"]) }
    public func RemoveAllShaders() { _ = callLocalFunction(l: ["", Pointer(), ___className, "RemoveAllShaders"]) }
    public func RemoveShader(shader: QOpenGLShader_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "RemoveShader", shader as Any]) }
    public func SetAttributeArray(location: Int, values: Float, tupleSize: Int, stride: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetAttributeArray", location as Any, values as Any, tupleSize as Any, stride as Any]) }
    public func SetAttributeArray2(location: Int, values: QVector2D_ITF? = nil, stride: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetAttributeArray2", location as Any, values as Any, stride as Any]) }
    public func SetAttributeArray3(location: Int, values: QVector3D_ITF? = nil, stride: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetAttributeArray3", location as Any, values as Any, stride as Any]) }
    public func SetAttributeArray4(location: Int, values: QVector4D_ITF? = nil, stride: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetAttributeArray4", location as Any, values as Any, stride as Any]) }
    public func SetAttributeArray5(location: Int, ty: Int, values: Int, tupleSize: Int, stride: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetAttributeArray5", location as Any, ty as Any, values as Any, tupleSize as Any, stride as Any]) }
    public func SetAttributeArray6(name: String, values: Float, tupleSize: Int, stride: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetAttributeArray6", name as Any, values as Any, tupleSize as Any, stride as Any]) }
    public func SetAttributeArray7(name: String, values: QVector2D_ITF? = nil, stride: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetAttributeArray7", name as Any, values as Any, stride as Any]) }
    public func SetAttributeArray8(name: String, values: QVector3D_ITF? = nil, stride: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetAttributeArray8", name as Any, values as Any, stride as Any]) }
    public func SetAttributeArray9(name: String, values: QVector4D_ITF? = nil, stride: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetAttributeArray9", name as Any, values as Any, stride as Any]) }
    public func SetAttributeArray10(name: String, ty: Int, values: Int, tupleSize: Int, stride: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetAttributeArray10", name as Any, ty as Any, values as Any, tupleSize as Any, stride as Any]) }
    public func SetAttributeBuffer(location: Int, ty: Int, offset: Int, tupleSize: Int, stride: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetAttributeBuffer", location as Any, ty as Any, offset as Any, tupleSize as Any, stride as Any]) }
    public func SetAttributeBuffer2(name: String, ty: Int, offset: Int, tupleSize: Int, stride: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetAttributeBuffer2", name as Any, ty as Any, offset as Any, tupleSize as Any, stride as Any]) }
    public func SetAttributeValue(location: Int, value: Float) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetAttributeValue", location as Any, value as Any]) }
    public func SetAttributeValue2(location: Int, x: Float, y: Float) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetAttributeValue2", location as Any, x as Any, y as Any]) }
    public func SetAttributeValue3(location: Int, x: Float, y: Float, z: Float) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetAttributeValue3", location as Any, x as Any, y as Any, z as Any]) }
    public func SetAttributeValue4(location: Int, x: Float, y: Float, z: Float, w: Float) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetAttributeValue4", location as Any, x as Any, y as Any, z as Any, w as Any]) }
    public func SetAttributeValue5(location: Int, value: QVector2D_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetAttributeValue5", location as Any, value as Any]) }
    public func SetAttributeValue6(location: Int, value: QVector3D_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetAttributeValue6", location as Any, value as Any]) }
    public func SetAttributeValue7(location: Int, value: QVector4D_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetAttributeValue7", location as Any, value as Any]) }
    public func SetAttributeValue8(location: Int, value: QColor_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetAttributeValue8", location as Any, value as Any]) }
    public func SetAttributeValue9(location: Int, values: Float, columns: Int, rows: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetAttributeValue9", location as Any, values as Any, columns as Any, rows as Any]) }
    public func SetAttributeValue10(name: String, value: Float) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetAttributeValue10", name as Any, value as Any]) }
    public func SetAttributeValue11(name: String, x: Float, y: Float) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetAttributeValue11", name as Any, x as Any, y as Any]) }
    public func SetAttributeValue12(name: String, x: Float, y: Float, z: Float) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetAttributeValue12", name as Any, x as Any, y as Any, z as Any]) }
    public func SetAttributeValue13(name: String, x: Float, y: Float, z: Float, w: Float) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetAttributeValue13", name as Any, x as Any, y as Any, z as Any, w as Any]) }
    public func SetAttributeValue14(name: String, value: QVector2D_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetAttributeValue14", name as Any, value as Any]) }
    public func SetAttributeValue15(name: String, value: QVector3D_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetAttributeValue15", name as Any, value as Any]) }
    public func SetAttributeValue16(name: String, value: QVector4D_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetAttributeValue16", name as Any, value as Any]) }
    public func SetAttributeValue17(name: String, value: QColor_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetAttributeValue17", name as Any, value as Any]) }
    public func SetAttributeValue18(name: String, values: Float, columns: Int, rows: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetAttributeValue18", name as Any, values as Any, columns as Any, rows as Any]) }
    public func SetDefaultInnerTessellationLevels(levels: [Float]) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetDefaultInnerTessellationLevels", levels as Any]) }
    public func SetDefaultOuterTessellationLevels(levels: [Float]) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetDefaultOuterTessellationLevels", levels as Any]) }
    public func SetPatchVertexCount(count: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetPatchVertexCount", count as Any]) }
    public func SetUniformValue(location: Int, value: Float) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetUniformValue", location as Any, value as Any]) }
    public func SetUniformValue2(location: Int, value: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetUniformValue2", location as Any, value as Any]) }
    public func SetUniformValue3(location: Int, value: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetUniformValue3", location as Any, value as Any]) }
    public func SetUniformValue4(location: Int, x: Float, y: Float) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetUniformValue4", location as Any, x as Any, y as Any]) }
    public func SetUniformValue5(location: Int, x: Float, y: Float, z: Float) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetUniformValue5", location as Any, x as Any, y as Any, z as Any]) }
    public func SetUniformValue6(location: Int, x: Float, y: Float, z: Float, w: Float) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetUniformValue6", location as Any, x as Any, y as Any, z as Any, w as Any]) }
    public func SetUniformValue7(location: Int, value: QVector2D_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetUniformValue7", location as Any, value as Any]) }
    public func SetUniformValue8(location: Int, value: QVector3D_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetUniformValue8", location as Any, value as Any]) }
    public func SetUniformValue9(location: Int, value: QVector4D_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetUniformValue9", location as Any, value as Any]) }
    public func SetUniformValue10(location: Int, color: QColor_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetUniformValue10", location as Any, color as Any]) }
    public func SetUniformValue11(location: Int, point: QPoint_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetUniformValue11", location as Any, point as Any]) }
    public func SetUniformValue12(location: Int, point: QPointF_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetUniformValue12", location as Any, point as Any]) }
    public func SetUniformValue13(location: Int, size: QSize_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetUniformValue13", location as Any, size as Any]) }
    public func SetUniformValue14(location: Int, size: QSizeF_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetUniformValue14", location as Any, size as Any]) }
    public func SetUniformValue23(location: Int, value: QMatrix4x4_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetUniformValue23", location as Any, value as Any]) }
    public func SetUniformValue27(location: Int, value: QTransform_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetUniformValue27", location as Any, value as Any]) }
    public func SetUniformValue28(name: String, value: Float) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetUniformValue28", name as Any, value as Any]) }
    public func SetUniformValue29(name: String, value: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetUniformValue29", name as Any, value as Any]) }
    public func SetUniformValue30(name: String, value: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetUniformValue30", name as Any, value as Any]) }
    public func SetUniformValue31(name: String, x: Float, y: Float) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetUniformValue31", name as Any, x as Any, y as Any]) }
    public func SetUniformValue32(name: String, x: Float, y: Float, z: Float) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetUniformValue32", name as Any, x as Any, y as Any, z as Any]) }
    public func SetUniformValue33(name: String, x: Float, y: Float, z: Float, w: Float) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetUniformValue33", name as Any, x as Any, y as Any, z as Any, w as Any]) }
    public func SetUniformValue34(name: String, value: QVector2D_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetUniformValue34", name as Any, value as Any]) }
    public func SetUniformValue35(name: String, value: QVector3D_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetUniformValue35", name as Any, value as Any]) }
    public func SetUniformValue36(name: String, value: QVector4D_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetUniformValue36", name as Any, value as Any]) }
    public func SetUniformValue37(name: String, color: QColor_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetUniformValue37", name as Any, color as Any]) }
    public func SetUniformValue38(name: String, point: QPoint_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetUniformValue38", name as Any, point as Any]) }
    public func SetUniformValue39(name: String, point: QPointF_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetUniformValue39", name as Any, point as Any]) }
    public func SetUniformValue40(name: String, size: QSize_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetUniformValue40", name as Any, size as Any]) }
    public func SetUniformValue41(name: String, size: QSizeF_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetUniformValue41", name as Any, size as Any]) }
    public func SetUniformValue50(name: String, value: QMatrix4x4_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetUniformValue50", name as Any, value as Any]) }
    public func SetUniformValue54(name: String, value: QTransform_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetUniformValue54", name as Any, value as Any]) }
    public func SetUniformValueArray(location: Int, values: Float, count: Int, tupleSize: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetUniformValueArray", location as Any, values as Any, count as Any, tupleSize as Any]) }
    public func SetUniformValueArray2(location: Int, values: Int, count: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetUniformValueArray2", location as Any, values as Any, count as Any]) }
    public func SetUniformValueArray3(location: Int, values: Int, count: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetUniformValueArray3", location as Any, values as Any, count as Any]) }
    public func SetUniformValueArray4(location: Int, values: QVector2D_ITF? = nil, count: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetUniformValueArray4", location as Any, values as Any, count as Any]) }
    public func SetUniformValueArray5(location: Int, values: QVector3D_ITF? = nil, count: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetUniformValueArray5", location as Any, values as Any, count as Any]) }
    public func SetUniformValueArray6(location: Int, values: QVector4D_ITF? = nil, count: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetUniformValueArray6", location as Any, values as Any, count as Any]) }
    public func SetUniformValueArray15(location: Int, values: QMatrix4x4_ITF? = nil, count: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetUniformValueArray15", location as Any, values as Any, count as Any]) }
    public func SetUniformValueArray16(name: String, values: Float, count: Int, tupleSize: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetUniformValueArray16", name as Any, values as Any, count as Any, tupleSize as Any]) }
    public func SetUniformValueArray17(name: String, values: Int, count: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetUniformValueArray17", name as Any, values as Any, count as Any]) }
    public func SetUniformValueArray18(name: String, values: Int, count: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetUniformValueArray18", name as Any, values as Any, count as Any]) }
    public func SetUniformValueArray19(name: String, values: QVector2D_ITF? = nil, count: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetUniformValueArray19", name as Any, values as Any, count as Any]) }
    public func SetUniformValueArray20(name: String, values: QVector3D_ITF? = nil, count: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetUniformValueArray20", name as Any, values as Any, count as Any]) }
    public func SetUniformValueArray21(name: String, values: QVector4D_ITF? = nil, count: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetUniformValueArray21", name as Any, values as Any, count as Any]) }
    public func SetUniformValueArray30(name: String, values: QMatrix4x4_ITF? = nil, count: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetUniformValueArray30", name as Any, values as Any, count as Any]) }
    public func Shaders() -> [QOpenGLShader] { callLocalFunction(l: ["", Pointer(), ___className, "Shaders"]) as! [QOpenGLShader] }
    public func UniformLocation(name: String) -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "UniformLocation", name as Any]) as! Float) }
    public func UniformLocation2(name: QByteArray_ITF? = nil) -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "UniformLocation2", name as Any]) as! Float) }
    public func UniformLocation3(name: String) -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "UniformLocation3", name as Any]) as! Float) }
    public func ConnectDestroyQOpenGLShaderProgram(f: @escaping () -> Void) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectDestroyQOpenGLShaderProgram", "___REMOTE_CALLBACK___"], f: { (_: [Any]) -> Any in f() } as Any) }
    public func DisconnectDestroyQOpenGLShaderProgram() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectDestroyQOpenGLShaderProgram"]) }
    public func DestroyQOpenGLShaderProgram() { _ = callLocalFunction(l: ["", Pointer(), ___className, "DestroyQOpenGLShaderProgram"]) }
    public func DestroyQOpenGLShaderProgramDefault() { _ = callLocalFunction(l: ["", Pointer(), ___className, "DestroyQOpenGLShaderProgramDefault"]) }
    override public func ChildEventDefault(event: QChildEvent_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "ChildEventDefault", event as Any]) }
    override public func ConnectNotifyDefault(sign: QMetaMethod_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "ConnectNotifyDefault", sign as Any]) }
    override public func CustomEventDefault(event: QEvent_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "CustomEventDefault", event as Any]) }
    override public func DeleteLaterDefault() { _ = callLocalFunction(l: ["", Pointer(), ___className, "DeleteLaterDefault"]) }
    override public func DisconnectNotifyDefault(sign: QMetaMethod_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "DisconnectNotifyDefault", sign as Any]) }
    override public func EventDefault(e: QEvent_ITF? = nil) -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "EventDefault", e as Any]) as! Bool }
    override public func EventFilterDefault(watched: QObject_ITF? = nil, event: QEvent_ITF? = nil) -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "EventFilterDefault", watched as Any, event as Any]) as! Bool }
    override public func MetaObjectDefault() -> QMetaObject { callLocalFunction(l: ["", Pointer(), ___className, "MetaObjectDefault"]) as! QMetaObject }
    override public func TimerEventDefault(event: QTimerEvent_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "TimerEventDefault", event as Any]) }
}

public func NewQOpenGLShaderProgramFromPointer(ptr: String) -> QOpenGLShaderProgram { let r = QOpenGLShaderProgram(); r.initFrom(p: ptr, n: "gui.QOpenGLShaderProgram"); return r }
public func NewQOpenGLShaderProgram(parent: QObject_ITF? = nil) -> QOpenGLShaderProgram { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.NewQOpenGLShaderProgram", "", parent as Any]) as! QOpenGLShaderProgram }
public func QOpenGLShaderProgram_HasOpenGLShaderPrograms(context: QOpenGLContext_ITF? = nil) -> Bool { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.QOpenGLShaderProgram_HasOpenGLShaderPrograms", "", context as Any]) as! Bool }
public protocol QOpenGLTexture_ITF {
    func QOpenGLTexture_PTR() -> QOpenGLTexture
}

public class QOpenGLTexture: Internal, QOpenGLTexture_ITF {
    public func QOpenGLTexture_PTR() -> QOpenGLTexture { callLocalFunction(l: ["", Pointer(), ___className, "QOpenGLTexture_PTR"]) as! QOpenGLTexture }
    public func DestroyQOpenGLTexture() { _ = callLocalFunction(l: ["", Pointer(), ___className, "DestroyQOpenGLTexture"]) }
    public func AllocateStorage() { _ = callLocalFunction(l: ["", Pointer(), ___className, "AllocateStorage"]) }
    public func AllocateStorage2(pixelFormat: Int, pixelType: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "AllocateStorage2", pixelFormat as Any, pixelType as Any]) }
    public func Bind() { _ = callLocalFunction(l: ["", Pointer(), ___className, "Bind"]) }
    public func Bind2(unit: Int, reset: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "Bind2", unit as Any, reset as Any]) }
    public func BorderColor() -> QColor { callLocalFunction(l: ["", Pointer(), ___className, "BorderColor"]) as! QColor }
    public func BorderColor2(border: Float) { _ = callLocalFunction(l: ["", Pointer(), ___className, "BorderColor2", border as Any]) }
    public func BorderColor3(border: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "BorderColor3", border as Any]) }
    public func BorderColor4(border: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "BorderColor4", border as Any]) }
    public func BoundTextureId(target: Int) -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "BoundTextureId", target as Any]) as! Float) }
    public func BoundTextureId2(unit: Int, target: Int) -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "BoundTextureId2", unit as Any, target as Any]) as! Float) }
    public func ComparisonFunction() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "ComparisonFunction"]) as! Float) }
    public func ComparisonMode() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "ComparisonMode"]) as! Float) }
    public func Create() -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "Create"]) as! Bool }
    public func CreateTextureView(target: Int, viewFormat: Int, minimumMipmapLevel: Int, maximumMipmapLevel: Int, minimumLayer: Int, maximumLayer: Int) -> QOpenGLTexture { callLocalFunction(l: ["", Pointer(), ___className, "CreateTextureView", target as Any, viewFormat as Any, minimumMipmapLevel as Any, maximumMipmapLevel as Any, minimumLayer as Any, maximumLayer as Any]) as! QOpenGLTexture }
    public func Depth() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "Depth"]) as! Float) }
    public func DepthStencilMode() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "DepthStencilMode"]) as! Float) }
    public func Destroy() { _ = callLocalFunction(l: ["", Pointer(), ___className, "Destroy"]) }
    public func Faces() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "Faces"]) as! Float) }
    public func Format() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "Format"]) as! Float) }
    public func GenerateMipMaps() { _ = callLocalFunction(l: ["", Pointer(), ___className, "GenerateMipMaps"]) }
    public func GenerateMipMaps2(baseLevel: Int, resetBaseLevel: Bool) { _ = callLocalFunction(l: ["", Pointer(), ___className, "GenerateMipMaps2", baseLevel as Any, resetBaseLevel as Any]) }
    public func HasFeature(feature: Int) -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "HasFeature", feature as Any]) as! Bool }
    public func Height() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "Height"]) as! Float) }
    public func IsAutoMipMapGenerationEnabled() -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "IsAutoMipMapGenerationEnabled"]) as! Bool }
    public func IsBound() -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "IsBound"]) as! Bool }
    public func IsBound2(unit: Int) -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "IsBound2", unit as Any]) as! Bool }
    public func IsCreated() -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "IsCreated"]) as! Bool }
    public func IsFixedSamplePositions() -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "IsFixedSamplePositions"]) as! Bool }
    public func IsStorageAllocated() -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "IsStorageAllocated"]) as! Bool }
    public func IsTextureView() -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "IsTextureView"]) as! Bool }
    public func Layers() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "Layers"]) as! Float) }
    public func LevelofDetailBias() -> Float { callLocalFunction(l: ["", Pointer(), ___className, "LevelofDetailBias"]) as! Float }
    public func MagnificationFilter() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "MagnificationFilter"]) as! Float) }
    public func MaximumAnisotropy() -> Float { callLocalFunction(l: ["", Pointer(), ___className, "MaximumAnisotropy"]) as! Float }
    public func MaximumLevelOfDetail() -> Float { callLocalFunction(l: ["", Pointer(), ___className, "MaximumLevelOfDetail"]) as! Float }
    public func MaximumMipLevels() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "MaximumMipLevels"]) as! Float) }
    public func MinificationFilter() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "MinificationFilter"]) as! Float) }
    public func MinimumLevelOfDetail() -> Float { callLocalFunction(l: ["", Pointer(), ___className, "MinimumLevelOfDetail"]) as! Float }
    public func MipBaseLevel() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "MipBaseLevel"]) as! Float) }
    public func MipLevels() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "MipLevels"]) as! Float) }
    public func MipMaxLevel() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "MipMaxLevel"]) as! Float) }
    public func Release() { _ = callLocalFunction(l: ["", Pointer(), ___className, "Release"]) }
    public func Release2(unit: Int, reset: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "Release2", unit as Any, reset as Any]) }
    public func Samples() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "Samples"]) as! Float) }
    public func SetAutoMipMapGenerationEnabled(enabled: Bool) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetAutoMipMapGenerationEnabled", enabled as Any]) }
    public func SetBorderColor(color: QColor_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetBorderColor", color as Any]) }
    public func SetBorderColor2(r: Float, g: Float, b: Float, a: Float) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetBorderColor2", r as Any, g as Any, b as Any, a as Any]) }
    public func SetBorderColor3(r: Int, g: Int, b: Int, a: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetBorderColor3", r as Any, g as Any, b as Any, a as Any]) }
    public func SetBorderColor4(r: Int, g: Int, b: Int, a: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetBorderColor4", r as Any, g as Any, b as Any, a as Any]) }
    public func SetComparisonFunction(function: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetComparisonFunction", function as Any]) }
    public func SetComparisonMode(mode: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetComparisonMode", mode as Any]) }
    public func SetCompressedData(mipLevel: Int, layer: Int, cubeFace: Int, dataSize: Int, data: Int, options: QOpenGLPixelTransferOptions_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetCompressedData", mipLevel as Any, layer as Any, cubeFace as Any, dataSize as Any, data as Any, options as Any]) }
    public func SetCompressedData6(mipLevel: Int, layer: Int, layerCount: Int, cubeFace: Int, dataSize: Int, data: Int, options: QOpenGLPixelTransferOptions_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetCompressedData6", mipLevel as Any, layer as Any, layerCount as Any, cubeFace as Any, dataSize as Any, data as Any, options as Any]) }
    public func SetCompressedData7(mipLevel: Int, layer: Int, dataSize: Int, data: Int, options: QOpenGLPixelTransferOptions_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetCompressedData7", mipLevel as Any, layer as Any, dataSize as Any, data as Any, options as Any]) }
    public func SetCompressedData8(mipLevel: Int, dataSize: Int, data: Int, options: QOpenGLPixelTransferOptions_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetCompressedData8", mipLevel as Any, dataSize as Any, data as Any, options as Any]) }
    public func SetCompressedData9(dataSize: Int, data: Int, options: QOpenGLPixelTransferOptions_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetCompressedData9", dataSize as Any, data as Any, options as Any]) }
    public func SetData(mipLevel: Int, layer: Int, cubeFace: Int, sourceFormat: Int, sourceType: Int, data: Int, options: QOpenGLPixelTransferOptions_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetData", mipLevel as Any, layer as Any, cubeFace as Any, sourceFormat as Any, sourceType as Any, data as Any, options as Any]) }
    public func SetData6(mipLevel: Int, layer: Int, layerCount: Int, cubeFace: Int, sourceFormat: Int, sourceType: Int, data: Int, options: QOpenGLPixelTransferOptions_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetData6", mipLevel as Any, layer as Any, layerCount as Any, cubeFace as Any, sourceFormat as Any, sourceType as Any, data as Any, options as Any]) }
    public func SetData7(mipLevel: Int, layer: Int, sourceFormat: Int, sourceType: Int, data: Int, options: QOpenGLPixelTransferOptions_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetData7", mipLevel as Any, layer as Any, sourceFormat as Any, sourceType as Any, data as Any, options as Any]) }
    public func SetData8(mipLevel: Int, sourceFormat: Int, sourceType: Int, data: Int, options: QOpenGLPixelTransferOptions_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetData8", mipLevel as Any, sourceFormat as Any, sourceType as Any, data as Any, options as Any]) }
    public func SetData9(sourceFormat: Int, sourceType: Int, data: Int, options: QOpenGLPixelTransferOptions_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetData9", sourceFormat as Any, sourceType as Any, data as Any, options as Any]) }
    public func SetData10(image: QImage_ITF? = nil, genMipMaps: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetData10", image as Any, genMipMaps as Any]) }
    public func SetDepthStencilMode(mode: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetDepthStencilMode", mode as Any]) }
    public func SetFixedSamplePositions(fixed: Bool) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetFixedSamplePositions", fixed as Any]) }
    public func SetFormat(format: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetFormat", format as Any]) }
    public func SetLayers(layers: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetLayers", layers as Any]) }
    public func SetLevelOfDetailRange(mi: Float, max: Float) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetLevelOfDetailRange", mi as Any, max as Any]) }
    public func SetLevelofDetailBias(bias: Float) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetLevelofDetailBias", bias as Any]) }
    public func SetMagnificationFilter(filter: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetMagnificationFilter", filter as Any]) }
    public func SetMaximumAnisotropy(anisotropy: Float) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetMaximumAnisotropy", anisotropy as Any]) }
    public func SetMaximumLevelOfDetail(value: Float) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetMaximumLevelOfDetail", value as Any]) }
    public func SetMinMagFilters(minificationFilter: Int, magnificationFilter: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetMinMagFilters", minificationFilter as Any, magnificationFilter as Any]) }
    public func SetMinificationFilter(filter: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetMinificationFilter", filter as Any]) }
    public func SetMinimumLevelOfDetail(value: Float) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetMinimumLevelOfDetail", value as Any]) }
    public func SetMipBaseLevel(baseLevel: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetMipBaseLevel", baseLevel as Any]) }
    public func SetMipLevelRange(baseLevel: Int, maxLevel: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetMipLevelRange", baseLevel as Any, maxLevel as Any]) }
    public func SetMipLevels(levels: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetMipLevels", levels as Any]) }
    public func SetMipMaxLevel(maxLevel: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetMipMaxLevel", maxLevel as Any]) }
    public func SetSamples(samples: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetSamples", samples as Any]) }
    public func SetSize(width: Int, height: Int, depth: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetSize", width as Any, height as Any, depth as Any]) }
    public func SetSwizzleMask(component: Int, value: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetSwizzleMask", component as Any, value as Any]) }
    public func SetSwizzleMask2(r: Int, g: Int, b: Int, a: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetSwizzleMask2", r as Any, g as Any, b as Any, a as Any]) }
    public func SetWrapMode(mode: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetWrapMode", mode as Any]) }
    public func SetWrapMode2(direction: Int, mode: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetWrapMode2", direction as Any, mode as Any]) }
    public func SwizzleMask(component: Int) -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "SwizzleMask", component as Any]) as! Float) }
    public func Target() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "Target"]) as! Float) }
    public func TextureId() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "TextureId"]) as! Float) }
    public func Width() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "Width"]) as! Float) }
    public func WrapMode(direction: Int) -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "WrapMode", direction as Any]) as! Float) }
}

public func NewQOpenGLTextureFromPointer(ptr: String) -> QOpenGLTexture { let r = QOpenGLTexture(); r.initFrom(p: ptr, n: "gui.QOpenGLTexture"); return r }
public func NewQOpenGLTexture(target: Int) -> QOpenGLTexture { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.NewQOpenGLTexture", "", target as Any]) as! QOpenGLTexture }
public func NewQOpenGLTexture2(image: QImage_ITF? = nil, genMipMaps: Int) -> QOpenGLTexture { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.NewQOpenGLTexture2", "", image as Any, genMipMaps as Any]) as! QOpenGLTexture }
public func QOpenGLTexture_BoundTextureId(target: Int) -> Int { Gui.initModule(); return Int(callLocalFunction(l: ["", "", "gui.QOpenGLTexture_BoundTextureId", "", target as Any]) as! Float) }
public func QOpenGLTexture_BoundTextureId2(unit: Int, target: Int) -> Int { Gui.initModule(); return Int(callLocalFunction(l: ["", "", "gui.QOpenGLTexture_BoundTextureId2", "", unit as Any, target as Any]) as! Float) }
public func QOpenGLTexture_HasFeature(feature: Int) -> Bool { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.QOpenGLTexture_HasFeature", "", feature as Any]) as! Bool }
public protocol QOpenGLTextureBlitter_ITF {
    func QOpenGLTextureBlitter_PTR() -> QOpenGLTextureBlitter
}

public class QOpenGLTextureBlitter: Internal, QOpenGLTextureBlitter_ITF {
    public func QOpenGLTextureBlitter_PTR() -> QOpenGLTextureBlitter { callLocalFunction(l: ["", Pointer(), ___className, "QOpenGLTextureBlitter_PTR"]) as! QOpenGLTextureBlitter }
    public func Bind(target: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "Bind", target as Any]) }
    public func Blit(texture: Int, targetTransform: QMatrix4x4_ITF? = nil, sourceOrigi: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "Blit", texture as Any, targetTransform as Any, sourceOrigi as Any]) }
    public func Create() -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "Create"]) as! Bool }
    public func Destroy() { _ = callLocalFunction(l: ["", Pointer(), ___className, "Destroy"]) }
    public func IsCreated() -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "IsCreated"]) as! Bool }
    public func Release() { _ = callLocalFunction(l: ["", Pointer(), ___className, "Release"]) }
    public func SetOpacity(opacity: Float) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetOpacity", opacity as Any]) }
    public func SetRedBlueSwizzle(swizzle: Bool) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetRedBlueSwizzle", swizzle as Any]) }
    public func SupportsExternalOESTarget() -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "SupportsExternalOESTarget"]) as! Bool }
    public func TargetTransform(target: QRectF_ITF? = nil, viewport: QRect_ITF? = nil) -> QMatrix4x4 { callLocalFunction(l: ["", Pointer(), ___className, "TargetTransform", target as Any, viewport as Any]) as! QMatrix4x4 }
    public func DestroyQOpenGLTextureBlitter() { _ = callLocalFunction(l: ["", Pointer(), ___className, "DestroyQOpenGLTextureBlitter"]) }
}

public func NewQOpenGLTextureBlitterFromPointer(ptr: String) -> QOpenGLTextureBlitter { let r = QOpenGLTextureBlitter(); r.initFrom(p: ptr, n: "gui.QOpenGLTextureBlitter"); return r }
public func NewQOpenGLTextureBlitter() -> QOpenGLTextureBlitter { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.NewQOpenGLTextureBlitter", ""]) as! QOpenGLTextureBlitter }
public func QOpenGLTextureBlitter_TargetTransform(target: QRectF_ITF? = nil, viewport: QRect_ITF? = nil) -> QMatrix4x4 { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.QOpenGLTextureBlitter_TargetTransform", "", target as Any, viewport as Any]) as! QMatrix4x4 }
public protocol QOpenGLTimeMonitor_ITF: QObject_ITF {
    func QOpenGLTimeMonitor_PTR() -> QOpenGLTimeMonitor
}

public class QOpenGLTimeMonitor: QObject, QOpenGLTimeMonitor_ITF {
    public func QOpenGLTimeMonitor_PTR() -> QOpenGLTimeMonitor { callLocalFunction(l: ["", Pointer(), ___className, "QOpenGLTimeMonitor_PTR"]) as! QOpenGLTimeMonitor }
    public func Create() -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "Create"]) as! Bool }
    public func Destroy() { _ = callLocalFunction(l: ["", Pointer(), ___className, "Destroy"]) }
    public func IsCreated() -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "IsCreated"]) as! Bool }
    public func IsResultAvailable() -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "IsResultAvailable"]) as! Bool }
    public func ObjectIds() -> [Int] { callLocalFunction(l: ["", Pointer(), ___className, "ObjectIds"]) as! [Int] }
    public func RecordSample() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "RecordSample"]) as! Float) }
    public func Reset() { _ = callLocalFunction(l: ["", Pointer(), ___className, "Reset"]) }
    public func SampleCount() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "SampleCount"]) as! Float) }
    public func SetSampleCount(sampleCount: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetSampleCount", sampleCount as Any]) }
    public func ConnectDestroyQOpenGLTimeMonitor(f: @escaping () -> Void) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectDestroyQOpenGLTimeMonitor", "___REMOTE_CALLBACK___"], f: { (_: [Any]) -> Any in f() } as Any) }
    public func DisconnectDestroyQOpenGLTimeMonitor() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectDestroyQOpenGLTimeMonitor"]) }
    public func DestroyQOpenGLTimeMonitor() { _ = callLocalFunction(l: ["", Pointer(), ___className, "DestroyQOpenGLTimeMonitor"]) }
    public func DestroyQOpenGLTimeMonitorDefault() { _ = callLocalFunction(l: ["", Pointer(), ___className, "DestroyQOpenGLTimeMonitorDefault"]) }
    override public func ChildEventDefault(event: QChildEvent_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "ChildEventDefault", event as Any]) }
    override public func ConnectNotifyDefault(sign: QMetaMethod_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "ConnectNotifyDefault", sign as Any]) }
    override public func CustomEventDefault(event: QEvent_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "CustomEventDefault", event as Any]) }
    override public func DeleteLaterDefault() { _ = callLocalFunction(l: ["", Pointer(), ___className, "DeleteLaterDefault"]) }
    override public func DisconnectNotifyDefault(sign: QMetaMethod_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "DisconnectNotifyDefault", sign as Any]) }
    override public func EventDefault(e: QEvent_ITF? = nil) -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "EventDefault", e as Any]) as! Bool }
    override public func EventFilterDefault(watched: QObject_ITF? = nil, event: QEvent_ITF? = nil) -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "EventFilterDefault", watched as Any, event as Any]) as! Bool }
    override public func MetaObjectDefault() -> QMetaObject { callLocalFunction(l: ["", Pointer(), ___className, "MetaObjectDefault"]) as! QMetaObject }
    override public func TimerEventDefault(event: QTimerEvent_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "TimerEventDefault", event as Any]) }
}

public func NewQOpenGLTimeMonitorFromPointer(ptr: String) -> QOpenGLTimeMonitor { let r = QOpenGLTimeMonitor(); r.initFrom(p: ptr, n: "gui.QOpenGLTimeMonitor"); return r }
public func NewQOpenGLTimeMonitor(parent: QObject_ITF? = nil) -> QOpenGLTimeMonitor { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.NewQOpenGLTimeMonitor", "", parent as Any]) as! QOpenGLTimeMonitor }
public protocol QOpenGLTimerQuery_ITF: QObject_ITF {
    func QOpenGLTimerQuery_PTR() -> QOpenGLTimerQuery
}

public class QOpenGLTimerQuery: QObject, QOpenGLTimerQuery_ITF {
    public func QOpenGLTimerQuery_PTR() -> QOpenGLTimerQuery { callLocalFunction(l: ["", Pointer(), ___className, "QOpenGLTimerQuery_PTR"]) as! QOpenGLTimerQuery }
    public func Begin() { _ = callLocalFunction(l: ["", Pointer(), ___className, "Begin"]) }
    public func Create() -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "Create"]) as! Bool }
    public func Destroy() { _ = callLocalFunction(l: ["", Pointer(), ___className, "Destroy"]) }
    public func End() { _ = callLocalFunction(l: ["", Pointer(), ___className, "End"]) }
    public func IsCreated() -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "IsCreated"]) as! Bool }
    public func IsResultAvailable() -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "IsResultAvailable"]) as! Bool }
    public func ObjectId() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "ObjectId"]) as! Float) }
    public func RecordTimestamp() { _ = callLocalFunction(l: ["", Pointer(), ___className, "RecordTimestamp"]) }
    public func ConnectDestroyQOpenGLTimerQuery(f: @escaping () -> Void) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectDestroyQOpenGLTimerQuery", "___REMOTE_CALLBACK___"], f: { (_: [Any]) -> Any in f() } as Any) }
    public func DisconnectDestroyQOpenGLTimerQuery() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectDestroyQOpenGLTimerQuery"]) }
    public func DestroyQOpenGLTimerQuery() { _ = callLocalFunction(l: ["", Pointer(), ___className, "DestroyQOpenGLTimerQuery"]) }
    public func DestroyQOpenGLTimerQueryDefault() { _ = callLocalFunction(l: ["", Pointer(), ___className, "DestroyQOpenGLTimerQueryDefault"]) }
    override public func ChildEventDefault(event: QChildEvent_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "ChildEventDefault", event as Any]) }
    override public func ConnectNotifyDefault(sign: QMetaMethod_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "ConnectNotifyDefault", sign as Any]) }
    override public func CustomEventDefault(event: QEvent_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "CustomEventDefault", event as Any]) }
    override public func DeleteLaterDefault() { _ = callLocalFunction(l: ["", Pointer(), ___className, "DeleteLaterDefault"]) }
    override public func DisconnectNotifyDefault(sign: QMetaMethod_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "DisconnectNotifyDefault", sign as Any]) }
    override public func EventDefault(e: QEvent_ITF? = nil) -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "EventDefault", e as Any]) as! Bool }
    override public func EventFilterDefault(watched: QObject_ITF? = nil, event: QEvent_ITF? = nil) -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "EventFilterDefault", watched as Any, event as Any]) as! Bool }
    override public func MetaObjectDefault() -> QMetaObject { callLocalFunction(l: ["", Pointer(), ___className, "MetaObjectDefault"]) as! QMetaObject }
    override public func TimerEventDefault(event: QTimerEvent_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "TimerEventDefault", event as Any]) }
}

public func NewQOpenGLTimerQueryFromPointer(ptr: String) -> QOpenGLTimerQuery { let r = QOpenGLTimerQuery(); r.initFrom(p: ptr, n: "gui.QOpenGLTimerQuery"); return r }
public func NewQOpenGLTimerQuery(parent: QObject_ITF? = nil) -> QOpenGLTimerQuery { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.NewQOpenGLTimerQuery", "", parent as Any]) as! QOpenGLTimerQuery }
public protocol QOpenGLVersionFunctionsBackend_ITF {
    func QOpenGLVersionFunctionsBackend_PTR() -> QOpenGLVersionFunctionsBackend
}

public class QOpenGLVersionFunctionsBackend: Internal, QOpenGLVersionFunctionsBackend_ITF {
    public func QOpenGLVersionFunctionsBackend_PTR() -> QOpenGLVersionFunctionsBackend { callLocalFunction(l: ["", Pointer(), ___className, "QOpenGLVersionFunctionsBackend_PTR"]) as! QOpenGLVersionFunctionsBackend }
    public func DestroyQOpenGLVersionFunctionsBackend() { _ = callLocalFunction(l: ["", Pointer(), ___className, "DestroyQOpenGLVersionFunctionsBackend"]) }
}

public func NewQOpenGLVersionFunctionsBackendFromPointer(ptr: String) -> QOpenGLVersionFunctionsBackend { let r = QOpenGLVersionFunctionsBackend(); r.initFrom(p: ptr, n: "gui.QOpenGLVersionFunctionsBackend"); return r }
public protocol QOpenGLVersionFunctionsStorage_ITF {
    func QOpenGLVersionFunctionsStorage_PTR() -> QOpenGLVersionFunctionsStorage
}

public class QOpenGLVersionFunctionsStorage: Internal, QOpenGLVersionFunctionsStorage_ITF {
    public func QOpenGLVersionFunctionsStorage_PTR() -> QOpenGLVersionFunctionsStorage { callLocalFunction(l: ["", Pointer(), ___className, "QOpenGLVersionFunctionsStorage_PTR"]) as! QOpenGLVersionFunctionsStorage }
    public func DestroyQOpenGLVersionFunctionsStorage() { _ = callLocalFunction(l: ["", Pointer(), ___className, "DestroyQOpenGLVersionFunctionsStorage"]) }
}

public func NewQOpenGLVersionFunctionsStorageFromPointer(ptr: String) -> QOpenGLVersionFunctionsStorage { let r = QOpenGLVersionFunctionsStorage(); r.initFrom(p: ptr, n: "gui.QOpenGLVersionFunctionsStorage"); return r }
public protocol QOpenGLVersionProfile_ITF {
    func QOpenGLVersionProfile_PTR() -> QOpenGLVersionProfile
}

public class QOpenGLVersionProfile: Internal, QOpenGLVersionProfile_ITF {
    public func QOpenGLVersionProfile_PTR() -> QOpenGLVersionProfile { callLocalFunction(l: ["", Pointer(), ___className, "QOpenGLVersionProfile_PTR"]) as! QOpenGLVersionProfile }
    public func HasProfiles() -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "HasProfiles"]) as! Bool }
    public func IsLegacyVersion() -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "IsLegacyVersion"]) as! Bool }
    public func IsValid() -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "IsValid"]) as! Bool }
    public func Profile() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "Profile"]) as! Float) }
    public func SetProfile(profile: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetProfile", profile as Any]) }
    public func SetVersion(majorVersion: Int, minorVersion: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetVersion", majorVersion as Any, minorVersion as Any]) }
    public func DestroyQOpenGLVersionProfile() { _ = callLocalFunction(l: ["", Pointer(), ___className, "DestroyQOpenGLVersionProfile"]) }
}

public func NewQOpenGLVersionProfileFromPointer(ptr: String) -> QOpenGLVersionProfile { let r = QOpenGLVersionProfile(); r.initFrom(p: ptr, n: "gui.QOpenGLVersionProfile"); return r }
public func NewQOpenGLVersionProfile() -> QOpenGLVersionProfile { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.NewQOpenGLVersionProfile", ""]) as! QOpenGLVersionProfile }
public func NewQOpenGLVersionProfile2(format: QSurfaceFormat_ITF? = nil) -> QOpenGLVersionProfile { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.NewQOpenGLVersionProfile2", "", format as Any]) as! QOpenGLVersionProfile }
public func NewQOpenGLVersionProfile3(other: QOpenGLVersionProfile_ITF? = nil) -> QOpenGLVersionProfile { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.NewQOpenGLVersionProfile3", "", other as Any]) as! QOpenGLVersionProfile }
public protocol QOpenGLVersionStatus_ITF {
    func QOpenGLVersionStatus_PTR() -> QOpenGLVersionStatus
}

public class QOpenGLVersionStatus: Internal, QOpenGLVersionStatus_ITF {
    public func QOpenGLVersionStatus_PTR() -> QOpenGLVersionStatus { callLocalFunction(l: ["", Pointer(), ___className, "QOpenGLVersionStatus_PTR"]) as! QOpenGLVersionStatus }
    public func DestroyQOpenGLVersionStatus() { _ = callLocalFunction(l: ["", Pointer(), ___className, "DestroyQOpenGLVersionStatus"]) }
}

public func NewQOpenGLVersionStatusFromPointer(ptr: String) -> QOpenGLVersionStatus { let r = QOpenGLVersionStatus(); r.initFrom(p: ptr, n: "gui.QOpenGLVersionStatus"); return r }
public protocol QOpenGLVertexArrayObject_ITF: QObject_ITF {
    func QOpenGLVertexArrayObject_PTR() -> QOpenGLVertexArrayObject
}

public class QOpenGLVertexArrayObject: QObject, QOpenGLVertexArrayObject_ITF {
    public func QOpenGLVertexArrayObject_PTR() -> QOpenGLVertexArrayObject { callLocalFunction(l: ["", Pointer(), ___className, "QOpenGLVertexArrayObject_PTR"]) as! QOpenGLVertexArrayObject }
    public func Bind() { _ = callLocalFunction(l: ["", Pointer(), ___className, "Bind"]) }
    public func Create() -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "Create"]) as! Bool }
    public func Destroy() { _ = callLocalFunction(l: ["", Pointer(), ___className, "Destroy"]) }
    public func IsCreated() -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "IsCreated"]) as! Bool }
    public func ObjectId() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "ObjectId"]) as! Float) }
    public func Release() { _ = callLocalFunction(l: ["", Pointer(), ___className, "Release"]) }
    public func ConnectDestroyQOpenGLVertexArrayObject(f: @escaping () -> Void) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectDestroyQOpenGLVertexArrayObject", "___REMOTE_CALLBACK___"], f: { (_: [Any]) -> Any in f() } as Any) }
    public func DisconnectDestroyQOpenGLVertexArrayObject() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectDestroyQOpenGLVertexArrayObject"]) }
    public func DestroyQOpenGLVertexArrayObject() { _ = callLocalFunction(l: ["", Pointer(), ___className, "DestroyQOpenGLVertexArrayObject"]) }
    public func DestroyQOpenGLVertexArrayObjectDefault() { _ = callLocalFunction(l: ["", Pointer(), ___className, "DestroyQOpenGLVertexArrayObjectDefault"]) }
    override public func ChildEventDefault(event: QChildEvent_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "ChildEventDefault", event as Any]) }
    override public func ConnectNotifyDefault(sign: QMetaMethod_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "ConnectNotifyDefault", sign as Any]) }
    override public func CustomEventDefault(event: QEvent_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "CustomEventDefault", event as Any]) }
    override public func DeleteLaterDefault() { _ = callLocalFunction(l: ["", Pointer(), ___className, "DeleteLaterDefault"]) }
    override public func DisconnectNotifyDefault(sign: QMetaMethod_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "DisconnectNotifyDefault", sign as Any]) }
    override public func EventDefault(e: QEvent_ITF? = nil) -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "EventDefault", e as Any]) as! Bool }
    override public func EventFilterDefault(watched: QObject_ITF? = nil, event: QEvent_ITF? = nil) -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "EventFilterDefault", watched as Any, event as Any]) as! Bool }
    override public func MetaObjectDefault() -> QMetaObject { callLocalFunction(l: ["", Pointer(), ___className, "MetaObjectDefault"]) as! QMetaObject }
    override public func TimerEventDefault(event: QTimerEvent_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "TimerEventDefault", event as Any]) }
}

public func NewQOpenGLVertexArrayObjectFromPointer(ptr: String) -> QOpenGLVertexArrayObject { let r = QOpenGLVertexArrayObject(); r.initFrom(p: ptr, n: "gui.QOpenGLVertexArrayObject"); return r }
public func NewQOpenGLVertexArrayObject(parent: QObject_ITF? = nil) -> QOpenGLVertexArrayObject { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.NewQOpenGLVertexArrayObject", "", parent as Any]) as! QOpenGLVertexArrayObject }
public protocol QOpenGLWindow_ITF: QPaintDeviceWindow_ITF {
    func QOpenGLWindow_PTR() -> QOpenGLWindow
}

public class QOpenGLWindow: QPaintDeviceWindow, QOpenGLWindow_ITF {
    public func QOpenGLWindow_PTR() -> QOpenGLWindow { callLocalFunction(l: ["", Pointer(), ___className, "QOpenGLWindow_PTR"]) as! QOpenGLWindow }
    public func Context() -> QOpenGLContext { callLocalFunction(l: ["", Pointer(), ___className, "Context"]) as! QOpenGLContext }
    public func DefaultFramebufferObject() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "DefaultFramebufferObject"]) as! Float) }
    public func DoneCurrent() { _ = callLocalFunction(l: ["", Pointer(), ___className, "DoneCurrent"]) }
    public func ConnectFrameSwapped(f: @escaping () -> Void) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectFrameSwapped", "___REMOTE_CALLBACK___"], f: { (_: [Any]) -> Any in f() } as Any) }
    public func DisconnectFrameSwapped() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectFrameSwapped"]) }
    public func FrameSwapped() { _ = callLocalFunction(l: ["", Pointer(), ___className, "FrameSwapped"]) }
    public func GrabFramebuffer() -> QImage { callLocalFunction(l: ["", Pointer(), ___className, "GrabFramebuffer"]) as! QImage }
    public func ConnectInitializeGL(f: @escaping () -> Void) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectInitializeGL", "___REMOTE_CALLBACK___"], f: { (_: [Any]) -> Any in f() } as Any) }
    public func DisconnectInitializeGL() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectInitializeGL"]) }
    public func InitializeGL() { _ = callLocalFunction(l: ["", Pointer(), ___className, "InitializeGL"]) }
    public func InitializeGLDefault() { _ = callLocalFunction(l: ["", Pointer(), ___className, "InitializeGLDefault"]) }
    public func IsValid() -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "IsValid"]) as! Bool }
    public func MakeCurrent() { _ = callLocalFunction(l: ["", Pointer(), ___className, "MakeCurrent"]) }
    public func ConnectPaintGL(f: @escaping () -> Void) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectPaintGL", "___REMOTE_CALLBACK___"], f: { (_: [Any]) -> Any in f() } as Any) }
    public func DisconnectPaintGL() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectPaintGL"]) }
    public func PaintGL() { _ = callLocalFunction(l: ["", Pointer(), ___className, "PaintGL"]) }
    public func PaintGLDefault() { _ = callLocalFunction(l: ["", Pointer(), ___className, "PaintGLDefault"]) }
    public func ConnectPaintOverGL(f: @escaping () -> Void) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectPaintOverGL", "___REMOTE_CALLBACK___"], f: { (_: [Any]) -> Any in f() } as Any) }
    public func DisconnectPaintOverGL() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectPaintOverGL"]) }
    public func PaintOverGL() { _ = callLocalFunction(l: ["", Pointer(), ___className, "PaintOverGL"]) }
    public func PaintOverGLDefault() { _ = callLocalFunction(l: ["", Pointer(), ___className, "PaintOverGLDefault"]) }
    public func ConnectPaintUnderGL(f: @escaping () -> Void) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectPaintUnderGL", "___REMOTE_CALLBACK___"], f: { (_: [Any]) -> Any in f() } as Any) }
    public func DisconnectPaintUnderGL() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectPaintUnderGL"]) }
    public func PaintUnderGL() { _ = callLocalFunction(l: ["", Pointer(), ___className, "PaintUnderGL"]) }
    public func PaintUnderGLDefault() { _ = callLocalFunction(l: ["", Pointer(), ___className, "PaintUnderGLDefault"]) }
    public func ConnectResizeGL(f: @escaping (_ w: Int, _ h: Int) -> Void) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectResizeGL", "___REMOTE_CALLBACK___"], f: { (inp: [Any]) -> Any in f(Int(inp[0] as! Float), Int(inp[1] as! Float)) } as Any) }
    public func DisconnectResizeGL() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectResizeGL"]) }
    public func ResizeGL(w: Int, h: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "ResizeGL", w as Any, h as Any]) }
    public func ResizeGLDefault(w: Int, h: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "ResizeGLDefault", w as Any, h as Any]) }
    public func ShareContext() -> QOpenGLContext { callLocalFunction(l: ["", Pointer(), ___className, "ShareContext"]) as! QOpenGLContext }
    public func UpdateBehavior() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "UpdateBehavior"]) as! Float) }
    public func ConnectDestroyQOpenGLWindow(f: @escaping () -> Void) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectDestroyQOpenGLWindow", "___REMOTE_CALLBACK___"], f: { (_: [Any]) -> Any in f() } as Any) }
    public func DisconnectDestroyQOpenGLWindow() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectDestroyQOpenGLWindow"]) }
    public func DestroyQOpenGLWindow() { _ = callLocalFunction(l: ["", Pointer(), ___className, "DestroyQOpenGLWindow"]) }
    public func DestroyQOpenGLWindowDefault() { _ = callLocalFunction(l: ["", Pointer(), ___className, "DestroyQOpenGLWindowDefault"]) }
}

public func NewQOpenGLWindowFromPointer(ptr: String) -> QOpenGLWindow { let r = QOpenGLWindow(); r.initFrom(p: ptr, n: "gui.QOpenGLWindow"); return r }
public func NewQOpenGLWindow(updateBehavior: Int, parent: QWindow_ITF? = nil) -> QOpenGLWindow { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.NewQOpenGLWindow", "", updateBehavior as Any, parent as Any]) as! QOpenGLWindow }
public func NewQOpenGLWindow2(shareContext: QOpenGLContext_ITF? = nil, updateBehavior: Int, parent: QWindow_ITF? = nil) -> QOpenGLWindow { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.NewQOpenGLWindow2", "", shareContext as Any, updateBehavior as Any, parent as Any]) as! QOpenGLWindow }
public protocol QPageLayout_ITF {
    func QPageLayout_PTR() -> QPageLayout
}

public class QPageLayout: Internal, QPageLayout_ITF {
    public func QPageLayout_PTR() -> QPageLayout { callLocalFunction(l: ["", Pointer(), ___className, "QPageLayout_PTR"]) as! QPageLayout }
    public func FullRect() -> QRectF { callLocalFunction(l: ["", Pointer(), ___className, "FullRect"]) as! QRectF }
    public func FullRect2(units: Int) -> QRectF { callLocalFunction(l: ["", Pointer(), ___className, "FullRect2", units as Any]) as! QRectF }
    public func FullRectPixels(resolution: Int) -> QRect { callLocalFunction(l: ["", Pointer(), ___className, "FullRectPixels", resolution as Any]) as! QRect }
    public func FullRectPoints() -> QRect { callLocalFunction(l: ["", Pointer(), ___className, "FullRectPoints"]) as! QRect }
    public func IsEquivalentTo(other: QPageLayout_ITF? = nil) -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "IsEquivalentTo", other as Any]) as! Bool }
    public func IsValid() -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "IsValid"]) as! Bool }
    public func Margins() -> QMarginsF { callLocalFunction(l: ["", Pointer(), ___className, "Margins"]) as! QMarginsF }
    public func Margins2(units: Int) -> QMarginsF { callLocalFunction(l: ["", Pointer(), ___className, "Margins2", units as Any]) as! QMarginsF }
    public func MarginsPixels(resolution: Int) -> QMargins { callLocalFunction(l: ["", Pointer(), ___className, "MarginsPixels", resolution as Any]) as! QMargins }
    public func MarginsPoints() -> QMargins { callLocalFunction(l: ["", Pointer(), ___className, "MarginsPoints"]) as! QMargins }
    public func MaximumMargins() -> QMarginsF { callLocalFunction(l: ["", Pointer(), ___className, "MaximumMargins"]) as! QMarginsF }
    public func MinimumMargins() -> QMarginsF { callLocalFunction(l: ["", Pointer(), ___className, "MinimumMargins"]) as! QMarginsF }
    public func Mode() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "Mode"]) as! Float) }
    public func Orientation() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "Orientation"]) as! Float) }
    public func PageSize() -> QPageSize { callLocalFunction(l: ["", Pointer(), ___className, "PageSize"]) as! QPageSize }
    public func PaintRect() -> QRectF { callLocalFunction(l: ["", Pointer(), ___className, "PaintRect"]) as! QRectF }
    public func PaintRect2(units: Int) -> QRectF { callLocalFunction(l: ["", Pointer(), ___className, "PaintRect2", units as Any]) as! QRectF }
    public func PaintRectPixels(resolution: Int) -> QRect { callLocalFunction(l: ["", Pointer(), ___className, "PaintRectPixels", resolution as Any]) as! QRect }
    public func PaintRectPoints() -> QRect { callLocalFunction(l: ["", Pointer(), ___className, "PaintRectPoints"]) as! QRect }
    public func SetBottomMargin(bottomMargi: Float) -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "SetBottomMargin", bottomMargi as Any]) as! Bool }
    public func SetLeftMargin(leftMargi: Float) -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "SetLeftMargin", leftMargi as Any]) as! Bool }
    public func SetMargins(margins: QMarginsF_ITF? = nil) -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "SetMargins", margins as Any]) as! Bool }
    public func SetMinimumMargins(minMargins: QMarginsF_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetMinimumMargins", minMargins as Any]) }
    public func SetMode(mode: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetMode", mode as Any]) }
    public func SetOrientation(orientation: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetOrientation", orientation as Any]) }
    public func SetPageSize(pageSize: QPageSize_ITF? = nil, minMargins: QMarginsF_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetPageSize", pageSize as Any, minMargins as Any]) }
    public func SetRightMargin(rightMargi: Float) -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "SetRightMargin", rightMargi as Any]) as! Bool }
    public func SetTopMargin(topMargi: Float) -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "SetTopMargin", topMargi as Any]) as! Bool }
    public func SetUnits(units: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetUnits", units as Any]) }
    public func Swap(other: QPageLayout_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "Swap", other as Any]) }
    public func Units() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "Units"]) as! Float) }
    public func DestroyQPageLayout() { _ = callLocalFunction(l: ["", Pointer(), ___className, "DestroyQPageLayout"]) }
}

public func NewQPageLayoutFromPointer(ptr: String) -> QPageLayout { let r = QPageLayout(); r.initFrom(p: ptr, n: "gui.QPageLayout"); return r }
public func NewQPageLayout() -> QPageLayout { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.NewQPageLayout", ""]) as! QPageLayout }
public func NewQPageLayout2(pageSize: QPageSize_ITF? = nil, orientation: Int, margins: QMarginsF_ITF? = nil, units: Int, minMargins: QMarginsF_ITF? = nil) -> QPageLayout { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.NewQPageLayout2", "", pageSize as Any, orientation as Any, margins as Any, units as Any, minMargins as Any]) as! QPageLayout }
public func NewQPageLayout3(other: QPageLayout_ITF? = nil) -> QPageLayout { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.NewQPageLayout3", "", other as Any]) as! QPageLayout }
public protocol QPageSize_ITF {
    func QPageSize_PTR() -> QPageSize
}

public class QPageSize: Internal, QPageSize_ITF {
    public func QPageSize_PTR() -> QPageSize { callLocalFunction(l: ["", Pointer(), ___className, "QPageSize_PTR"]) as! QPageSize }
    public func DefinitionSize() -> QSizeF { callLocalFunction(l: ["", Pointer(), ___className, "DefinitionSize"]) as! QSizeF }
    public func DefinitionSize2(pageSizeId: Int) -> QSizeF { callLocalFunction(l: ["", Pointer(), ___className, "DefinitionSize2", pageSizeId as Any]) as! QSizeF }
    public func DefinitionUnits() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "DefinitionUnits"]) as! Float) }
    public func DefinitionUnits2(pageSizeId: Int) -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "DefinitionUnits2", pageSizeId as Any]) as! Float) }
    public func Id() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "Id"]) as! Float) }
    public func Id2(pointSize: QSize_ITF? = nil, matchPolicy: Int) -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "Id2", pointSize as Any, matchPolicy as Any]) as! Float) }
    public func Id3(size: QSizeF_ITF? = nil, units: Int, matchPolicy: Int) -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "Id3", size as Any, units as Any, matchPolicy as Any]) as! Float) }
    public func Id4(windowsId: Int) -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "Id4", windowsId as Any]) as! Float) }
    public func IsEquivalentTo(other: QPageSize_ITF? = nil) -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "IsEquivalentTo", other as Any]) as! Bool }
    public func IsValid() -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "IsValid"]) as! Bool }
    public func Key() -> String { callLocalFunction(l: ["", Pointer(), ___className, "Key"]) as! String }
    public func Key2(pageSizeId: Int) -> String { callLocalFunction(l: ["", Pointer(), ___className, "Key2", pageSizeId as Any]) as! String }
    public func Name() -> String { callLocalFunction(l: ["", Pointer(), ___className, "Name"]) as! String }
    public func Name2(pageSizeId: Int) -> String { callLocalFunction(l: ["", Pointer(), ___className, "Name2", pageSizeId as Any]) as! String }
    public func Rect(units: Int) -> QRectF { callLocalFunction(l: ["", Pointer(), ___className, "Rect", units as Any]) as! QRectF }
    public func RectPixels(resolution: Int) -> QRect { callLocalFunction(l: ["", Pointer(), ___className, "RectPixels", resolution as Any]) as! QRect }
    public func RectPoints() -> QRect { callLocalFunction(l: ["", Pointer(), ___className, "RectPoints"]) as! QRect }
    public func Size(units: Int) -> QSizeF { callLocalFunction(l: ["", Pointer(), ___className, "Size", units as Any]) as! QSizeF }
    public func Size2(pageSizeId: Int, units: Int) -> QSizeF { callLocalFunction(l: ["", Pointer(), ___className, "Size2", pageSizeId as Any, units as Any]) as! QSizeF }
    public func SizePixels(resolution: Int) -> QSize { callLocalFunction(l: ["", Pointer(), ___className, "SizePixels", resolution as Any]) as! QSize }
    public func SizePixels2(pageSizeId: Int, resolution: Int) -> QSize { callLocalFunction(l: ["", Pointer(), ___className, "SizePixels2", pageSizeId as Any, resolution as Any]) as! QSize }
    public func SizePoints() -> QSize { callLocalFunction(l: ["", Pointer(), ___className, "SizePoints"]) as! QSize }
    public func SizePoints2(pageSizeId: Int) -> QSize { callLocalFunction(l: ["", Pointer(), ___className, "SizePoints2", pageSizeId as Any]) as! QSize }
    public func Swap(other: QPageSize_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "Swap", other as Any]) }
    public func WindowsId() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "WindowsId"]) as! Float) }
    public func WindowsId2(pageSizeId: Int) -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "WindowsId2", pageSizeId as Any]) as! Float) }
    public func DestroyQPageSize() { _ = callLocalFunction(l: ["", Pointer(), ___className, "DestroyQPageSize"]) }
}

public func NewQPageSizeFromPointer(ptr: String) -> QPageSize { let r = QPageSize(); r.initFrom(p: ptr, n: "gui.QPageSize"); return r }
public func NewQPageSize() -> QPageSize { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.NewQPageSize", ""]) as! QPageSize }
public func NewQPageSize2(pageSize: Int) -> QPageSize { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.NewQPageSize2", "", pageSize as Any]) as! QPageSize }
public func NewQPageSize3(pointSize: QSize_ITF? = nil, name: String, matchPolicy: Int) -> QPageSize { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.NewQPageSize3", "", pointSize as Any, name as Any, matchPolicy as Any]) as! QPageSize }
public func NewQPageSize4(size: QSizeF_ITF? = nil, units: Int, name: String, matchPolicy: Int) -> QPageSize { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.NewQPageSize4", "", size as Any, units as Any, name as Any, matchPolicy as Any]) as! QPageSize }
public func NewQPageSize5(other: QPageSize_ITF? = nil) -> QPageSize { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.NewQPageSize5", "", other as Any]) as! QPageSize }
public func QPageSize_DefinitionSize2(pageSizeId: Int) -> QSizeF { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.QPageSize_DefinitionSize2", "", pageSizeId as Any]) as! QSizeF }
public func QPageSize_DefinitionUnits2(pageSizeId: Int) -> Int { Gui.initModule(); return Int(callLocalFunction(l: ["", "", "gui.QPageSize_DefinitionUnits2", "", pageSizeId as Any]) as! Float) }
public func QPageSize_Id2(pointSize: QSize_ITF? = nil, matchPolicy: Int) -> Int { Gui.initModule(); return Int(callLocalFunction(l: ["", "", "gui.QPageSize_Id2", "", pointSize as Any, matchPolicy as Any]) as! Float) }
public func QPageSize_Id3(size: QSizeF_ITF? = nil, units: Int, matchPolicy: Int) -> Int { Gui.initModule(); return Int(callLocalFunction(l: ["", "", "gui.QPageSize_Id3", "", size as Any, units as Any, matchPolicy as Any]) as! Float) }
public func QPageSize_Id4(windowsId: Int) -> Int { Gui.initModule(); return Int(callLocalFunction(l: ["", "", "gui.QPageSize_Id4", "", windowsId as Any]) as! Float) }
public func QPageSize_Key2(pageSizeId: Int) -> String { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.QPageSize_Key2", "", pageSizeId as Any]) as! String }
public func QPageSize_Name2(pageSizeId: Int) -> String { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.QPageSize_Name2", "", pageSizeId as Any]) as! String }
public func QPageSize_Size2(pageSizeId: Int, units: Int) -> QSizeF { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.QPageSize_Size2", "", pageSizeId as Any, units as Any]) as! QSizeF }
public func QPageSize_SizePixels2(pageSizeId: Int, resolution: Int) -> QSize { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.QPageSize_SizePixels2", "", pageSizeId as Any, resolution as Any]) as! QSize }
public func QPageSize_SizePoints2(pageSizeId: Int) -> QSize { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.QPageSize_SizePoints2", "", pageSizeId as Any]) as! QSize }
public func QPageSize_WindowsId2(pageSizeId: Int) -> Int { Gui.initModule(); return Int(callLocalFunction(l: ["", "", "gui.QPageSize_WindowsId2", "", pageSizeId as Any]) as! Float) }
public protocol QPagedPaintDevice_ITF: QPaintDevice_ITF {
    func QPagedPaintDevice_PTR() -> QPagedPaintDevice
}

public class QPagedPaintDevice: QPaintDevice, QPagedPaintDevice_ITF {
    public func QPagedPaintDevice_PTR() -> QPagedPaintDevice { callLocalFunction(l: ["", Pointer(), ___className, "QPagedPaintDevice_PTR"]) as! QPagedPaintDevice }
    public func ConnectNewPage(f: @escaping () -> Bool) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectNewPage", "___REMOTE_CALLBACK___"], f: { (_: [Any]) -> Any in f() } as Any) }
    public func DisconnectNewPage() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectNewPage"]) }
    public func NewPage() -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "NewPage"]) as! Bool }
    public func PageLayout() -> QPageLayout { callLocalFunction(l: ["", Pointer(), ___className, "PageLayout"]) as! QPageLayout }
    public func PageSize() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "PageSize"]) as! Float) }
    public func PageSizeMM() -> QSizeF { callLocalFunction(l: ["", Pointer(), ___className, "PageSizeMM"]) as! QSizeF }
    public func SetPageLayout(newPageLayout: QPageLayout_ITF? = nil) -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "SetPageLayout", newPageLayout as Any]) as! Bool }
    public func SetPageMargins(margins: QMarginsF_ITF? = nil) -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "SetPageMargins", margins as Any]) as! Bool }
    public func SetPageMargins2(margins: QMarginsF_ITF? = nil, units: Int) -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "SetPageMargins2", margins as Any, units as Any]) as! Bool }
    public func SetPageOrientation(orientation: Int) -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "SetPageOrientation", orientation as Any]) as! Bool }
    public func SetPageSize(pageSize: QPageSize_ITF? = nil) -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "SetPageSize", pageSize as Any]) as! Bool }
    public func ConnectSetPageSize2(f: @escaping (_ size: Int) -> Void) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectSetPageSize2", "___REMOTE_CALLBACK___"], f: { (inp: [Any]) -> Any in f(Int(inp[0] as! Float)) } as Any) }
    public func DisconnectSetPageSize2() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectSetPageSize2"]) }
    public func SetPageSize2(size: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetPageSize2", size as Any]) }
    public func SetPageSize2Default(size: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetPageSize2Default", size as Any]) }
    public func ConnectSetPageSizeMM(f: @escaping (_ size: QSizeF) -> Void) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectSetPageSizeMM", "___REMOTE_CALLBACK___"], f: { (inp: [Any]) -> Any in f(inp[0] as! QSizeF) } as Any) }
    public func DisconnectSetPageSizeMM() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectSetPageSizeMM"]) }
    public func SetPageSizeMM(size: QSizeF_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetPageSizeMM", size as Any]) }
    public func SetPageSizeMMDefault(size: QSizeF_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetPageSizeMMDefault", size as Any]) }
    public func ConnectDestroyQPagedPaintDevice(f: @escaping () -> Void) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectDestroyQPagedPaintDevice", "___REMOTE_CALLBACK___"], f: { (_: [Any]) -> Any in f() } as Any) }
    public func DisconnectDestroyQPagedPaintDevice() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectDestroyQPagedPaintDevice"]) }
    public func DestroyQPagedPaintDevice() { _ = callLocalFunction(l: ["", Pointer(), ___className, "DestroyQPagedPaintDevice"]) }
    public func DestroyQPagedPaintDeviceDefault() { _ = callLocalFunction(l: ["", Pointer(), ___className, "DestroyQPagedPaintDeviceDefault"]) }
    override public func PaintEngine() -> QPaintEngine { callLocalFunction(l: ["", Pointer(), ___className, "PaintEngine"]) as! QPaintEngine }
    public func PaintEngineDefault() -> QPaintEngine { callLocalFunction(l: ["", Pointer(), ___className, "PaintEngineDefault"]) as! QPaintEngine }
}

public func NewQPagedPaintDeviceFromPointer(ptr: String) -> QPagedPaintDevice { let r = QPagedPaintDevice(); r.initFrom(p: ptr, n: "gui.QPagedPaintDevice"); return r }
public protocol QPaintDevice_ITF {
    func QPaintDevice_PTR() -> QPaintDevice
}

public class QPaintDevice: Internal, QPaintDevice_ITF {
    public func QPaintDevice_PTR() -> QPaintDevice { callLocalFunction(l: ["", Pointer(), ___className, "QPaintDevice_PTR"]) as! QPaintDevice }
    public func ColorCount() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "ColorCount"]) as! Float) }
    public func Depth() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "Depth"]) as! Float) }
    public func DevicePixelRatio() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "DevicePixelRatio"]) as! Float) }
    public func DevicePixelRatioF() -> Float { callLocalFunction(l: ["", Pointer(), ___className, "DevicePixelRatioF"]) as! Float }
    public func Height() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "Height"]) as! Float) }
    public func HeightMM() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "HeightMM"]) as! Float) }
    public func LogicalDpiX() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "LogicalDpiX"]) as! Float) }
    public func LogicalDpiY() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "LogicalDpiY"]) as! Float) }
    public func ConnectMetric(f: @escaping (_ metric: Int) -> Int) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectMetric", "___REMOTE_CALLBACK___"], f: { (inp: [Any]) -> Any in f(Int(inp[0] as! Float)) } as Any) }
    public func DisconnectMetric() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectMetric"]) }
    public func Metric(metric: Int) -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "Metric", metric as Any]) as! Float) }
    public func MetricDefault(metric: Int) -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "MetricDefault", metric as Any]) as! Float) }
    public func ConnectPaintEngine(f: @escaping () -> QPaintEngine) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectPaintEngine", "___REMOTE_CALLBACK___"], f: { (_: [Any]) -> Any in f() } as Any) }
    public func DisconnectPaintEngine() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectPaintEngine"]) }
    public func PaintEngine() -> QPaintEngine { callLocalFunction(l: ["", Pointer(), ___className, "PaintEngine"]) as! QPaintEngine }
    public func PaintingActive() -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "PaintingActive"]) as! Bool }
    public func PhysicalDpiX() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "PhysicalDpiX"]) as! Float) }
    public func PhysicalDpiY() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "PhysicalDpiY"]) as! Float) }
    public func Width() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "Width"]) as! Float) }
    public func WidthMM() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "WidthMM"]) as! Float) }
    public func ConnectDestroyQPaintDevice(f: @escaping () -> Void) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectDestroyQPaintDevice", "___REMOTE_CALLBACK___"], f: { (_: [Any]) -> Any in f() } as Any) }
    public func DisconnectDestroyQPaintDevice() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectDestroyQPaintDevice"]) }
    public func DestroyQPaintDevice() { _ = callLocalFunction(l: ["", Pointer(), ___className, "DestroyQPaintDevice"]) }
    public func DestroyQPaintDeviceDefault() { _ = callLocalFunction(l: ["", Pointer(), ___className, "DestroyQPaintDeviceDefault"]) }
}

public func NewQPaintDeviceFromPointer(ptr: String) -> QPaintDevice { let r = QPaintDevice(); r.initFrom(p: ptr, n: "gui.QPaintDevice"); return r }
public func NewQPaintDevice() -> QPaintDevice { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.NewQPaintDevice", ""]) as! QPaintDevice }
public protocol QPaintDeviceWindow_ITF: QPaintDevice_ITF {
    func QPaintDeviceWindow_PTR() -> QPaintDeviceWindow
    func QWindow_PTR() -> QWindow
}

public class QPaintDeviceWindow: QPaintDevice, QPaintDeviceWindow_ITF {
    public func QWindow_PTR() -> QWindow { callLocalFunction(l: ["", Pointer(), ___className, "QWindow_PTR"]) as! QWindow }
    public func QPaintDeviceWindow_PTR() -> QPaintDeviceWindow { callLocalFunction(l: ["", Pointer(), ___className, "QPaintDeviceWindow_PTR"]) as! QPaintDeviceWindow }
    public func ConnectPaintEvent(f: @escaping (_ event: QPaintEvent) -> Void) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectPaintEvent", "___REMOTE_CALLBACK___"], f: { (inp: [Any]) -> Any in f(inp[0] as! QPaintEvent) } as Any) }
    public func DisconnectPaintEvent() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectPaintEvent"]) }
    public func PaintEvent(event: QPaintEvent_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "PaintEvent", event as Any]) }
    public func PaintEventDefault(event: QPaintEvent_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "PaintEventDefault", event as Any]) }
    public func Update(rect: QRect_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "Update", rect as Any]) }
    public func Update2(region: QRegion_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "Update2", region as Any]) }
    public func ConnectUpdate3(f: @escaping () -> Void) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectUpdate3", "___REMOTE_CALLBACK___"], f: { (_: [Any]) -> Any in f() } as Any) }
    public func DisconnectUpdate3() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectUpdate3"]) }
    public func Update3() { _ = callLocalFunction(l: ["", Pointer(), ___className, "Update3"]) }
    public func Update3Default() { _ = callLocalFunction(l: ["", Pointer(), ___className, "Update3Default"]) }
    override public func PaintEngine() -> QPaintEngine { callLocalFunction(l: ["", Pointer(), ___className, "PaintEngine"]) as! QPaintEngine }
    public func PaintEngineDefault() -> QPaintEngine { callLocalFunction(l: ["", Pointer(), ___className, "PaintEngineDefault"]) as! QPaintEngine }
}

public func NewQPaintDeviceWindowFromPointer(ptr: String) -> QPaintDeviceWindow { let r = QPaintDeviceWindow(); r.initFrom(p: ptr, n: "gui.QPaintDeviceWindow"); return r }
public protocol QPaintEngine_ITF {
    func QPaintEngine_PTR() -> QPaintEngine
}

public class QPaintEngine: Internal, QPaintEngine_ITF {
    public func QPaintEngine_PTR() -> QPaintEngine { callLocalFunction(l: ["", Pointer(), ___className, "QPaintEngine_PTR"]) as! QPaintEngine }
    public func ConnectBegin(f: @escaping (_ pdev: QPaintDevice) -> Bool) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectBegin", "___REMOTE_CALLBACK___"], f: { (inp: [Any]) -> Any in f(inp[0] as! QPaintDevice) } as Any) }
    public func DisconnectBegin() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectBegin"]) }
    public func Begin(pdev: QPaintDevice_ITF? = nil) -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "Begin", pdev as Any]) as! Bool }
    public func ConnectDrawEllipse(f: @escaping (_ rect: QRectF) -> Void) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectDrawEllipse", "___REMOTE_CALLBACK___"], f: { (inp: [Any]) -> Any in f(inp[0] as! QRectF) } as Any) }
    public func DisconnectDrawEllipse() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectDrawEllipse"]) }
    public func DrawEllipse(rect: QRectF_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "DrawEllipse", rect as Any]) }
    public func DrawEllipseDefault(rect: QRectF_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "DrawEllipseDefault", rect as Any]) }
    public func ConnectDrawEllipse2(f: @escaping (_ rect: QRect) -> Void) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectDrawEllipse2", "___REMOTE_CALLBACK___"], f: { (inp: [Any]) -> Any in f(inp[0] as! QRect) } as Any) }
    public func DisconnectDrawEllipse2() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectDrawEllipse2"]) }
    public func DrawEllipse2(rect: QRect_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "DrawEllipse2", rect as Any]) }
    public func DrawEllipse2Default(rect: QRect_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "DrawEllipse2Default", rect as Any]) }
    public func ConnectDrawImage(f: @escaping (_ rectangle: QRectF, _ image: QImage, _ sr: QRectF, _ flags: Int) -> Void) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectDrawImage", "___REMOTE_CALLBACK___"], f: { (inp: [Any]) -> Any in f(inp[0] as! QRectF, inp[1] as! QImage, inp[2] as! QRectF, Int(inp[3] as! Float)) } as Any) }
    public func DisconnectDrawImage() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectDrawImage"]) }
    public func DrawImage(rectangle: QRectF_ITF? = nil, image: QImage_ITF? = nil, sr: QRectF_ITF? = nil, flags: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "DrawImage", rectangle as Any, image as Any, sr as Any, flags as Any]) }
    public func DrawImageDefault(rectangle: QRectF_ITF? = nil, image: QImage_ITF? = nil, sr: QRectF_ITF? = nil, flags: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "DrawImageDefault", rectangle as Any, image as Any, sr as Any, flags as Any]) }
    public func ConnectDrawLines(f: @escaping (_ lines: QLineF, _ lineCount: Int) -> Void) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectDrawLines", "___REMOTE_CALLBACK___"], f: { (inp: [Any]) -> Any in f(inp[0] as! QLineF, Int(inp[1] as! Float)) } as Any) }
    public func DisconnectDrawLines() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectDrawLines"]) }
    public func DrawLines(lines: QLineF_ITF? = nil, lineCount: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "DrawLines", lines as Any, lineCount as Any]) }
    public func DrawLinesDefault(lines: QLineF_ITF? = nil, lineCount: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "DrawLinesDefault", lines as Any, lineCount as Any]) }
    public func ConnectDrawLines2(f: @escaping (_ lines: QLine, _ lineCount: Int) -> Void) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectDrawLines2", "___REMOTE_CALLBACK___"], f: { (inp: [Any]) -> Any in f(inp[0] as! QLine, Int(inp[1] as! Float)) } as Any) }
    public func DisconnectDrawLines2() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectDrawLines2"]) }
    public func DrawLines2(lines: QLine_ITF? = nil, lineCount: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "DrawLines2", lines as Any, lineCount as Any]) }
    public func DrawLines2Default(lines: QLine_ITF? = nil, lineCount: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "DrawLines2Default", lines as Any, lineCount as Any]) }
    public func ConnectDrawPath(f: @escaping (_ path: QPainterPath) -> Void) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectDrawPath", "___REMOTE_CALLBACK___"], f: { (inp: [Any]) -> Any in f(inp[0] as! QPainterPath) } as Any) }
    public func DisconnectDrawPath() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectDrawPath"]) }
    public func DrawPath(path: QPainterPath_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "DrawPath", path as Any]) }
    public func DrawPathDefault(path: QPainterPath_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "DrawPathDefault", path as Any]) }
    public func ConnectDrawPixmap(f: @escaping (_ r: QRectF, _ pm: QPixmap, _ sr: QRectF) -> Void) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectDrawPixmap", "___REMOTE_CALLBACK___"], f: { (inp: [Any]) -> Any in f(inp[0] as! QRectF, inp[1] as! QPixmap, inp[2] as! QRectF) } as Any) }
    public func DisconnectDrawPixmap() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectDrawPixmap"]) }
    public func DrawPixmap(r: QRectF_ITF? = nil, pm: QPixmap_ITF? = nil, sr: QRectF_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "DrawPixmap", r as Any, pm as Any, sr as Any]) }
    public func ConnectDrawPoints(f: @escaping (_ points: QPointF, _ pointCount: Int) -> Void) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectDrawPoints", "___REMOTE_CALLBACK___"], f: { (inp: [Any]) -> Any in f(inp[0] as! QPointF, Int(inp[1] as! Float)) } as Any) }
    public func DisconnectDrawPoints() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectDrawPoints"]) }
    public func DrawPoints(points: QPointF_ITF? = nil, pointCount: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "DrawPoints", points as Any, pointCount as Any]) }
    public func DrawPointsDefault(points: QPointF_ITF? = nil, pointCount: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "DrawPointsDefault", points as Any, pointCount as Any]) }
    public func ConnectDrawPoints2(f: @escaping (_ points: QPoint, _ pointCount: Int) -> Void) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectDrawPoints2", "___REMOTE_CALLBACK___"], f: { (inp: [Any]) -> Any in f(inp[0] as! QPoint, Int(inp[1] as! Float)) } as Any) }
    public func DisconnectDrawPoints2() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectDrawPoints2"]) }
    public func DrawPoints2(points: QPoint_ITF? = nil, pointCount: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "DrawPoints2", points as Any, pointCount as Any]) }
    public func DrawPoints2Default(points: QPoint_ITF? = nil, pointCount: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "DrawPoints2Default", points as Any, pointCount as Any]) }
    public func ConnectDrawPolygon(f: @escaping (_ points: QPointF, _ pointCount: Int, _ mode: Int) -> Void) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectDrawPolygon", "___REMOTE_CALLBACK___"], f: { (inp: [Any]) -> Any in f(inp[0] as! QPointF, Int(inp[1] as! Float), Int(inp[2] as! Float)) } as Any) }
    public func DisconnectDrawPolygon() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectDrawPolygon"]) }
    public func DrawPolygon(points: QPointF_ITF? = nil, pointCount: Int, mode: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "DrawPolygon", points as Any, pointCount as Any, mode as Any]) }
    public func DrawPolygonDefault(points: QPointF_ITF? = nil, pointCount: Int, mode: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "DrawPolygonDefault", points as Any, pointCount as Any, mode as Any]) }
    public func ConnectDrawPolygon2(f: @escaping (_ points: QPoint, _ pointCount: Int, _ mode: Int) -> Void) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectDrawPolygon2", "___REMOTE_CALLBACK___"], f: { (inp: [Any]) -> Any in f(inp[0] as! QPoint, Int(inp[1] as! Float), Int(inp[2] as! Float)) } as Any) }
    public func DisconnectDrawPolygon2() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectDrawPolygon2"]) }
    public func DrawPolygon2(points: QPoint_ITF? = nil, pointCount: Int, mode: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "DrawPolygon2", points as Any, pointCount as Any, mode as Any]) }
    public func DrawPolygon2Default(points: QPoint_ITF? = nil, pointCount: Int, mode: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "DrawPolygon2Default", points as Any, pointCount as Any, mode as Any]) }
    public func ConnectDrawRects(f: @escaping (_ rects: QRectF, _ rectCount: Int) -> Void) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectDrawRects", "___REMOTE_CALLBACK___"], f: { (inp: [Any]) -> Any in f(inp[0] as! QRectF, Int(inp[1] as! Float)) } as Any) }
    public func DisconnectDrawRects() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectDrawRects"]) }
    public func DrawRects(rects: QRectF_ITF? = nil, rectCount: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "DrawRects", rects as Any, rectCount as Any]) }
    public func DrawRectsDefault(rects: QRectF_ITF? = nil, rectCount: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "DrawRectsDefault", rects as Any, rectCount as Any]) }
    public func ConnectDrawRects2(f: @escaping (_ rects: QRect, _ rectCount: Int) -> Void) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectDrawRects2", "___REMOTE_CALLBACK___"], f: { (inp: [Any]) -> Any in f(inp[0] as! QRect, Int(inp[1] as! Float)) } as Any) }
    public func DisconnectDrawRects2() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectDrawRects2"]) }
    public func DrawRects2(rects: QRect_ITF? = nil, rectCount: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "DrawRects2", rects as Any, rectCount as Any]) }
    public func DrawRects2Default(rects: QRect_ITF? = nil, rectCount: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "DrawRects2Default", rects as Any, rectCount as Any]) }
    public func ConnectDrawTextItem(f: @escaping (_ p: QPointF, _ textItem: QTextItem) -> Void) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectDrawTextItem", "___REMOTE_CALLBACK___"], f: { (inp: [Any]) -> Any in f(inp[0] as! QPointF, inp[1] as! QTextItem) } as Any) }
    public func DisconnectDrawTextItem() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectDrawTextItem"]) }
    public func DrawTextItem(p: QPointF_ITF? = nil, textItem: QTextItem_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "DrawTextItem", p as Any, textItem as Any]) }
    public func DrawTextItemDefault(p: QPointF_ITF? = nil, textItem: QTextItem_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "DrawTextItemDefault", p as Any, textItem as Any]) }
    public func ConnectDrawTiledPixmap(f: @escaping (_ rect: QRectF, _ pixmap: QPixmap, _ p: QPointF) -> Void) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectDrawTiledPixmap", "___REMOTE_CALLBACK___"], f: { (inp: [Any]) -> Any in f(inp[0] as! QRectF, inp[1] as! QPixmap, inp[2] as! QPointF) } as Any) }
    public func DisconnectDrawTiledPixmap() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectDrawTiledPixmap"]) }
    public func DrawTiledPixmap(rect: QRectF_ITF? = nil, pixmap: QPixmap_ITF? = nil, p: QPointF_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "DrawTiledPixmap", rect as Any, pixmap as Any, p as Any]) }
    public func DrawTiledPixmapDefault(rect: QRectF_ITF? = nil, pixmap: QPixmap_ITF? = nil, p: QPointF_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "DrawTiledPixmapDefault", rect as Any, pixmap as Any, p as Any]) }
    public func ConnectEnd(f: @escaping () -> Bool) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectEnd", "___REMOTE_CALLBACK___"], f: { (_: [Any]) -> Any in f() } as Any) }
    public func DisconnectEnd() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectEnd"]) }
    public func End() -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "End"]) as! Bool }
    public func HasFeature(feature: Int) -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "HasFeature", feature as Any]) as! Bool }
    public func IsActive() -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "IsActive"]) as! Bool }
    public func PaintDevice() -> QPaintDevice { callLocalFunction(l: ["", Pointer(), ___className, "PaintDevice"]) as! QPaintDevice }
    public func Painter() -> QPainter { callLocalFunction(l: ["", Pointer(), ___className, "Painter"]) as! QPainter }
    public func SetActive(state: Bool) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetActive", state as Any]) }
    public func ConnectType(f: @escaping () -> Int) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectType", "___REMOTE_CALLBACK___"], f: { (_: [Any]) -> Any in f() } as Any) }
    public func DisconnectType() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectType"]) }
    public func Type() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "Type"]) as! Float) }
    public func ConnectUpdateState(f: @escaping (_ state: QPaintEngineState) -> Void) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectUpdateState", "___REMOTE_CALLBACK___"], f: { (inp: [Any]) -> Any in f(inp[0] as! QPaintEngineState) } as Any) }
    public func DisconnectUpdateState() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectUpdateState"]) }
    public func UpdateState(state: QPaintEngineState_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "UpdateState", state as Any]) }
    public func ConnectDestroyQPaintEngine(f: @escaping () -> Void) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectDestroyQPaintEngine", "___REMOTE_CALLBACK___"], f: { (_: [Any]) -> Any in f() } as Any) }
    public func DisconnectDestroyQPaintEngine() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectDestroyQPaintEngine"]) }
    public func DestroyQPaintEngine() { _ = callLocalFunction(l: ["", Pointer(), ___className, "DestroyQPaintEngine"]) }
    public func DestroyQPaintEngineDefault() { _ = callLocalFunction(l: ["", Pointer(), ___className, "DestroyQPaintEngineDefault"]) }
}

public func NewQPaintEngineFromPointer(ptr: String) -> QPaintEngine { let r = QPaintEngine(); r.initFrom(p: ptr, n: "gui.QPaintEngine"); return r }
public func NewQPaintEngine(caps: Int) -> QPaintEngine { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.NewQPaintEngine", "", caps as Any]) as! QPaintEngine }
public protocol QPaintEngineState_ITF {
    func QPaintEngineState_PTR() -> QPaintEngineState
}

public class QPaintEngineState: Internal, QPaintEngineState_ITF {
    public func QPaintEngineState_PTR() -> QPaintEngineState { callLocalFunction(l: ["", Pointer(), ___className, "QPaintEngineState_PTR"]) as! QPaintEngineState }
    public func DestroyQPaintEngineState() { _ = callLocalFunction(l: ["", Pointer(), ___className, "DestroyQPaintEngineState"]) }
    public func BackgroundBrush() -> QBrush { callLocalFunction(l: ["", Pointer(), ___className, "BackgroundBrush"]) as! QBrush }
    public func BackgroundMode() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "BackgroundMode"]) as! Float) }
    public func Brush() -> QBrush { callLocalFunction(l: ["", Pointer(), ___className, "Brush"]) as! QBrush }
    public func BrushNeedsResolving() -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "BrushNeedsResolving"]) as! Bool }
    public func BrushOrigin() -> QPointF { callLocalFunction(l: ["", Pointer(), ___className, "BrushOrigin"]) as! QPointF }
    public func ClipOperation() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "ClipOperation"]) as! Float) }
    public func ClipPath() -> QPainterPath { callLocalFunction(l: ["", Pointer(), ___className, "ClipPath"]) as! QPainterPath }
    public func ClipRegion() -> QRegion { callLocalFunction(l: ["", Pointer(), ___className, "ClipRegion"]) as! QRegion }
    public func CompositionMode() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "CompositionMode"]) as! Float) }
    public func Font() -> QFont { callLocalFunction(l: ["", Pointer(), ___className, "Font"]) as! QFont }
    public func IsClipEnabled() -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "IsClipEnabled"]) as! Bool }
    public func Opacity() -> Float { callLocalFunction(l: ["", Pointer(), ___className, "Opacity"]) as! Float }
    public func Painter() -> QPainter { callLocalFunction(l: ["", Pointer(), ___className, "Painter"]) as! QPainter }
    public func Pen() -> QPen { callLocalFunction(l: ["", Pointer(), ___className, "Pen"]) as! QPen }
    public func PenNeedsResolving() -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "PenNeedsResolving"]) as! Bool }
    public func RenderHints() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "RenderHints"]) as! Float) }
    public func State() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "State"]) as! Float) }
    public func Transform() -> QTransform { callLocalFunction(l: ["", Pointer(), ___className, "Transform"]) as! QTransform }
}

public func NewQPaintEngineStateFromPointer(ptr: String) -> QPaintEngineState { let r = QPaintEngineState(); r.initFrom(p: ptr, n: "gui.QPaintEngineState"); return r }
public protocol QPaintEvent_ITF: QEvent_ITF {
    func QPaintEvent_PTR() -> QPaintEvent
}

public class QPaintEvent: QEvent, QPaintEvent_ITF {
    public func QPaintEvent_PTR() -> QPaintEvent { callLocalFunction(l: ["", Pointer(), ___className, "QPaintEvent_PTR"]) as! QPaintEvent }
    public func DestroyQPaintEvent() { _ = callLocalFunction(l: ["", Pointer(), ___className, "DestroyQPaintEvent"]) }
    public func Rect() -> QRect { callLocalFunction(l: ["", Pointer(), ___className, "Rect"]) as! QRect }
    public func Region() -> QRegion { callLocalFunction(l: ["", Pointer(), ___className, "Region"]) as! QRegion }
}

public func NewQPaintEventFromPointer(ptr: String) -> QPaintEvent { let r = QPaintEvent(); r.initFrom(p: ptr, n: "gui.QPaintEvent"); return r }
public func NewQPaintEvent(paintRegion: QRegion_ITF? = nil) -> QPaintEvent { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.NewQPaintEvent", "", paintRegion as Any]) as! QPaintEvent }
public func NewQPaintEvent2(paintRect: QRect_ITF? = nil) -> QPaintEvent { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.NewQPaintEvent2", "", paintRect as Any]) as! QPaintEvent }
public protocol QPainter_ITF {
    func QPainter_PTR() -> QPainter
}

public class QPainter: Internal, QPainter_ITF {
    public func QPainter_PTR() -> QPainter { callLocalFunction(l: ["", Pointer(), ___className, "QPainter_PTR"]) as! QPainter }
    public func Background() -> QBrush { callLocalFunction(l: ["", Pointer(), ___className, "Background"]) as! QBrush }
    public func BackgroundMode() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "BackgroundMode"]) as! Float) }
    public func Begin(device: QPaintDevice_ITF? = nil) -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "Begin", device as Any]) as! Bool }
    public func BeginNativePainting() { _ = callLocalFunction(l: ["", Pointer(), ___className, "BeginNativePainting"]) }
    public func BoundingRect(rectangle: QRectF_ITF? = nil, flags: Int, text: String) -> QRectF { callLocalFunction(l: ["", Pointer(), ___className, "BoundingRect", rectangle as Any, flags as Any, text as Any]) as! QRectF }
    public func BoundingRect2(rectangle: QRect_ITF? = nil, flags: Int, text: String) -> QRect { callLocalFunction(l: ["", Pointer(), ___className, "BoundingRect2", rectangle as Any, flags as Any, text as Any]) as! QRect }
    public func BoundingRect3(x: Int, y: Int, w: Int, h: Int, flags: Int, text: String) -> QRect { callLocalFunction(l: ["", Pointer(), ___className, "BoundingRect3", x as Any, y as Any, w as Any, h as Any, flags as Any, text as Any]) as! QRect }
    public func BoundingRect4(rectangle: QRectF_ITF? = nil, text: String, option: QTextOption_ITF? = nil) -> QRectF { callLocalFunction(l: ["", Pointer(), ___className, "BoundingRect4", rectangle as Any, text as Any, option as Any]) as! QRectF }
    public func Brush() -> QBrush { callLocalFunction(l: ["", Pointer(), ___className, "Brush"]) as! QBrush }
    public func BrushOrigin() -> QPoint { callLocalFunction(l: ["", Pointer(), ___className, "BrushOrigin"]) as! QPoint }
    public func ClipBoundingRect() -> QRectF { callLocalFunction(l: ["", Pointer(), ___className, "ClipBoundingRect"]) as! QRectF }
    public func ClipPath() -> QPainterPath { callLocalFunction(l: ["", Pointer(), ___className, "ClipPath"]) as! QPainterPath }
    public func ClipRegion() -> QRegion { callLocalFunction(l: ["", Pointer(), ___className, "ClipRegion"]) as! QRegion }
    public func CombinedTransform() -> QTransform { callLocalFunction(l: ["", Pointer(), ___className, "CombinedTransform"]) as! QTransform }
    public func CompositionMode() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "CompositionMode"]) as! Float) }
    public func Device() -> QPaintDevice { callLocalFunction(l: ["", Pointer(), ___className, "Device"]) as! QPaintDevice }
    public func DeviceTransform() -> QTransform { callLocalFunction(l: ["", Pointer(), ___className, "DeviceTransform"]) as! QTransform }
    public func DrawArc(rectangle: QRectF_ITF? = nil, startAngle: Int, spanAngle: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "DrawArc", rectangle as Any, startAngle as Any, spanAngle as Any]) }
    public func DrawArc2(rectangle: QRect_ITF? = nil, startAngle: Int, spanAngle: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "DrawArc2", rectangle as Any, startAngle as Any, spanAngle as Any]) }
    public func DrawArc3(x: Int, y: Int, width: Int, height: Int, startAngle: Int, spanAngle: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "DrawArc3", x as Any, y as Any, width as Any, height as Any, startAngle as Any, spanAngle as Any]) }
    public func DrawChord(rectangle: QRectF_ITF? = nil, startAngle: Int, spanAngle: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "DrawChord", rectangle as Any, startAngle as Any, spanAngle as Any]) }
    public func DrawChord2(x: Int, y: Int, width: Int, height: Int, startAngle: Int, spanAngle: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "DrawChord2", x as Any, y as Any, width as Any, height as Any, startAngle as Any, spanAngle as Any]) }
    public func DrawChord3(rectangle: QRect_ITF? = nil, startAngle: Int, spanAngle: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "DrawChord3", rectangle as Any, startAngle as Any, spanAngle as Any]) }
    public func DrawConvexPolygon(points: QPointF_ITF? = nil, pointCount: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "DrawConvexPolygon", points as Any, pointCount as Any]) }
    public func DrawConvexPolygon2(polygon: QPolygonF_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "DrawConvexPolygon2", polygon as Any]) }
    public func DrawConvexPolygon3(points: QPoint_ITF? = nil, pointCount: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "DrawConvexPolygon3", points as Any, pointCount as Any]) }
    public func DrawConvexPolygon4(polygon: QPolygon_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "DrawConvexPolygon4", polygon as Any]) }
    public func DrawEllipse(rectangle: QRectF_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "DrawEllipse", rectangle as Any]) }
    public func DrawEllipse2(rectangle: QRect_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "DrawEllipse2", rectangle as Any]) }
    public func DrawEllipse3(x: Int, y: Int, width: Int, height: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "DrawEllipse3", x as Any, y as Any, width as Any, height as Any]) }
    public func DrawEllipse4(center: QPointF_ITF? = nil, rx: Float, ry: Float) { _ = callLocalFunction(l: ["", Pointer(), ___className, "DrawEllipse4", center as Any, rx as Any, ry as Any]) }
    public func DrawEllipse5(center: QPoint_ITF? = nil, rx: Int, ry: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "DrawEllipse5", center as Any, rx as Any, ry as Any]) }
    public func DrawGlyphRun(position: QPointF_ITF? = nil, glyphs: QGlyphRun_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "DrawGlyphRun", position as Any, glyphs as Any]) }
    public func DrawImage(target: QRectF_ITF? = nil, image: QImage_ITF? = nil, source: QRectF_ITF? = nil, flags: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "DrawImage", target as Any, image as Any, source as Any, flags as Any]) }
    public func DrawImage2(target: QRect_ITF? = nil, image: QImage_ITF? = nil, source: QRect_ITF? = nil, flags: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "DrawImage2", target as Any, image as Any, source as Any, flags as Any]) }
    public func DrawImage3(point: QPointF_ITF? = nil, image: QImage_ITF? = nil, source: QRectF_ITF? = nil, flags: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "DrawImage3", point as Any, image as Any, source as Any, flags as Any]) }
    public func DrawImage4(point: QPoint_ITF? = nil, image: QImage_ITF? = nil, source: QRect_ITF? = nil, flags: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "DrawImage4", point as Any, image as Any, source as Any, flags as Any]) }
    public func DrawImage5(rectangle: QRectF_ITF? = nil, image: QImage_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "DrawImage5", rectangle as Any, image as Any]) }
    public func DrawImage6(rectangle: QRect_ITF? = nil, image: QImage_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "DrawImage6", rectangle as Any, image as Any]) }
    public func DrawImage7(point: QPointF_ITF? = nil, image: QImage_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "DrawImage7", point as Any, image as Any]) }
    public func DrawImage8(point: QPoint_ITF? = nil, image: QImage_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "DrawImage8", point as Any, image as Any]) }
    public func DrawImage9(x: Int, y: Int, image: QImage_ITF? = nil, sx: Int, sy: Int, sw: Int, sh: Int, flags: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "DrawImage9", x as Any, y as Any, image as Any, sx as Any, sy as Any, sw as Any, sh as Any, flags as Any]) }
    public func DrawLine(line: QLineF_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "DrawLine", line as Any]) }
    public func DrawLine2(line: QLine_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "DrawLine2", line as Any]) }
    public func DrawLine3(x1: Int, y1: Int, x2: Int, y2: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "DrawLine3", x1 as Any, y1 as Any, x2 as Any, y2 as Any]) }
    public func DrawLine4(p1: QPoint_ITF? = nil, p2: QPoint_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "DrawLine4", p1 as Any, p2 as Any]) }
    public func DrawLine5(p1: QPointF_ITF? = nil, p2: QPointF_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "DrawLine5", p1 as Any, p2 as Any]) }
    public func DrawLines(lines: QLineF_ITF? = nil, lineCount: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "DrawLines", lines as Any, lineCount as Any]) }
    public func DrawLines2(lines: [QLineF]) { _ = callLocalFunction(l: ["", Pointer(), ___className, "DrawLines2", lines as Any]) }
    public func DrawLines3(pointPairs: QPointF_ITF? = nil, lineCount: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "DrawLines3", pointPairs as Any, lineCount as Any]) }
    public func DrawLines4(pointPairs: [QPointF]) { _ = callLocalFunction(l: ["", Pointer(), ___className, "DrawLines4", pointPairs as Any]) }
    public func DrawLines5(lines: QLine_ITF? = nil, lineCount: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "DrawLines5", lines as Any, lineCount as Any]) }
    public func DrawLines6(lines: [QLine]) { _ = callLocalFunction(l: ["", Pointer(), ___className, "DrawLines6", lines as Any]) }
    public func DrawLines7(pointPairs: QPoint_ITF? = nil, lineCount: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "DrawLines7", pointPairs as Any, lineCount as Any]) }
    public func DrawLines8(pointPairs: [QPoint]) { _ = callLocalFunction(l: ["", Pointer(), ___className, "DrawLines8", pointPairs as Any]) }
    public func DrawPath(path: QPainterPath_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "DrawPath", path as Any]) }
    public func DrawPicture(point: QPointF_ITF? = nil, picture: QPicture_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "DrawPicture", point as Any, picture as Any]) }
    public func DrawPicture2(x: Int, y: Int, picture: QPicture_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "DrawPicture2", x as Any, y as Any, picture as Any]) }
    public func DrawPicture3(point: QPoint_ITF? = nil, picture: QPicture_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "DrawPicture3", point as Any, picture as Any]) }
    public func DrawPie(rectangle: QRectF_ITF? = nil, startAngle: Int, spanAngle: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "DrawPie", rectangle as Any, startAngle as Any, spanAngle as Any]) }
    public func DrawPie2(x: Int, y: Int, width: Int, height: Int, startAngle: Int, spanAngle: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "DrawPie2", x as Any, y as Any, width as Any, height as Any, startAngle as Any, spanAngle as Any]) }
    public func DrawPie3(rectangle: QRect_ITF? = nil, startAngle: Int, spanAngle: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "DrawPie3", rectangle as Any, startAngle as Any, spanAngle as Any]) }
    public func DrawPixmap(target: QRectF_ITF? = nil, pixmap: QPixmap_ITF? = nil, source: QRectF_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "DrawPixmap", target as Any, pixmap as Any, source as Any]) }
    public func DrawPixmap2(target: QRect_ITF? = nil, pixmap: QPixmap_ITF? = nil, source: QRect_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "DrawPixmap2", target as Any, pixmap as Any, source as Any]) }
    public func DrawPixmap3(x: Int, y: Int, w: Int, h: Int, pixmap: QPixmap_ITF? = nil, sx: Int, sy: Int, sw: Int, sh: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "DrawPixmap3", x as Any, y as Any, w as Any, h as Any, pixmap as Any, sx as Any, sy as Any, sw as Any, sh as Any]) }
    public func DrawPixmap4(x: Int, y: Int, pixmap: QPixmap_ITF? = nil, sx: Int, sy: Int, sw: Int, sh: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "DrawPixmap4", x as Any, y as Any, pixmap as Any, sx as Any, sy as Any, sw as Any, sh as Any]) }
    public func DrawPixmap5(point: QPointF_ITF? = nil, pixmap: QPixmap_ITF? = nil, source: QRectF_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "DrawPixmap5", point as Any, pixmap as Any, source as Any]) }
    public func DrawPixmap6(point: QPoint_ITF? = nil, pixmap: QPixmap_ITF? = nil, source: QRect_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "DrawPixmap6", point as Any, pixmap as Any, source as Any]) }
    public func DrawPixmap7(point: QPointF_ITF? = nil, pixmap: QPixmap_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "DrawPixmap7", point as Any, pixmap as Any]) }
    public func DrawPixmap8(point: QPoint_ITF? = nil, pixmap: QPixmap_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "DrawPixmap8", point as Any, pixmap as Any]) }
    public func DrawPixmap9(x: Int, y: Int, pixmap: QPixmap_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "DrawPixmap9", x as Any, y as Any, pixmap as Any]) }
    public func DrawPixmap10(rectangle: QRect_ITF? = nil, pixmap: QPixmap_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "DrawPixmap10", rectangle as Any, pixmap as Any]) }
    public func DrawPixmap11(x: Int, y: Int, width: Int, height: Int, pixmap: QPixmap_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "DrawPixmap11", x as Any, y as Any, width as Any, height as Any, pixmap as Any]) }
    public func DrawPoint(position: QPointF_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "DrawPoint", position as Any]) }
    public func DrawPoint2(position: QPoint_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "DrawPoint2", position as Any]) }
    public func DrawPoint3(x: Int, y: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "DrawPoint3", x as Any, y as Any]) }
    public func DrawPoints(points: QPointF_ITF? = nil, pointCount: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "DrawPoints", points as Any, pointCount as Any]) }
    public func DrawPoints2(points: QPolygonF_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "DrawPoints2", points as Any]) }
    public func DrawPoints3(points: QPoint_ITF? = nil, pointCount: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "DrawPoints3", points as Any, pointCount as Any]) }
    public func DrawPoints4(points: QPolygon_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "DrawPoints4", points as Any]) }
    public func DrawPolygon(points: QPointF_ITF? = nil, pointCount: Int, fillRule: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "DrawPolygon", points as Any, pointCount as Any, fillRule as Any]) }
    public func DrawPolygon2(points: QPolygonF_ITF? = nil, fillRule: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "DrawPolygon2", points as Any, fillRule as Any]) }
    public func DrawPolygon3(points: QPoint_ITF? = nil, pointCount: Int, fillRule: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "DrawPolygon3", points as Any, pointCount as Any, fillRule as Any]) }
    public func DrawPolygon4(points: QPolygon_ITF? = nil, fillRule: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "DrawPolygon4", points as Any, fillRule as Any]) }
    public func DrawPolyline(points: QPointF_ITF? = nil, pointCount: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "DrawPolyline", points as Any, pointCount as Any]) }
    public func DrawPolyline2(points: QPolygonF_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "DrawPolyline2", points as Any]) }
    public func DrawPolyline3(points: QPoint_ITF? = nil, pointCount: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "DrawPolyline3", points as Any, pointCount as Any]) }
    public func DrawPolyline4(points: QPolygon_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "DrawPolyline4", points as Any]) }
    public func DrawRect(rectangle: QRectF_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "DrawRect", rectangle as Any]) }
    public func DrawRect2(x: Int, y: Int, width: Int, height: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "DrawRect2", x as Any, y as Any, width as Any, height as Any]) }
    public func DrawRect3(rectangle: QRect_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "DrawRect3", rectangle as Any]) }
    public func DrawRects(rectangles: QRectF_ITF? = nil, rectCount: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "DrawRects", rectangles as Any, rectCount as Any]) }
    public func DrawRects2(rectangles: [QRectF]) { _ = callLocalFunction(l: ["", Pointer(), ___className, "DrawRects2", rectangles as Any]) }
    public func DrawRects3(rectangles: QRect_ITF? = nil, rectCount: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "DrawRects3", rectangles as Any, rectCount as Any]) }
    public func DrawRects4(rectangles: [QRect]) { _ = callLocalFunction(l: ["", Pointer(), ___className, "DrawRects4", rectangles as Any]) }
    public func DrawRoundedRect(rect: QRectF_ITF? = nil, xRadius: Float, yRadius: Float, mode: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "DrawRoundedRect", rect as Any, xRadius as Any, yRadius as Any, mode as Any]) }
    public func DrawRoundedRect2(x: Int, y: Int, w: Int, h: Int, xRadius: Float, yRadius: Float, mode: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "DrawRoundedRect2", x as Any, y as Any, w as Any, h as Any, xRadius as Any, yRadius as Any, mode as Any]) }
    public func DrawRoundedRect3(rect: QRect_ITF? = nil, xRadius: Float, yRadius: Float, mode: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "DrawRoundedRect3", rect as Any, xRadius as Any, yRadius as Any, mode as Any]) }
    public func DrawStaticText(topLeftPosition: QPointF_ITF? = nil, staticText: QStaticText_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "DrawStaticText", topLeftPosition as Any, staticText as Any]) }
    public func DrawStaticText2(topLeftPosition: QPoint_ITF? = nil, staticText: QStaticText_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "DrawStaticText2", topLeftPosition as Any, staticText as Any]) }
    public func DrawStaticText3(left: Int, top: Int, staticText: QStaticText_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "DrawStaticText3", left as Any, top as Any, staticText as Any]) }
    public func DrawText(position: QPointF_ITF? = nil, text: String) { _ = callLocalFunction(l: ["", Pointer(), ___className, "DrawText", position as Any, text as Any]) }
    public func DrawText2(position: QPoint_ITF? = nil, text: String) { _ = callLocalFunction(l: ["", Pointer(), ___className, "DrawText2", position as Any, text as Any]) }
    public func DrawText3(x: Int, y: Int, text: String) { _ = callLocalFunction(l: ["", Pointer(), ___className, "DrawText3", x as Any, y as Any, text as Any]) }
    public func DrawText4(rectangle: QRect_ITF? = nil, flags: Int, text: String, boundingRect: QRect_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "DrawText4", rectangle as Any, flags as Any, text as Any, boundingRect as Any]) }
    public func DrawText5(x: Int, y: Int, width: Int, height: Int, flags: Int, text: String, boundingRect: QRect_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "DrawText5", x as Any, y as Any, width as Any, height as Any, flags as Any, text as Any, boundingRect as Any]) }
    public func DrawText6(rectangle: QRectF_ITF? = nil, text: String, option: QTextOption_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "DrawText6", rectangle as Any, text as Any, option as Any]) }
    public func DrawTiledPixmap(rectangle: QRectF_ITF? = nil, pixmap: QPixmap_ITF? = nil, position: QPointF_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "DrawTiledPixmap", rectangle as Any, pixmap as Any, position as Any]) }
    public func DrawTiledPixmap2(x: Int, y: Int, width: Int, height: Int, pixmap: QPixmap_ITF? = nil, sx: Int, sy: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "DrawTiledPixmap2", x as Any, y as Any, width as Any, height as Any, pixmap as Any, sx as Any, sy as Any]) }
    public func DrawTiledPixmap3(rectangle: QRect_ITF? = nil, pixmap: QPixmap_ITF? = nil, position: QPoint_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "DrawTiledPixmap3", rectangle as Any, pixmap as Any, position as Any]) }
    public func End() -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "End"]) as! Bool }
    public func EndNativePainting() { _ = callLocalFunction(l: ["", Pointer(), ___className, "EndNativePainting"]) }
    public func EraseRect(rectangle: QRectF_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "EraseRect", rectangle as Any]) }
    public func EraseRect2(x: Int, y: Int, width: Int, height: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "EraseRect2", x as Any, y as Any, width as Any, height as Any]) }
    public func EraseRect3(rectangle: QRect_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "EraseRect3", rectangle as Any]) }
    public func FillPath(path: QPainterPath_ITF? = nil, brush: QBrush_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "FillPath", path as Any, brush as Any]) }
    public func FillRect(rectangle: QRectF_ITF? = nil, brush: QBrush_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "FillRect", rectangle as Any, brush as Any]) }
    public func FillRect2(x: Int, y: Int, width: Int, height: Int, brush: QBrush_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "FillRect2", x as Any, y as Any, width as Any, height as Any, brush as Any]) }
    public func FillRect3(rectangle: QRect_ITF? = nil, brush: QBrush_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "FillRect3", rectangle as Any, brush as Any]) }
    public func FillRect4(rectangle: QRectF_ITF? = nil, color: QColor_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "FillRect4", rectangle as Any, color as Any]) }
    public func FillRect5(x: Int, y: Int, width: Int, height: Int, color: QColor_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "FillRect5", x as Any, y as Any, width as Any, height as Any, color as Any]) }
    public func FillRect6(rectangle: QRect_ITF? = nil, color: QColor_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "FillRect6", rectangle as Any, color as Any]) }
    public func FillRect7(x: Int, y: Int, width: Int, height: Int, color: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "FillRect7", x as Any, y as Any, width as Any, height as Any, color as Any]) }
    public func FillRect8(rectangle: QRect_ITF? = nil, color: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "FillRect8", rectangle as Any, color as Any]) }
    public func FillRect9(rectangle: QRectF_ITF? = nil, color: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "FillRect9", rectangle as Any, color as Any]) }
    public func FillRect10(x: Int, y: Int, width: Int, height: Int, style: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "FillRect10", x as Any, y as Any, width as Any, height as Any, style as Any]) }
    public func FillRect11(rectangle: QRect_ITF? = nil, style: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "FillRect11", rectangle as Any, style as Any]) }
    public func FillRect12(rectangle: QRectF_ITF? = nil, style: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "FillRect12", rectangle as Any, style as Any]) }
    public func FillRect13(x: Int, y: Int, width: Int, height: Int, preset: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "FillRect13", x as Any, y as Any, width as Any, height as Any, preset as Any]) }
    public func FillRect14(rectangle: QRect_ITF? = nil, preset: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "FillRect14", rectangle as Any, preset as Any]) }
    public func FillRect15(rectangle: QRectF_ITF? = nil, preset: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "FillRect15", rectangle as Any, preset as Any]) }
    public func Font() -> QFont { callLocalFunction(l: ["", Pointer(), ___className, "Font"]) as! QFont }
    public func FontInfo() -> QFontInfo { callLocalFunction(l: ["", Pointer(), ___className, "FontInfo"]) as! QFontInfo }
    public func FontMetrics() -> QFontMetrics { callLocalFunction(l: ["", Pointer(), ___className, "FontMetrics"]) as! QFontMetrics }
    public func HasClipping() -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "HasClipping"]) as! Bool }
    public func IsActive() -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "IsActive"]) as! Bool }
    public func LayoutDirection() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "LayoutDirection"]) as! Float) }
    public func Opacity() -> Float { callLocalFunction(l: ["", Pointer(), ___className, "Opacity"]) as! Float }
    public func PaintEngine() -> QPaintEngine { callLocalFunction(l: ["", Pointer(), ___className, "PaintEngine"]) as! QPaintEngine }
    public func Pen() -> QPen { callLocalFunction(l: ["", Pointer(), ___className, "Pen"]) as! QPen }
    public func RenderHints() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "RenderHints"]) as! Float) }
    public func ResetTransform() { _ = callLocalFunction(l: ["", Pointer(), ___className, "ResetTransform"]) }
    public func Restore() { _ = callLocalFunction(l: ["", Pointer(), ___className, "Restore"]) }
    public func Rotate(angle: Float) { _ = callLocalFunction(l: ["", Pointer(), ___className, "Rotate", angle as Any]) }
    public func Save() { _ = callLocalFunction(l: ["", Pointer(), ___className, "Save"]) }
    public func Scale(sx: Float, sy: Float) { _ = callLocalFunction(l: ["", Pointer(), ___className, "Scale", sx as Any, sy as Any]) }
    public func SetBackground(brush: QBrush_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetBackground", brush as Any]) }
    public func SetBackgroundMode(mode: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetBackgroundMode", mode as Any]) }
    public func SetBrush(brush: QBrush_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetBrush", brush as Any]) }
    public func SetBrush2(style: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetBrush2", style as Any]) }
    public func SetBrushOrigin(position: QPointF_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetBrushOrigin", position as Any]) }
    public func SetBrushOrigin2(x: Int, y: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetBrushOrigin2", x as Any, y as Any]) }
    public func SetBrushOrigin3(position: QPoint_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetBrushOrigin3", position as Any]) }
    public func SetClipPath(path: QPainterPath_ITF? = nil, operation: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetClipPath", path as Any, operation as Any]) }
    public func SetClipRect(rectangle: QRectF_ITF? = nil, operation: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetClipRect", rectangle as Any, operation as Any]) }
    public func SetClipRect2(rectangle: QRect_ITF? = nil, operation: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetClipRect2", rectangle as Any, operation as Any]) }
    public func SetClipRect3(x: Int, y: Int, width: Int, height: Int, operation: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetClipRect3", x as Any, y as Any, width as Any, height as Any, operation as Any]) }
    public func SetClipRegion(region: QRegion_ITF? = nil, operation: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetClipRegion", region as Any, operation as Any]) }
    public func SetClipping(enable: Bool) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetClipping", enable as Any]) }
    public func SetCompositionMode(mode: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetCompositionMode", mode as Any]) }
    public func SetFont(font: QFont_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetFont", font as Any]) }
    public func SetLayoutDirection(direction: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetLayoutDirection", direction as Any]) }
    public func SetOpacity(opacity: Float) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetOpacity", opacity as Any]) }
    public func SetPen(pen: QPen_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetPen", pen as Any]) }
    public func SetPen2(color: QColor_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetPen2", color as Any]) }
    public func SetPen3(style: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetPen3", style as Any]) }
    public func SetRenderHint(hint: Int, on: Bool) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetRenderHint", hint as Any, on as Any]) }
    public func SetRenderHints(hints: Int, on: Bool) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetRenderHints", hints as Any, on as Any]) }
    public func SetTransform(transform: QTransform_ITF? = nil, combine: Bool) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetTransform", transform as Any, combine as Any]) }
    public func SetViewTransformEnabled(enable: Bool) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetViewTransformEnabled", enable as Any]) }
    public func SetViewport(rectangle: QRect_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetViewport", rectangle as Any]) }
    public func SetViewport2(x: Int, y: Int, width: Int, height: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetViewport2", x as Any, y as Any, width as Any, height as Any]) }
    public func SetWindow(rectangle: QRect_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetWindow", rectangle as Any]) }
    public func SetWindow2(x: Int, y: Int, width: Int, height: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetWindow2", x as Any, y as Any, width as Any, height as Any]) }
    public func SetWorldMatrixEnabled(enable: Bool) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetWorldMatrixEnabled", enable as Any]) }
    public func SetWorldTransform(matrix: QTransform_ITF? = nil, combine: Bool) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetWorldTransform", matrix as Any, combine as Any]) }
    public func Shear(sh: Float, sv: Float) { _ = callLocalFunction(l: ["", Pointer(), ___className, "Shear", sh as Any, sv as Any]) }
    public func StrokePath(path: QPainterPath_ITF? = nil, pen: QPen_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "StrokePath", path as Any, pen as Any]) }
    public func TestRenderHint(hint: Int) -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "TestRenderHint", hint as Any]) as! Bool }
    public func Transform() -> QTransform { callLocalFunction(l: ["", Pointer(), ___className, "Transform"]) as! QTransform }
    public func Translate(offset: QPointF_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "Translate", offset as Any]) }
    public func Translate2(offset: QPoint_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "Translate2", offset as Any]) }
    public func Translate3(dx: Float, dy: Float) { _ = callLocalFunction(l: ["", Pointer(), ___className, "Translate3", dx as Any, dy as Any]) }
    public func ViewTransformEnabled() -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "ViewTransformEnabled"]) as! Bool }
    public func Viewport() -> QRect { callLocalFunction(l: ["", Pointer(), ___className, "Viewport"]) as! QRect }
    public func Window() -> QRect { callLocalFunction(l: ["", Pointer(), ___className, "Window"]) as! QRect }
    public func WorldMatrixEnabled() -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "WorldMatrixEnabled"]) as! Bool }
    public func WorldTransform() -> QTransform { callLocalFunction(l: ["", Pointer(), ___className, "WorldTransform"]) as! QTransform }
    public func DestroyQPainter() { _ = callLocalFunction(l: ["", Pointer(), ___className, "DestroyQPainter"]) }
}

public func NewQPainterFromPointer(ptr: String) -> QPainter { let r = QPainter(); r.initFrom(p: ptr, n: "gui.QPainter"); return r }
public func NewQPainter() -> QPainter { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.NewQPainter", ""]) as! QPainter }
public func NewQPainter2(device: QPaintDevice_ITF? = nil) -> QPainter { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.NewQPainter2", "", device as Any]) as! QPainter }
public protocol QPainterPath_ITF {
    func QPainterPath_PTR() -> QPainterPath
}

public class QPainterPath: Internal, QPainterPath_ITF {
    public func QPainterPath_PTR() -> QPainterPath { callLocalFunction(l: ["", Pointer(), ___className, "QPainterPath_PTR"]) as! QPainterPath }
    public func AddEllipse(boundingRectangle: QRectF_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "AddEllipse", boundingRectangle as Any]) }
    public func AddEllipse2(x: Float, y: Float, width: Float, height: Float) { _ = callLocalFunction(l: ["", Pointer(), ___className, "AddEllipse2", x as Any, y as Any, width as Any, height as Any]) }
    public func AddEllipse3(center: QPointF_ITF? = nil, rx: Float, ry: Float) { _ = callLocalFunction(l: ["", Pointer(), ___className, "AddEllipse3", center as Any, rx as Any, ry as Any]) }
    public func AddPath(path: QPainterPath_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "AddPath", path as Any]) }
    public func AddPolygon(polygon: QPolygonF_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "AddPolygon", polygon as Any]) }
    public func AddRect(rectangle: QRectF_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "AddRect", rectangle as Any]) }
    public func AddRect2(x: Float, y: Float, width: Float, height: Float) { _ = callLocalFunction(l: ["", Pointer(), ___className, "AddRect2", x as Any, y as Any, width as Any, height as Any]) }
    public func AddRegion(region: QRegion_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "AddRegion", region as Any]) }
    public func AddRoundedRect(rect: QRectF_ITF? = nil, xRadius: Float, yRadius: Float, mode: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "AddRoundedRect", rect as Any, xRadius as Any, yRadius as Any, mode as Any]) }
    public func AddRoundedRect2(x: Float, y: Float, w: Float, h: Float, xRadius: Float, yRadius: Float, mode: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "AddRoundedRect2", x as Any, y as Any, w as Any, h as Any, xRadius as Any, yRadius as Any, mode as Any]) }
    public func AddText(point: QPointF_ITF? = nil, font: QFont_ITF? = nil, text: String) { _ = callLocalFunction(l: ["", Pointer(), ___className, "AddText", point as Any, font as Any, text as Any]) }
    public func AddText2(x: Float, y: Float, font: QFont_ITF? = nil, text: String) { _ = callLocalFunction(l: ["", Pointer(), ___className, "AddText2", x as Any, y as Any, font as Any, text as Any]) }
    public func AngleAtPercent(t: Float) -> Float { callLocalFunction(l: ["", Pointer(), ___className, "AngleAtPercent", t as Any]) as! Float }
    public func ArcMoveTo(rectangle: QRectF_ITF? = nil, angle: Float) { _ = callLocalFunction(l: ["", Pointer(), ___className, "ArcMoveTo", rectangle as Any, angle as Any]) }
    public func ArcMoveTo2(x: Float, y: Float, width: Float, height: Float, angle: Float) { _ = callLocalFunction(l: ["", Pointer(), ___className, "ArcMoveTo2", x as Any, y as Any, width as Any, height as Any, angle as Any]) }
    public func ArcTo(rectangle: QRectF_ITF? = nil, startAngle: Float, sweepLength: Float) { _ = callLocalFunction(l: ["", Pointer(), ___className, "ArcTo", rectangle as Any, startAngle as Any, sweepLength as Any]) }
    public func ArcTo2(x: Float, y: Float, width: Float, height: Float, startAngle: Float, sweepLength: Float) { _ = callLocalFunction(l: ["", Pointer(), ___className, "ArcTo2", x as Any, y as Any, width as Any, height as Any, startAngle as Any, sweepLength as Any]) }
    public func BoundingRect() -> QRectF { callLocalFunction(l: ["", Pointer(), ___className, "BoundingRect"]) as! QRectF }
    public func Capacity() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "Capacity"]) as! Float) }
    public func Clear() { _ = callLocalFunction(l: ["", Pointer(), ___className, "Clear"]) }
    public func CloseSubpath() { _ = callLocalFunction(l: ["", Pointer(), ___className, "CloseSubpath"]) }
    public func ConnectPath(path: QPainterPath_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "ConnectPath", path as Any]) }
    public func Contains(point: QPointF_ITF? = nil) -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "Contains", point as Any]) as! Bool }
    public func Contains2(rectangle: QRectF_ITF? = nil) -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "Contains2", rectangle as Any]) as! Bool }
    public func Contains3(p: QPainterPath_ITF? = nil) -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "Contains3", p as Any]) as! Bool }
    public func ControlPointRect() -> QRectF { callLocalFunction(l: ["", Pointer(), ___className, "ControlPointRect"]) as! QRectF }
    public func CubicTo(c1: QPointF_ITF? = nil, c2: QPointF_ITF? = nil, endPoint: QPointF_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "CubicTo", c1 as Any, c2 as Any, endPoint as Any]) }
    public func CubicTo2(c1X: Float, c1Y: Float, c2X: Float, c2Y: Float, endPointX: Float, endPointY: Float) { _ = callLocalFunction(l: ["", Pointer(), ___className, "CubicTo2", c1X as Any, c1Y as Any, c2X as Any, c2Y as Any, endPointX as Any, endPointY as Any]) }
    public func CurrentPosition() -> QPointF { callLocalFunction(l: ["", Pointer(), ___className, "CurrentPosition"]) as! QPointF }
    public func ElementCount() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "ElementCount"]) as! Float) }
    public func FillRule() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "FillRule"]) as! Float) }
    public func Intersected(p: QPainterPath_ITF? = nil) -> QPainterPath { callLocalFunction(l: ["", Pointer(), ___className, "Intersected", p as Any]) as! QPainterPath }
    public func Intersects(rectangle: QRectF_ITF? = nil) -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "Intersects", rectangle as Any]) as! Bool }
    public func Intersects2(p: QPainterPath_ITF? = nil) -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "Intersects2", p as Any]) as! Bool }
    public func IsEmpty() -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "IsEmpty"]) as! Bool }
    public func Length() -> Float { callLocalFunction(l: ["", Pointer(), ___className, "Length"]) as! Float }
    public func LineTo(endPoint: QPointF_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "LineTo", endPoint as Any]) }
    public func LineTo2(x: Float, y: Float) { _ = callLocalFunction(l: ["", Pointer(), ___className, "LineTo2", x as Any, y as Any]) }
    public func MoveTo(point: QPointF_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "MoveTo", point as Any]) }
    public func MoveTo2(x: Float, y: Float) { _ = callLocalFunction(l: ["", Pointer(), ___className, "MoveTo2", x as Any, y as Any]) }
    public func PercentAtLength(l: Float) -> Float { callLocalFunction(l: ["", Pointer(), ___className, "PercentAtLength", l as Any]) as! Float }
    public func PointAtPercent(t: Float) -> QPointF { callLocalFunction(l: ["", Pointer(), ___className, "PointAtPercent", t as Any]) as! QPointF }
    public func QuadTo(c: QPointF_ITF? = nil, endPoint: QPointF_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "QuadTo", c as Any, endPoint as Any]) }
    public func QuadTo2(cx: Float, cy: Float, endPointX: Float, endPointY: Float) { _ = callLocalFunction(l: ["", Pointer(), ___className, "QuadTo2", cx as Any, cy as Any, endPointX as Any, endPointY as Any]) }
    public func Reserve(size: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "Reserve", size as Any]) }
    public func SetElementPositionAt(index: Int, x: Float, y: Float) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetElementPositionAt", index as Any, x as Any, y as Any]) }
    public func SetFillRule(fillRule: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetFillRule", fillRule as Any]) }
    public func Simplified() -> QPainterPath { callLocalFunction(l: ["", Pointer(), ___className, "Simplified"]) as! QPainterPath }
    public func SlopeAtPercent(t: Float) -> Float { callLocalFunction(l: ["", Pointer(), ___className, "SlopeAtPercent", t as Any]) as! Float }
    public func Subtracted(p: QPainterPath_ITF? = nil) -> QPainterPath { callLocalFunction(l: ["", Pointer(), ___className, "Subtracted", p as Any]) as! QPainterPath }
    public func Swap(other: QPainterPath_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "Swap", other as Any]) }
    public func ToFillPolygon(matrix: QTransform_ITF? = nil) -> QPolygonF { callLocalFunction(l: ["", Pointer(), ___className, "ToFillPolygon", matrix as Any]) as! QPolygonF }
    public func ToFillPolygon2(matrix: QMatrix_ITF? = nil) -> QPolygonF { callLocalFunction(l: ["", Pointer(), ___className, "ToFillPolygon2", matrix as Any]) as! QPolygonF }
    public func ToFillPolygons(matrix: QTransform_ITF? = nil) -> [QPolygonF] { callLocalFunction(l: ["", Pointer(), ___className, "ToFillPolygons", matrix as Any]) as! [QPolygonF] }
    public func ToFillPolygons2(matrix: QMatrix_ITF? = nil) -> [QPolygonF] { callLocalFunction(l: ["", Pointer(), ___className, "ToFillPolygons2", matrix as Any]) as! [QPolygonF] }
    public func ToReversed() -> QPainterPath { callLocalFunction(l: ["", Pointer(), ___className, "ToReversed"]) as! QPainterPath }
    public func ToSubpathPolygons(matrix: QTransform_ITF? = nil) -> [QPolygonF] { callLocalFunction(l: ["", Pointer(), ___className, "ToSubpathPolygons", matrix as Any]) as! [QPolygonF] }
    public func ToSubpathPolygons2(matrix: QMatrix_ITF? = nil) -> [QPolygonF] { callLocalFunction(l: ["", Pointer(), ___className, "ToSubpathPolygons2", matrix as Any]) as! [QPolygonF] }
    public func Translate(dx: Float, dy: Float) { _ = callLocalFunction(l: ["", Pointer(), ___className, "Translate", dx as Any, dy as Any]) }
    public func Translate2(offset: QPointF_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "Translate2", offset as Any]) }
    public func Translated(dx: Float, dy: Float) -> QPainterPath { callLocalFunction(l: ["", Pointer(), ___className, "Translated", dx as Any, dy as Any]) as! QPainterPath }
    public func Translated2(offset: QPointF_ITF? = nil) -> QPainterPath { callLocalFunction(l: ["", Pointer(), ___className, "Translated2", offset as Any]) as! QPainterPath }
    public func United(p: QPainterPath_ITF? = nil) -> QPainterPath { callLocalFunction(l: ["", Pointer(), ___className, "United", p as Any]) as! QPainterPath }
    public func DestroyQPainterPath() { _ = callLocalFunction(l: ["", Pointer(), ___className, "DestroyQPainterPath"]) }
}

public func NewQPainterPathFromPointer(ptr: String) -> QPainterPath { let r = QPainterPath(); r.initFrom(p: ptr, n: "gui.QPainterPath"); return r }
public func NewQPainterPath() -> QPainterPath { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.NewQPainterPath", ""]) as! QPainterPath }
public func NewQPainterPath2(startPoint: QPointF_ITF? = nil) -> QPainterPath { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.NewQPainterPath2", "", startPoint as Any]) as! QPainterPath }
public func NewQPainterPath3(path: QPainterPath_ITF? = nil) -> QPainterPath { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.NewQPainterPath3", "", path as Any]) as! QPainterPath }
public protocol QPainterPathStroker_ITF {
    func QPainterPathStroker_PTR() -> QPainterPathStroker
}

public class QPainterPathStroker: Internal, QPainterPathStroker_ITF {
    public func QPainterPathStroker_PTR() -> QPainterPathStroker { callLocalFunction(l: ["", Pointer(), ___className, "QPainterPathStroker_PTR"]) as! QPainterPathStroker }
    public func CapStyle() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "CapStyle"]) as! Float) }
    public func CreateStroke(path: QPainterPath_ITF? = nil) -> QPainterPath { callLocalFunction(l: ["", Pointer(), ___className, "CreateStroke", path as Any]) as! QPainterPath }
    public func CurveThreshold() -> Float { callLocalFunction(l: ["", Pointer(), ___className, "CurveThreshold"]) as! Float }
    public func DashOffset() -> Float { callLocalFunction(l: ["", Pointer(), ___className, "DashOffset"]) as! Float }
    public func DashPattern() -> [Float] { callLocalFunction(l: ["", Pointer(), ___className, "DashPattern"]) as! [Float] }
    public func JoinStyle() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "JoinStyle"]) as! Float) }
    public func MiterLimit() -> Float { callLocalFunction(l: ["", Pointer(), ___className, "MiterLimit"]) as! Float }
    public func SetCapStyle(style: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetCapStyle", style as Any]) }
    public func SetCurveThreshold(threshold: Float) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetCurveThreshold", threshold as Any]) }
    public func SetDashOffset(offset: Float) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetDashOffset", offset as Any]) }
    public func SetDashPattern(style: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetDashPattern", style as Any]) }
    public func SetDashPattern2(dashPattern: [Float]) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetDashPattern2", dashPattern as Any]) }
    public func SetJoinStyle(style: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetJoinStyle", style as Any]) }
    public func SetMiterLimit(limit: Float) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetMiterLimit", limit as Any]) }
    public func SetWidth(width: Float) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetWidth", width as Any]) }
    public func Width() -> Float { callLocalFunction(l: ["", Pointer(), ___className, "Width"]) as! Float }
    public func DestroyQPainterPathStroker() { _ = callLocalFunction(l: ["", Pointer(), ___className, "DestroyQPainterPathStroker"]) }
}

public func NewQPainterPathStrokerFromPointer(ptr: String) -> QPainterPathStroker { let r = QPainterPathStroker(); r.initFrom(p: ptr, n: "gui.QPainterPathStroker"); return r }
public func NewQPainterPathStroker() -> QPainterPathStroker { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.NewQPainterPathStroker", ""]) as! QPainterPathStroker }
public func NewQPainterPathStroker2(pen: QPen_ITF? = nil) -> QPainterPathStroker { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.NewQPainterPathStroker2", "", pen as Any]) as! QPainterPathStroker }
public protocol QPalette_ITF {
    func QPalette_PTR() -> QPalette
}

public class QPalette: Internal, QPalette_ITF {
    public func QPalette_PTR() -> QPalette { callLocalFunction(l: ["", Pointer(), ___className, "QPalette_PTR"]) as! QPalette }
    public func AlternateBase() -> QBrush { callLocalFunction(l: ["", Pointer(), ___className, "AlternateBase"]) as! QBrush }
    public func Base() -> QBrush { callLocalFunction(l: ["", Pointer(), ___className, "Base"]) as! QBrush }
    public func BrightText() -> QBrush { callLocalFunction(l: ["", Pointer(), ___className, "BrightText"]) as! QBrush }
    public func Brush(group: Int, role: Int) -> QBrush { callLocalFunction(l: ["", Pointer(), ___className, "Brush", group as Any, role as Any]) as! QBrush }
    public func Brush2(role: Int) -> QBrush { callLocalFunction(l: ["", Pointer(), ___className, "Brush2", role as Any]) as! QBrush }
    public func Button() -> QBrush { callLocalFunction(l: ["", Pointer(), ___className, "Button"]) as! QBrush }
    public func ButtonText() -> QBrush { callLocalFunction(l: ["", Pointer(), ___className, "ButtonText"]) as! QBrush }
    public func CacheKey() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "CacheKey"]) as! Float) }
    public func Color(group: Int, role: Int) -> QColor { callLocalFunction(l: ["", Pointer(), ___className, "Color", group as Any, role as Any]) as! QColor }
    public func Color2(role: Int) -> QColor { callLocalFunction(l: ["", Pointer(), ___className, "Color2", role as Any]) as! QColor }
    public func CurrentColorGroup() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "CurrentColorGroup"]) as! Float) }
    public func Dark() -> QBrush { callLocalFunction(l: ["", Pointer(), ___className, "Dark"]) as! QBrush }
    public func Highlight() -> QBrush { callLocalFunction(l: ["", Pointer(), ___className, "Highlight"]) as! QBrush }
    public func HighlightedText() -> QBrush { callLocalFunction(l: ["", Pointer(), ___className, "HighlightedText"]) as! QBrush }
    public func IsBrushSet(cg: Int, cr: Int) -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "IsBrushSet", cg as Any, cr as Any]) as! Bool }
    public func IsCopyOf(p: QPalette_ITF? = nil) -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "IsCopyOf", p as Any]) as! Bool }
    public func IsEqual(cg1: Int, cg2: Int) -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "IsEqual", cg1 as Any, cg2 as Any]) as! Bool }
    public func Light() -> QBrush { callLocalFunction(l: ["", Pointer(), ___className, "Light"]) as! QBrush }
    public func Link() -> QBrush { callLocalFunction(l: ["", Pointer(), ___className, "Link"]) as! QBrush }
    public func LinkVisited() -> QBrush { callLocalFunction(l: ["", Pointer(), ___className, "LinkVisited"]) as! QBrush }
    public func Mid() -> QBrush { callLocalFunction(l: ["", Pointer(), ___className, "Mid"]) as! QBrush }
    public func Midlight() -> QBrush { callLocalFunction(l: ["", Pointer(), ___className, "Midlight"]) as! QBrush }
    public func PlaceholderText() -> QBrush { callLocalFunction(l: ["", Pointer(), ___className, "PlaceholderText"]) as! QBrush }
    public func Resolve(other: QPalette_ITF? = nil) -> QPalette { callLocalFunction(l: ["", Pointer(), ___className, "Resolve", other as Any]) as! QPalette }
    public func SetBrush(role: Int, brush: QBrush_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetBrush", role as Any, brush as Any]) }
    public func SetBrush2(group: Int, role: Int, brush: QBrush_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetBrush2", group as Any, role as Any, brush as Any]) }
    public func SetColor(group: Int, role: Int, color: QColor_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetColor", group as Any, role as Any, color as Any]) }
    public func SetColor2(role: Int, color: QColor_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetColor2", role as Any, color as Any]) }
    public func SetColorGroup(cg: Int, windowText: QBrush_ITF? = nil, button: QBrush_ITF? = nil, light: QBrush_ITF? = nil, dark: QBrush_ITF? = nil, mid: QBrush_ITF? = nil, text: QBrush_ITF? = nil, bright_text: QBrush_ITF? = nil, base: QBrush_ITF? = nil, window: QBrush_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetColorGroup", cg as Any, windowText as Any, button as Any, light as Any, dark as Any, mid as Any, text as Any, bright_text as Any, base as Any, window as Any]) }
    public func SetCurrentColorGroup(cg: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetCurrentColorGroup", cg as Any]) }
    public func Shadow() -> QBrush { callLocalFunction(l: ["", Pointer(), ___className, "Shadow"]) as! QBrush }
    public func Swap(other: QPalette_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "Swap", other as Any]) }
    public func Text() -> QBrush { callLocalFunction(l: ["", Pointer(), ___className, "Text"]) as! QBrush }
    public func ToolTipBase() -> QBrush { callLocalFunction(l: ["", Pointer(), ___className, "ToolTipBase"]) as! QBrush }
    public func ToolTipText() -> QBrush { callLocalFunction(l: ["", Pointer(), ___className, "ToolTipText"]) as! QBrush }
    public func Window() -> QBrush { callLocalFunction(l: ["", Pointer(), ___className, "Window"]) as! QBrush }
    public func WindowText() -> QBrush { callLocalFunction(l: ["", Pointer(), ___className, "WindowText"]) as! QBrush }
    public func DestroyQPalette() { _ = callLocalFunction(l: ["", Pointer(), ___className, "DestroyQPalette"]) }
}

public func NewQPaletteFromPointer(ptr: String) -> QPalette { let r = QPalette(); r.initFrom(p: ptr, n: "gui.QPalette"); return r }
public func NewQPalette() -> QPalette { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.NewQPalette", ""]) as! QPalette }
public func NewQPalette2(button: QColor_ITF? = nil) -> QPalette { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.NewQPalette2", "", button as Any]) as! QPalette }
public func NewQPalette3(button: Int) -> QPalette { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.NewQPalette3", "", button as Any]) as! QPalette }
public func NewQPalette4(button: QColor_ITF? = nil, window: QColor_ITF? = nil) -> QPalette { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.NewQPalette4", "", button as Any, window as Any]) as! QPalette }
public func NewQPalette5(windowText: QBrush_ITF? = nil, button: QBrush_ITF? = nil, light: QBrush_ITF? = nil, dark: QBrush_ITF? = nil, mid: QBrush_ITF? = nil, text: QBrush_ITF? = nil, bright_text: QBrush_ITF? = nil, base: QBrush_ITF? = nil, window: QBrush_ITF? = nil) -> QPalette { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.NewQPalette5", "", windowText as Any, button as Any, light as Any, dark as Any, mid as Any, text as Any, bright_text as Any, base as Any, window as Any]) as! QPalette }
public func NewQPalette7(p: QPalette_ITF? = nil) -> QPalette { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.NewQPalette7", "", p as Any]) as! QPalette }
public func NewQPalette8(other: QPalette_ITF? = nil) -> QPalette { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.NewQPalette8", "", other as Any]) as! QPalette }
public protocol QPdfWriter_ITF: QPagedPaintDevice_ITF {
    func QPdfWriter_PTR() -> QPdfWriter
    func QObject_PTR() -> QObject
}

public class QPdfWriter: QPagedPaintDevice, QPdfWriter_ITF {
    public func QObject_PTR() -> QObject { callLocalFunction(l: ["", Pointer(), ___className, "QObject_PTR"]) as! QObject }
    public func QPdfWriter_PTR() -> QPdfWriter { callLocalFunction(l: ["", Pointer(), ___className, "QPdfWriter_PTR"]) as! QPdfWriter }
    public func Creator() -> String { callLocalFunction(l: ["", Pointer(), ___className, "Creator"]) as! String }
    override public func ConnectNewPage(f: @escaping () -> Bool) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectNewPage", "___REMOTE_CALLBACK___"], f: { (_: [Any]) -> Any in f() } as Any) }
    override public func DisconnectNewPage() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectNewPage"]) }
    override public func NewPage() -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "NewPage"]) as! Bool }
    public func NewPageDefault() -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "NewPageDefault"]) as! Bool }
    override public func ConnectPaintEngine(f: @escaping () -> QPaintEngine) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectPaintEngine", "___REMOTE_CALLBACK___"], f: { (_: [Any]) -> Any in f() } as Any) }
    override public func DisconnectPaintEngine() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectPaintEngine"]) }
    override public func PaintEngine() -> QPaintEngine { callLocalFunction(l: ["", Pointer(), ___className, "PaintEngine"]) as! QPaintEngine }
    override public func PaintEngineDefault() -> QPaintEngine { callLocalFunction(l: ["", Pointer(), ___className, "PaintEngineDefault"]) as! QPaintEngine }
    public func PdfVersion() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "PdfVersion"]) as! Float) }
    public func Resolution() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "Resolution"]) as! Float) }
    public func SetCreator(creator: String) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetCreator", creator as Any]) }
    public func SetPdfVersion(version: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetPdfVersion", version as Any]) }
    public func SetResolution(resolution: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetResolution", resolution as Any]) }
    public func SetTitle(title: String) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetTitle", title as Any]) }
    public func Title() -> String { callLocalFunction(l: ["", Pointer(), ___className, "Title"]) as! String }
    public func ConnectDestroyQPdfWriter(f: @escaping () -> Void) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectDestroyQPdfWriter", "___REMOTE_CALLBACK___"], f: { (_: [Any]) -> Any in f() } as Any) }
    public func DisconnectDestroyQPdfWriter() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectDestroyQPdfWriter"]) }
    public func DestroyQPdfWriter() { _ = callLocalFunction(l: ["", Pointer(), ___className, "DestroyQPdfWriter"]) }
    public func DestroyQPdfWriterDefault() { _ = callLocalFunction(l: ["", Pointer(), ___className, "DestroyQPdfWriterDefault"]) }
    public func ChildEvent(event: QChildEvent_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "ChildEvent", event as Any]) }
    public func ChildEventDefault(event: QChildEvent_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "ChildEventDefault", event as Any]) }
    public func ConnectNotify(sign: QMetaMethod_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "ConnectNotify", sign as Any]) }
    public func ConnectNotifyDefault(sign: QMetaMethod_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "ConnectNotifyDefault", sign as Any]) }
    public func CustomEvent(event: QEvent_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "CustomEvent", event as Any]) }
    public func CustomEventDefault(event: QEvent_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "CustomEventDefault", event as Any]) }
    public func DeleteLater() { _ = callLocalFunction(l: ["", Pointer(), ___className, "DeleteLater"]) }
    public func DeleteLaterDefault() { _ = callLocalFunction(l: ["", Pointer(), ___className, "DeleteLaterDefault"]) }
    public func DisconnectNotify(sign: QMetaMethod_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "DisconnectNotify", sign as Any]) }
    public func DisconnectNotifyDefault(sign: QMetaMethod_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "DisconnectNotifyDefault", sign as Any]) }
    public func Event(e: QEvent_ITF? = nil) -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "Event", e as Any]) as! Bool }
    public func EventDefault(e: QEvent_ITF? = nil) -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "EventDefault", e as Any]) as! Bool }
    public func EventFilter(watched: QObject_ITF? = nil, event: QEvent_ITF? = nil) -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "EventFilter", watched as Any, event as Any]) as! Bool }
    public func EventFilterDefault(watched: QObject_ITF? = nil, event: QEvent_ITF? = nil) -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "EventFilterDefault", watched as Any, event as Any]) as! Bool }
    public func MetaObject() -> QMetaObject { callLocalFunction(l: ["", Pointer(), ___className, "MetaObject"]) as! QMetaObject }
    public func MetaObjectDefault() -> QMetaObject { callLocalFunction(l: ["", Pointer(), ___className, "MetaObjectDefault"]) as! QMetaObject }
    public func TimerEvent(event: QTimerEvent_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "TimerEvent", event as Any]) }
    public func TimerEventDefault(event: QTimerEvent_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "TimerEventDefault", event as Any]) }
}

public func NewQPdfWriterFromPointer(ptr: String) -> QPdfWriter { let r = QPdfWriter(); r.initFrom(p: ptr, n: "gui.QPdfWriter"); return r }
public func NewQPdfWriter(filename: String) -> QPdfWriter { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.NewQPdfWriter", "", filename as Any]) as! QPdfWriter }
public func NewQPdfWriter2(device: QIODevice_ITF? = nil) -> QPdfWriter { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.NewQPdfWriter2", "", device as Any]) as! QPdfWriter }
public protocol QPen_ITF {
    func QPen_PTR() -> QPen
}

public class QPen: Internal, QPen_ITF {
    public func QPen_PTR() -> QPen { callLocalFunction(l: ["", Pointer(), ___className, "QPen_PTR"]) as! QPen }
    public func Brush() -> QBrush { callLocalFunction(l: ["", Pointer(), ___className, "Brush"]) as! QBrush }
    public func CapStyle() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "CapStyle"]) as! Float) }
    public func Color() -> QColor { callLocalFunction(l: ["", Pointer(), ___className, "Color"]) as! QColor }
    public func DashOffset() -> Float { callLocalFunction(l: ["", Pointer(), ___className, "DashOffset"]) as! Float }
    public func DashPattern() -> [Float] { callLocalFunction(l: ["", Pointer(), ___className, "DashPattern"]) as! [Float] }
    public func IsCosmetic() -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "IsCosmetic"]) as! Bool }
    public func IsSolid() -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "IsSolid"]) as! Bool }
    public func JoinStyle() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "JoinStyle"]) as! Float) }
    public func MiterLimit() -> Float { callLocalFunction(l: ["", Pointer(), ___className, "MiterLimit"]) as! Float }
    public func SetBrush(brush: QBrush_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetBrush", brush as Any]) }
    public func SetCapStyle(style: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetCapStyle", style as Any]) }
    public func SetColor(color: QColor_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetColor", color as Any]) }
    public func SetCosmetic(cosmetic: Bool) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetCosmetic", cosmetic as Any]) }
    public func SetDashOffset(offset: Float) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetDashOffset", offset as Any]) }
    public func SetDashPattern(pattern: [Float]) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetDashPattern", pattern as Any]) }
    public func SetJoinStyle(style: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetJoinStyle", style as Any]) }
    public func SetMiterLimit(limit: Float) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetMiterLimit", limit as Any]) }
    public func SetStyle(style: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetStyle", style as Any]) }
    public func SetWidth(width: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetWidth", width as Any]) }
    public func SetWidthF(width: Float) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetWidthF", width as Any]) }
    public func Style() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "Style"]) as! Float) }
    public func Swap(other: QPen_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "Swap", other as Any]) }
    public func Width() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "Width"]) as! Float) }
    public func WidthF() -> Float { callLocalFunction(l: ["", Pointer(), ___className, "WidthF"]) as! Float }
    public func DestroyQPen() { _ = callLocalFunction(l: ["", Pointer(), ___className, "DestroyQPen"]) }
}

public func NewQPenFromPointer(ptr: String) -> QPen { let r = QPen(); r.initFrom(p: ptr, n: "gui.QPen"); return r }
public func NewQPen() -> QPen { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.NewQPen", ""]) as! QPen }
public func NewQPen2(style: Int) -> QPen { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.NewQPen2", "", style as Any]) as! QPen }
public func NewQPen3(color: QColor_ITF? = nil) -> QPen { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.NewQPen3", "", color as Any]) as! QPen }
public func NewQPen4(brush: QBrush_ITF? = nil, width: Float, style: Int, cap: Int, joi: Int) -> QPen { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.NewQPen4", "", brush as Any, width as Any, style as Any, cap as Any, joi as Any]) as! QPen }
public func NewQPen5(pen: QPen_ITF? = nil) -> QPen { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.NewQPen5", "", pen as Any]) as! QPen }
public func NewQPen6(pen: QPen_ITF? = nil) -> QPen { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.NewQPen6", "", pen as Any]) as! QPen }
public protocol QPicture_ITF: QPaintDevice_ITF {
    func QPicture_PTR() -> QPicture
}

public class QPicture: QPaintDevice, QPicture_ITF {
    public func QPicture_PTR() -> QPicture { callLocalFunction(l: ["", Pointer(), ___className, "QPicture_PTR"]) as! QPicture }
    public func BoundingRect() -> QRect { callLocalFunction(l: ["", Pointer(), ___className, "BoundingRect"]) as! QRect }
    public func Data() -> String { callLocalFunction(l: ["", Pointer(), ___className, "Data"]) as! String }
    public func IsNull() -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "IsNull"]) as! Bool }
    public func Load(fileName: String, format: String) -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "Load", fileName as Any, format as Any]) as! Bool }
    public func Load2(dev: QIODevice_ITF? = nil, format: String) -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "Load2", dev as Any, format as Any]) as! Bool }
    public func Play(painter: QPainter_ITF? = nil) -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "Play", painter as Any]) as! Bool }
    public func Save(fileName: String, format: String) -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "Save", fileName as Any, format as Any]) as! Bool }
    public func Save2(dev: QIODevice_ITF? = nil, format: String) -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "Save2", dev as Any, format as Any]) as! Bool }
    public func SetBoundingRect(r: QRect_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetBoundingRect", r as Any]) }
    public func ConnectSetData(f: @escaping (_ data: String, _ size: Int) -> Void) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectSetData", "___REMOTE_CALLBACK___"], f: { (inp: [Any]) -> Any in f(inp[0] as! String, Int(inp[1] as! Float)) } as Any) }
    public func DisconnectSetData() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectSetData"]) }
    public func SetData(data: String, size: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetData", data as Any, size as Any]) }
    public func SetDataDefault(data: String, size: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetDataDefault", data as Any, size as Any]) }
    public func Size() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "Size"]) as! Float) }
    public func Swap(other: QPicture_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "Swap", other as Any]) }
    public func ConnectDestroyQPicture(f: @escaping () -> Void) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectDestroyQPicture", "___REMOTE_CALLBACK___"], f: { (_: [Any]) -> Any in f() } as Any) }
    public func DisconnectDestroyQPicture() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectDestroyQPicture"]) }
    public func DestroyQPicture() { _ = callLocalFunction(l: ["", Pointer(), ___className, "DestroyQPicture"]) }
    public func DestroyQPictureDefault() { _ = callLocalFunction(l: ["", Pointer(), ___className, "DestroyQPictureDefault"]) }
    override public func PaintEngine() -> QPaintEngine { callLocalFunction(l: ["", Pointer(), ___className, "PaintEngine"]) as! QPaintEngine }
    public func PaintEngineDefault() -> QPaintEngine { callLocalFunction(l: ["", Pointer(), ___className, "PaintEngineDefault"]) as! QPaintEngine }
}

public func NewQPictureFromPointer(ptr: String) -> QPicture { let r = QPicture(); r.initFrom(p: ptr, n: "gui.QPicture"); return r }
public func NewQPicture(formatVersion: Int) -> QPicture { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.NewQPicture", "", formatVersion as Any]) as! QPicture }
public func NewQPicture2(pic: QPicture_ITF? = nil) -> QPicture { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.NewQPicture2", "", pic as Any]) as! QPicture }
public protocol QPictureFormatPlugin_ITF: QObject_ITF {
    func QPictureFormatPlugin_PTR() -> QPictureFormatPlugin
}

public class QPictureFormatPlugin: QObject, QPictureFormatPlugin_ITF {
    public func QPictureFormatPlugin_PTR() -> QPictureFormatPlugin { callLocalFunction(l: ["", Pointer(), ___className, "QPictureFormatPlugin_PTR"]) as! QPictureFormatPlugin }
    public func ConnectInstallIOHandler(f: @escaping (_ format: String) -> Bool) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectInstallIOHandler", "___REMOTE_CALLBACK___"], f: { (inp: [Any]) -> Any in f(inp[0] as! String) } as Any) }
    public func DisconnectInstallIOHandler() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectInstallIOHandler"]) }
    public func InstallIOHandler(format: String) -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "InstallIOHandler", format as Any]) as! Bool }
    public func ConnectLoadPicture(f: @escaping (_ format: String, _ fileName: String, _ picture: QPicture) -> Bool) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectLoadPicture", "___REMOTE_CALLBACK___"], f: { (inp: [Any]) -> Any in f(inp[0] as! String, inp[1] as! String, inp[2] as! QPicture) } as Any) }
    public func DisconnectLoadPicture() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectLoadPicture"]) }
    public func LoadPicture(format: String, fileName: String, picture: QPicture_ITF? = nil) -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "LoadPicture", format as Any, fileName as Any, picture as Any]) as! Bool }
    public func LoadPictureDefault(format: String, fileName: String, picture: QPicture_ITF? = nil) -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "LoadPictureDefault", format as Any, fileName as Any, picture as Any]) as! Bool }
    public func ConnectSavePicture(f: @escaping (_ format: String, _ fileName: String, _ picture: QPicture) -> Bool) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectSavePicture", "___REMOTE_CALLBACK___"], f: { (inp: [Any]) -> Any in f(inp[0] as! String, inp[1] as! String, inp[2] as! QPicture) } as Any) }
    public func DisconnectSavePicture() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectSavePicture"]) }
    public func SavePicture(format: String, fileName: String, picture: QPicture_ITF? = nil) -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "SavePicture", format as Any, fileName as Any, picture as Any]) as! Bool }
    public func SavePictureDefault(format: String, fileName: String, picture: QPicture_ITF? = nil) -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "SavePictureDefault", format as Any, fileName as Any, picture as Any]) as! Bool }
    public func ConnectDestroyQPictureFormatPlugin(f: @escaping () -> Void) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectDestroyQPictureFormatPlugin", "___REMOTE_CALLBACK___"], f: { (_: [Any]) -> Any in f() } as Any) }
    public func DisconnectDestroyQPictureFormatPlugin() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectDestroyQPictureFormatPlugin"]) }
    public func DestroyQPictureFormatPlugin() { _ = callLocalFunction(l: ["", Pointer(), ___className, "DestroyQPictureFormatPlugin"]) }
    public func DestroyQPictureFormatPluginDefault() { _ = callLocalFunction(l: ["", Pointer(), ___className, "DestroyQPictureFormatPluginDefault"]) }
    override public func ChildEventDefault(event: QChildEvent_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "ChildEventDefault", event as Any]) }
    override public func ConnectNotifyDefault(sign: QMetaMethod_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "ConnectNotifyDefault", sign as Any]) }
    override public func CustomEventDefault(event: QEvent_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "CustomEventDefault", event as Any]) }
    override public func DeleteLaterDefault() { _ = callLocalFunction(l: ["", Pointer(), ___className, "DeleteLaterDefault"]) }
    override public func DisconnectNotifyDefault(sign: QMetaMethod_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "DisconnectNotifyDefault", sign as Any]) }
    override public func EventDefault(e: QEvent_ITF? = nil) -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "EventDefault", e as Any]) as! Bool }
    override public func EventFilterDefault(watched: QObject_ITF? = nil, event: QEvent_ITF? = nil) -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "EventFilterDefault", watched as Any, event as Any]) as! Bool }
    override public func MetaObjectDefault() -> QMetaObject { callLocalFunction(l: ["", Pointer(), ___className, "MetaObjectDefault"]) as! QMetaObject }
    override public func TimerEventDefault(event: QTimerEvent_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "TimerEventDefault", event as Any]) }
}

public func NewQPictureFormatPluginFromPointer(ptr: String) -> QPictureFormatPlugin { let r = QPictureFormatPlugin(); r.initFrom(p: ptr, n: "gui.QPictureFormatPlugin"); return r }
public func NewQPictureFormatPlugin(parent: QObject_ITF? = nil) -> QPictureFormatPlugin { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.NewQPictureFormatPlugin", "", parent as Any]) as! QPictureFormatPlugin }
public protocol QPictureIO_ITF {
    func QPictureIO_PTR() -> QPictureIO
}

public class QPictureIO: Internal, QPictureIO_ITF {
    public func QPictureIO_PTR() -> QPictureIO { callLocalFunction(l: ["", Pointer(), ___className, "QPictureIO_PTR"]) as! QPictureIO }
    public func Description() -> String { callLocalFunction(l: ["", Pointer(), ___className, "Description"]) as! String }
    public func FileName() -> String { callLocalFunction(l: ["", Pointer(), ___className, "FileName"]) as! String }
    public func Format() -> String { callLocalFunction(l: ["", Pointer(), ___className, "Format"]) as! String }
    public func Gamma() -> Float { callLocalFunction(l: ["", Pointer(), ___className, "Gamma"]) as! Float }
    public func InputFormats() -> [QByteArray] { callLocalFunction(l: ["", Pointer(), ___className, "InputFormats"]) as! [QByteArray] }
    public func IoDevice() -> QIODevice { callLocalFunction(l: ["", Pointer(), ___className, "IoDevice"]) as! QIODevice }
    public func OutputFormats() -> [QByteArray] { callLocalFunction(l: ["", Pointer(), ___className, "OutputFormats"]) as! [QByteArray] }
    public func Parameters() -> String { callLocalFunction(l: ["", Pointer(), ___className, "Parameters"]) as! String }
    public func Picture() -> QPicture { callLocalFunction(l: ["", Pointer(), ___className, "Picture"]) as! QPicture }
    public func PictureFormat(fileName: String) -> QByteArray { callLocalFunction(l: ["", Pointer(), ___className, "PictureFormat", fileName as Any]) as! QByteArray }
    public func PictureFormat2(d: QIODevice_ITF? = nil) -> QByteArray { callLocalFunction(l: ["", Pointer(), ___className, "PictureFormat2", d as Any]) as! QByteArray }
    public func Quality() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "Quality"]) as! Float) }
    public func Read() -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "Read"]) as! Bool }
    public func SetDescription(description: String) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetDescription", description as Any]) }
    public func SetFileName(fileName: String) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetFileName", fileName as Any]) }
    public func SetFormat(format: String) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetFormat", format as Any]) }
    public func SetGamma(gamma: Float) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetGamma", gamma as Any]) }
    public func SetIODevice(ioDevice: QIODevice_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetIODevice", ioDevice as Any]) }
    public func SetParameters(parameters: String) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetParameters", parameters as Any]) }
    public func SetPicture(picture: QPicture_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetPicture", picture as Any]) }
    public func SetQuality(q: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetQuality", q as Any]) }
    public func SetStatus(status: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetStatus", status as Any]) }
    public func Status() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "Status"]) as! Float) }
    public func Write() -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "Write"]) as! Bool }
    public func DestroyQPictureIO() { _ = callLocalFunction(l: ["", Pointer(), ___className, "DestroyQPictureIO"]) }
}

public func NewQPictureIOFromPointer(ptr: String) -> QPictureIO { let r = QPictureIO(); r.initFrom(p: ptr, n: "gui.QPictureIO"); return r }
public func NewQPictureIO() -> QPictureIO { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.NewQPictureIO", ""]) as! QPictureIO }
public func NewQPictureIO2(ioDevice: QIODevice_ITF? = nil, format: String) -> QPictureIO { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.NewQPictureIO2", "", ioDevice as Any, format as Any]) as! QPictureIO }
public func NewQPictureIO3(fileName: String, format: String) -> QPictureIO { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.NewQPictureIO3", "", fileName as Any, format as Any]) as! QPictureIO }
public func QPictureIO_InputFormats() -> [QByteArray] { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.QPictureIO_InputFormats", ""]) as! [QByteArray] }
public func QPictureIO_OutputFormats() -> [QByteArray] { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.QPictureIO_OutputFormats", ""]) as! [QByteArray] }
public func QPictureIO_PictureFormat(fileName: String) -> QByteArray { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.QPictureIO_PictureFormat", "", fileName as Any]) as! QByteArray }
public func QPictureIO_PictureFormat2(d: QIODevice_ITF? = nil) -> QByteArray { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.QPictureIO_PictureFormat2", "", d as Any]) as! QByteArray }
public protocol QPixelFormat_ITF {
    func QPixelFormat_PTR() -> QPixelFormat
}

public class QPixelFormat: Internal, QPixelFormat_ITF {
    public func QPixelFormat_PTR() -> QPixelFormat { callLocalFunction(l: ["", Pointer(), ___className, "QPixelFormat_PTR"]) as! QPixelFormat }
    public func DestroyQPixelFormat() { _ = callLocalFunction(l: ["", Pointer(), ___className, "DestroyQPixelFormat"]) }
    public func AlphaPosition() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "AlphaPosition"]) as! Float) }
    public func AlphaSize() -> String { callLocalFunction(l: ["", Pointer(), ___className, "AlphaSize"]) as! String }
    public func AlphaUsage() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "AlphaUsage"]) as! Float) }
    public func BitsPerPixel() -> String { callLocalFunction(l: ["", Pointer(), ___className, "BitsPerPixel"]) as! String }
    public func BlackSize() -> String { callLocalFunction(l: ["", Pointer(), ___className, "BlackSize"]) as! String }
    public func BlueSize() -> String { callLocalFunction(l: ["", Pointer(), ___className, "BlueSize"]) as! String }
    public func BrightnessSize() -> String { callLocalFunction(l: ["", Pointer(), ___className, "BrightnessSize"]) as! String }
    public func ByteOrder() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "ByteOrder"]) as! Float) }
    public func ChannelCount() -> String { callLocalFunction(l: ["", Pointer(), ___className, "ChannelCount"]) as! String }
    public func ColorModel() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "ColorModel"]) as! Float) }
    public func CyanSize() -> String { callLocalFunction(l: ["", Pointer(), ___className, "CyanSize"]) as! String }
    public func GreenSize() -> String { callLocalFunction(l: ["", Pointer(), ___className, "GreenSize"]) as! String }
    public func HueSize() -> String { callLocalFunction(l: ["", Pointer(), ___className, "HueSize"]) as! String }
    public func LightnessSize() -> String { callLocalFunction(l: ["", Pointer(), ___className, "LightnessSize"]) as! String }
    public func MagentaSize() -> String { callLocalFunction(l: ["", Pointer(), ___className, "MagentaSize"]) as! String }
    public func Premultiplied() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "Premultiplied"]) as! Float) }
    public func RedSize() -> String { callLocalFunction(l: ["", Pointer(), ___className, "RedSize"]) as! String }
    public func SaturationSize() -> String { callLocalFunction(l: ["", Pointer(), ___className, "SaturationSize"]) as! String }
    public func TypeInterpretation() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "TypeInterpretation"]) as! Float) }
    public func YellowSize() -> String { callLocalFunction(l: ["", Pointer(), ___className, "YellowSize"]) as! String }
    public func YuvLayout() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "YuvLayout"]) as! Float) }
}

public func NewQPixelFormatFromPointer(ptr: String) -> QPixelFormat { let r = QPixelFormat(); r.initFrom(p: ptr, n: "gui.QPixelFormat"); return r }
public func NewQPixelFormat() -> QPixelFormat { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.NewQPixelFormat", ""]) as! QPixelFormat }
public func NewQPixelFormat2(colorModel: Int, firstSize: String, secondSize: String, thirdSize: String, fourthSize: String, fifthSize: String, alphaSize: String, alphaUsage: Int, alphaPosition: Int, premultiplied: Int, typeInterpretation: Int, byteOrder: Int, subEnum: String) -> QPixelFormat { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.NewQPixelFormat2", "", colorModel as Any, firstSize as Any, secondSize as Any, thirdSize as Any, fourthSize as Any, fifthSize as Any, alphaSize as Any, alphaUsage as Any, alphaPosition as Any, premultiplied as Any, typeInterpretation as Any, byteOrder as Any, subEnum as Any]) as! QPixelFormat }
public protocol QPixmap_ITF: QPaintDevice_ITF {
    func QPixmap_PTR() -> QPixmap
}

public class QPixmap: QPaintDevice, QPixmap_ITF {
    public func QPixmap_PTR() -> QPixmap { callLocalFunction(l: ["", Pointer(), ___className, "QPixmap_PTR"]) as! QPixmap }
    public func CacheKey() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "CacheKey"]) as! Float) }
    public func ConvertFromImage(image: QImage_ITF? = nil, flags: Int) -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "ConvertFromImage", image as Any, flags as Any]) as! Bool }
    public func Copy(rectangle: QRect_ITF? = nil) -> QPixmap { callLocalFunction(l: ["", Pointer(), ___className, "Copy", rectangle as Any]) as! QPixmap }
    public func Copy2(x: Int, y: Int, width: Int, height: Int) -> QPixmap { callLocalFunction(l: ["", Pointer(), ___className, "Copy2", x as Any, y as Any, width as Any, height as Any]) as! QPixmap }
    public func CreateHeuristicMask(clipTight: Bool) -> QBitmap { callLocalFunction(l: ["", Pointer(), ___className, "CreateHeuristicMask", clipTight as Any]) as! QBitmap }
    public func CreateMaskFromColor(maskColor: QColor_ITF? = nil, mode: Int) -> QBitmap { callLocalFunction(l: ["", Pointer(), ___className, "CreateMaskFromColor", maskColor as Any, mode as Any]) as! QBitmap }
    public func DefaultDepth() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "DefaultDepth"]) as! Float) }
    public func Detach() { _ = callLocalFunction(l: ["", Pointer(), ___className, "Detach"]) }
    public func DevicePixelRatio_QPixmap() -> Float { callLocalFunction(l: ["", Pointer(), ___className, "DevicePixelRatio"]) as! Float }
    public func Fill(color: QColor_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "Fill", color as Any]) }
    public func FromImage(image: QImage_ITF? = nil, flags: Int) -> QPixmap { callLocalFunction(l: ["", Pointer(), ___className, "FromImage", image as Any, flags as Any]) as! QPixmap }
    public func FromImage2(image: QImage_ITF? = nil, flags: Int) -> QPixmap { callLocalFunction(l: ["", Pointer(), ___className, "FromImage2", image as Any, flags as Any]) as! QPixmap }
    public func FromImageReader(imageReader: QImageReader_ITF? = nil, flags: Int) -> QPixmap { callLocalFunction(l: ["", Pointer(), ___className, "FromImageReader", imageReader as Any, flags as Any]) as! QPixmap }
    public func HasAlpha() -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "HasAlpha"]) as! Bool }
    public func HasAlphaChannel() -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "HasAlphaChannel"]) as! Bool }
    public func IsNull() -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "IsNull"]) as! Bool }
    public func IsQBitmap() -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "IsQBitmap"]) as! Bool }
    public func Load(fileName: String, format: String, flags: Int) -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "Load", fileName as Any, format as Any, flags as Any]) as! Bool }
    public func LoadFromData(data: String, l: Int, format: String, flags: Int) -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "LoadFromData", data as Any, l as Any, format as Any, flags as Any]) as! Bool }
    public func LoadFromData2(data: QByteArray_ITF? = nil, format: String, flags: Int) -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "LoadFromData2", data as Any, format as Any, flags as Any]) as! Bool }
    public func Mask() -> QBitmap { callLocalFunction(l: ["", Pointer(), ___className, "Mask"]) as! QBitmap }
    public func Rect() -> QRect { callLocalFunction(l: ["", Pointer(), ___className, "Rect"]) as! QRect }
    public func Save(fileName: String, format: String, quality: Int) -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "Save", fileName as Any, format as Any, quality as Any]) as! Bool }
    public func Save2(device: QIODevice_ITF? = nil, format: String, quality: Int) -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "Save2", device as Any, format as Any, quality as Any]) as! Bool }
    public func Scaled(size: QSize_ITF? = nil, aspectRatioMode: Int, transformMode: Int) -> QPixmap { callLocalFunction(l: ["", Pointer(), ___className, "Scaled", size as Any, aspectRatioMode as Any, transformMode as Any]) as! QPixmap }
    public func Scaled2(width: Int, height: Int, aspectRatioMode: Int, transformMode: Int) -> QPixmap { callLocalFunction(l: ["", Pointer(), ___className, "Scaled2", width as Any, height as Any, aspectRatioMode as Any, transformMode as Any]) as! QPixmap }
    public func ScaledToHeight(height: Int, mode: Int) -> QPixmap { callLocalFunction(l: ["", Pointer(), ___className, "ScaledToHeight", height as Any, mode as Any]) as! QPixmap }
    public func ScaledToWidth(width: Int, mode: Int) -> QPixmap { callLocalFunction(l: ["", Pointer(), ___className, "ScaledToWidth", width as Any, mode as Any]) as! QPixmap }
    public func Scroll(dx: Int, dy: Int, x: Int, y: Int, width: Int, height: Int, exposed: QRegion_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "Scroll", dx as Any, dy as Any, x as Any, y as Any, width as Any, height as Any, exposed as Any]) }
    public func Scroll2(dx: Int, dy: Int, rect: QRect_ITF? = nil, exposed: QRegion_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "Scroll2", dx as Any, dy as Any, rect as Any, exposed as Any]) }
    public func SetDevicePixelRatio(scaleFactor: Float) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetDevicePixelRatio", scaleFactor as Any]) }
    public func SetMask(mask: QBitmap_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetMask", mask as Any]) }
    public func Size() -> QSize { callLocalFunction(l: ["", Pointer(), ___className, "Size"]) as! QSize }
    public func Swap(other: QPixmap_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "Swap", other as Any]) }
    public func ToImage() -> QImage { callLocalFunction(l: ["", Pointer(), ___className, "ToImage"]) as! QImage }
    public func Transformed(transform: QTransform_ITF? = nil, mode: Int) -> QPixmap { callLocalFunction(l: ["", Pointer(), ___className, "Transformed", transform as Any, mode as Any]) as! QPixmap }
    public func Transformed2(matrix: QMatrix_ITF? = nil, mode: Int) -> QPixmap { callLocalFunction(l: ["", Pointer(), ___className, "Transformed2", matrix as Any, mode as Any]) as! QPixmap }
    public func TrueMatrix(matrix: QTransform_ITF? = nil, width: Int, height: Int) -> QTransform { callLocalFunction(l: ["", Pointer(), ___className, "TrueMatrix", matrix as Any, width as Any, height as Any]) as! QTransform }
    public func TrueMatrix2(m: QMatrix_ITF? = nil, w: Int, h: Int) -> QMatrix { callLocalFunction(l: ["", Pointer(), ___className, "TrueMatrix2", m as Any, w as Any, h as Any]) as! QMatrix }
    public func ConnectDestroyQPixmap(f: @escaping () -> Void) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectDestroyQPixmap", "___REMOTE_CALLBACK___"], f: { (_: [Any]) -> Any in f() } as Any) }
    public func DisconnectDestroyQPixmap() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectDestroyQPixmap"]) }
    public func DestroyQPixmap() { _ = callLocalFunction(l: ["", Pointer(), ___className, "DestroyQPixmap"]) }
    public func DestroyQPixmapDefault() { _ = callLocalFunction(l: ["", Pointer(), ___className, "DestroyQPixmapDefault"]) }
    public func ToVariant() -> QVariant { callLocalFunction(l: ["", Pointer(), ___className, "ToVariant"]) as! QVariant }
    override public func PaintEngine() -> QPaintEngine { callLocalFunction(l: ["", Pointer(), ___className, "PaintEngine"]) as! QPaintEngine }
    public func PaintEngineDefault() -> QPaintEngine { callLocalFunction(l: ["", Pointer(), ___className, "PaintEngineDefault"]) as! QPaintEngine }
}

public func NewQPixmapFromPointer(ptr: String) -> QPixmap { let r = QPixmap(); r.initFrom(p: ptr, n: "gui.QPixmap"); return r }
public func NewQPixmap() -> QPixmap { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.NewQPixmap", ""]) as! QPixmap }
public func NewQPixmap2(size: QSize_ITF? = nil) -> QPixmap { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.NewQPixmap2", "", size as Any]) as! QPixmap }
public func NewQPixmap3(fileName: String, format: String, flags: Int) -> QPixmap { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.NewQPixmap3", "", fileName as Any, format as Any, flags as Any]) as! QPixmap }
public func NewQPixmap5(pixmap: QPixmap_ITF? = nil) -> QPixmap { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.NewQPixmap5", "", pixmap as Any]) as! QPixmap }
public func QPixmap_DefaultDepth() -> Int { Gui.initModule(); return Int(callLocalFunction(l: ["", "", "gui.QPixmap_DefaultDepth", ""]) as! Float) }
public func QPixmap_FromImage(image: QImage_ITF? = nil, flags: Int) -> QPixmap { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.QPixmap_FromImage", "", image as Any, flags as Any]) as! QPixmap }
public func QPixmap_FromImage2(image: QImage_ITF? = nil, flags: Int) -> QPixmap { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.QPixmap_FromImage2", "", image as Any, flags as Any]) as! QPixmap }
public func QPixmap_FromImageReader(imageReader: QImageReader_ITF? = nil, flags: Int) -> QPixmap { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.QPixmap_FromImageReader", "", imageReader as Any, flags as Any]) as! QPixmap }
public func QPixmap_TrueMatrix(matrix: QTransform_ITF? = nil, width: Int, height: Int) -> QTransform { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.QPixmap_TrueMatrix", "", matrix as Any, width as Any, height as Any]) as! QTransform }
public func QPixmap_TrueMatrix2(m: QMatrix_ITF? = nil, w: Int, h: Int) -> QMatrix { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.QPixmap_TrueMatrix2", "", m as Any, w as Any, h as Any]) as! QMatrix }
public protocol QPixmapCache_ITF {
    func QPixmapCache_PTR() -> QPixmapCache
}

public class QPixmapCache: Internal, QPixmapCache_ITF {
    public func QPixmapCache_PTR() -> QPixmapCache { callLocalFunction(l: ["", Pointer(), ___className, "QPixmapCache_PTR"]) as! QPixmapCache }
    public func DestroyQPixmapCache() { _ = callLocalFunction(l: ["", Pointer(), ___className, "DestroyQPixmapCache"]) }
    public func CacheLimit() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "CacheLimit"]) as! Float) }
    public func Clear() { _ = callLocalFunction(l: ["", Pointer(), ___className, "Clear"]) }
    public func Find3(key: String, pixmap: QPixmap_ITF? = nil) -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "Find3", key as Any, pixmap as Any]) as! Bool }
    public func Insert(key: String, pixmap: QPixmap_ITF? = nil) -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "Insert", key as Any, pixmap as Any]) as! Bool }
    public func Remove(key: String) { _ = callLocalFunction(l: ["", Pointer(), ___className, "Remove", key as Any]) }
    public func SetCacheLimit(n: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetCacheLimit", n as Any]) }
}

public func NewQPixmapCacheFromPointer(ptr: String) -> QPixmapCache { let r = QPixmapCache(); r.initFrom(p: ptr, n: "gui.QPixmapCache"); return r }
public func QPixmapCache_CacheLimit() -> Int { Gui.initModule(); return Int(callLocalFunction(l: ["", "", "gui.QPixmapCache_CacheLimit", ""]) as! Float) }
public func QPixmapCache_Clear() { Gui.initModule(); _ = callLocalFunction(l: ["", "", "gui.QPixmapCache_Clear", ""]) }
public func QPixmapCache_Find3(key: String, pixmap: QPixmap_ITF? = nil) -> Bool { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.QPixmapCache_Find3", "", key as Any, pixmap as Any]) as! Bool }
public func QPixmapCache_Insert(key: String, pixmap: QPixmap_ITF? = nil) -> Bool { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.QPixmapCache_Insert", "", key as Any, pixmap as Any]) as! Bool }
public func QPixmapCache_Remove(key: String) { Gui.initModule(); _ = callLocalFunction(l: ["", "", "gui.QPixmapCache_Remove", "", key as Any]) }
public func QPixmapCache_SetCacheLimit(n: Int) { Gui.initModule(); _ = callLocalFunction(l: ["", "", "gui.QPixmapCache_SetCacheLimit", "", n as Any]) }
public protocol QPlatformDragQtResponse_ITF: QPlatformDropQtResponse_ITF {
    func QPlatformDragQtResponse_PTR() -> QPlatformDragQtResponse
}

public class QPlatformDragQtResponse: QPlatformDropQtResponse, QPlatformDragQtResponse_ITF {
    public func QPlatformDragQtResponse_PTR() -> QPlatformDragQtResponse { callLocalFunction(l: ["", Pointer(), ___className, "QPlatformDragQtResponse_PTR"]) as! QPlatformDragQtResponse }
    public func DestroyQPlatformDragQtResponse() { _ = callLocalFunction(l: ["", Pointer(), ___className, "DestroyQPlatformDragQtResponse"]) }
}

public protocol QPlatformDropQtResponse_ITF {
    func QPlatformDropQtResponse_PTR() -> QPlatformDropQtResponse
}

public class QPlatformDropQtResponse: Internal, QPlatformDropQtResponse_ITF {
    public func QPlatformDropQtResponse_PTR() -> QPlatformDropQtResponse { callLocalFunction(l: ["", Pointer(), ___className, "QPlatformDropQtResponse_PTR"]) as! QPlatformDropQtResponse }
    public func DestroyQPlatformDropQtResponse() { _ = callLocalFunction(l: ["", Pointer(), ___className, "DestroyQPlatformDropQtResponse"]) }
}

public protocol QPlatformIntegrationPlugin_ITF: QObject_ITF {
    func QPlatformIntegrationPlugin_PTR() -> QPlatformIntegrationPlugin
}

public class QPlatformIntegrationPlugin: QObject, QPlatformIntegrationPlugin_ITF {
    public func QPlatformIntegrationPlugin_PTR() -> QPlatformIntegrationPlugin { callLocalFunction(l: ["", Pointer(), ___className, "QPlatformIntegrationPlugin_PTR"]) as! QPlatformIntegrationPlugin }
}

public protocol QPlatformMenu_ITF: QObject_ITF {
    func QPlatformMenu_PTR() -> QPlatformMenu
}

public class QPlatformMenu: QObject, QPlatformMenu_ITF {
    public func QPlatformMenu_PTR() -> QPlatformMenu { callLocalFunction(l: ["", Pointer(), ___className, "QPlatformMenu_PTR"]) as! QPlatformMenu }
}

public protocol QPlatformMenuBar_ITF: QObject_ITF {
    func QPlatformMenuBar_PTR() -> QPlatformMenuBar
}

public class QPlatformMenuBar: QObject, QPlatformMenuBar_ITF {
    public func QPlatformMenuBar_PTR() -> QPlatformMenuBar { callLocalFunction(l: ["", Pointer(), ___className, "QPlatformMenuBar_PTR"]) as! QPlatformMenuBar }
}

public protocol QPlatformMenuItem_ITF: QObject_ITF {
    func QPlatformMenuItem_PTR() -> QPlatformMenuItem
}

public class QPlatformMenuItem: QObject, QPlatformMenuItem_ITF {
    public func QPlatformMenuItem_PTR() -> QPlatformMenuItem { callLocalFunction(l: ["", Pointer(), ___className, "QPlatformMenuItem_PTR"]) as! QPlatformMenuItem }
}

public protocol QPlatformOffscreenSurface_ITF {
    func QPlatformOffscreenSurface_PTR() -> QPlatformOffscreenSurface
}

public class QPlatformOffscreenSurface: Internal, QPlatformOffscreenSurface_ITF {
    public func QPlatformOffscreenSurface_PTR() -> QPlatformOffscreenSurface { callLocalFunction(l: ["", Pointer(), ___className, "QPlatformOffscreenSurface_PTR"]) as! QPlatformOffscreenSurface }
    public func DestroyQPlatformOffscreenSurface() { _ = callLocalFunction(l: ["", Pointer(), ___className, "DestroyQPlatformOffscreenSurface"]) }
}

public protocol QPlatformSessionManager_ITF {
    func QPlatformSessionManager_PTR() -> QPlatformSessionManager
}

public class QPlatformSessionManager: Internal, QPlatformSessionManager_ITF {
    public func QPlatformSessionManager_PTR() -> QPlatformSessionManager { callLocalFunction(l: ["", Pointer(), ___className, "QPlatformSessionManager_PTR"]) as! QPlatformSessionManager }
    public func DestroyQPlatformSessionManager() { _ = callLocalFunction(l: ["", Pointer(), ___className, "DestroyQPlatformSessionManager"]) }
}

public protocol QPlatformSurfaceEvent_ITF: QEvent_ITF {
    func QPlatformSurfaceEvent_PTR() -> QPlatformSurfaceEvent
}

public class QPlatformSurfaceEvent: QEvent, QPlatformSurfaceEvent_ITF {
    public func QPlatformSurfaceEvent_PTR() -> QPlatformSurfaceEvent { callLocalFunction(l: ["", Pointer(), ___className, "QPlatformSurfaceEvent_PTR"]) as! QPlatformSurfaceEvent }
    public func DestroyQPlatformSurfaceEvent() { _ = callLocalFunction(l: ["", Pointer(), ___className, "DestroyQPlatformSurfaceEvent"]) }
    public func SurfaceEventType() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "SurfaceEventType"]) as! Float) }
}

public func NewQPlatformSurfaceEventFromPointer(ptr: String) -> QPlatformSurfaceEvent { let r = QPlatformSurfaceEvent(); r.initFrom(p: ptr, n: "gui.QPlatformSurfaceEvent"); return r }
public func NewQPlatformSurfaceEvent(surfaceEventType: Int) -> QPlatformSurfaceEvent { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.NewQPlatformSurfaceEvent", "", surfaceEventType as Any]) as! QPlatformSurfaceEvent }
public protocol QPlatformTextureList_ITF: QObject_ITF {
    func QPlatformTextureList_PTR() -> QPlatformTextureList
}

public class QPlatformTextureList: QObject, QPlatformTextureList_ITF {
    public func QPlatformTextureList_PTR() -> QPlatformTextureList { callLocalFunction(l: ["", Pointer(), ___className, "QPlatformTextureList_PTR"]) as! QPlatformTextureList }
}

public protocol QPointingDeviceUniqueId_ITF {
    func QPointingDeviceUniqueId_PTR() -> QPointingDeviceUniqueId
}

public class QPointingDeviceUniqueId: Internal, QPointingDeviceUniqueId_ITF {
    public func QPointingDeviceUniqueId_PTR() -> QPointingDeviceUniqueId { callLocalFunction(l: ["", Pointer(), ___className, "QPointingDeviceUniqueId_PTR"]) as! QPointingDeviceUniqueId }
    public func DestroyQPointingDeviceUniqueId() { _ = callLocalFunction(l: ["", Pointer(), ___className, "DestroyQPointingDeviceUniqueId"]) }
    public func FromNumericId(id: Int) -> QPointingDeviceUniqueId { callLocalFunction(l: ["", Pointer(), ___className, "FromNumericId", id as Any]) as! QPointingDeviceUniqueId }
    public func IsValid() -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "IsValid"]) as! Bool }
    public func NumericId() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "NumericId"]) as! Float) }
}

public func NewQPointingDeviceUniqueIdFromPointer(ptr: String) -> QPointingDeviceUniqueId { let r = QPointingDeviceUniqueId(); r.initFrom(p: ptr, n: "gui.QPointingDeviceUniqueId"); return r }
public func NewQPointingDeviceUniqueId() -> QPointingDeviceUniqueId { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.NewQPointingDeviceUniqueId", ""]) as! QPointingDeviceUniqueId }
public func QPointingDeviceUniqueId_FromNumericId(id: Int) -> QPointingDeviceUniqueId { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.QPointingDeviceUniqueId_FromNumericId", "", id as Any]) as! QPointingDeviceUniqueId }
public protocol QPolygon_ITF: QVector_ITF {
    func QPolygon_PTR() -> QPolygon
}

public class QPolygon: QVector, QPolygon_ITF {
    public func QPolygon_PTR() -> QPolygon { callLocalFunction(l: ["", Pointer(), ___className, "QPolygon_PTR"]) as! QPolygon }
    public func BoundingRect() -> QRect { callLocalFunction(l: ["", Pointer(), ___className, "BoundingRect"]) as! QRect }
    public func ContainsPoint(point: QPoint_ITF? = nil, fillRule: Int) -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "ContainsPoint", point as Any, fillRule as Any]) as! Bool }
    public func Intersected(r: QPolygon_ITF? = nil) -> QPolygon { callLocalFunction(l: ["", Pointer(), ___className, "Intersected", r as Any]) as! QPolygon }
    public func Intersects(p: QPolygon_ITF? = nil) -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "Intersects", p as Any]) as! Bool }
    public func Point(index: Int, x: Int, y: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "Point", index as Any, x as Any, y as Any]) }
    public func Point2(index: Int) -> QPoint { callLocalFunction(l: ["", Pointer(), ___className, "Point2", index as Any]) as! QPoint }
    public func PutPoints(index: Int, nPoints: Int, fromPolygon: QPolygon_ITF? = nil, fromIndex: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "PutPoints", index as Any, nPoints as Any, fromPolygon as Any, fromIndex as Any]) }
    public func SetPoint(index: Int, x: Int, y: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetPoint", index as Any, x as Any, y as Any]) }
    public func SetPoint2(index: Int, point: QPoint_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetPoint2", index as Any, point as Any]) }
    public func SetPoints(nPoints: Int, points: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetPoints", nPoints as Any, points as Any]) }
    public func Subtracted(r: QPolygon_ITF? = nil) -> QPolygon { callLocalFunction(l: ["", Pointer(), ___className, "Subtracted", r as Any]) as! QPolygon }
    public func Swap_QPolygon(other: QPolygon_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "Swap", other as Any]) }
    public func Translate(dx: Int, dy: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "Translate", dx as Any, dy as Any]) }
    public func Translate2(offset: QPoint_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "Translate2", offset as Any]) }
    public func Translated(dx: Int, dy: Int) -> QPolygon { callLocalFunction(l: ["", Pointer(), ___className, "Translated", dx as Any, dy as Any]) as! QPolygon }
    public func Translated2(offset: QPoint_ITF? = nil) -> QPolygon { callLocalFunction(l: ["", Pointer(), ___className, "Translated2", offset as Any]) as! QPolygon }
    public func United(r: QPolygon_ITF? = nil) -> QPolygon { callLocalFunction(l: ["", Pointer(), ___className, "United", r as Any]) as! QPolygon }
    public func DestroyQPolygon() { _ = callLocalFunction(l: ["", Pointer(), ___className, "DestroyQPolygon"]) }
}

public func NewQPolygonFromPointer(ptr: String) -> QPolygon { let r = QPolygon(); r.initFrom(p: ptr, n: "gui.QPolygon"); return r }
public func NewQPolygon() -> QPolygon { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.NewQPolygon", ""]) as! QPolygon }
public func NewQPolygon2(size: Int) -> QPolygon { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.NewQPolygon2", "", size as Any]) as! QPolygon }
public func NewQPolygon3(points: [QPoint]) -> QPolygon { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.NewQPolygon3", "", points as Any]) as! QPolygon }
public func NewQPolygon5(rectangle: QRect_ITF? = nil, closed: Bool) -> QPolygon { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.NewQPolygon5", "", rectangle as Any, closed as Any]) as! QPolygon }
public protocol QPolygonF_ITF: QVector_ITF {
    func QPolygonF_PTR() -> QPolygonF
}

public class QPolygonF: QVector, QPolygonF_ITF {
    public func QPolygonF_PTR() -> QPolygonF { callLocalFunction(l: ["", Pointer(), ___className, "QPolygonF_PTR"]) as! QPolygonF }
    public func BoundingRect() -> QRectF { callLocalFunction(l: ["", Pointer(), ___className, "BoundingRect"]) as! QRectF }
    public func ContainsPoint(point: QPointF_ITF? = nil, fillRule: Int) -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "ContainsPoint", point as Any, fillRule as Any]) as! Bool }
    public func Intersected(r: QPolygonF_ITF? = nil) -> QPolygonF { callLocalFunction(l: ["", Pointer(), ___className, "Intersected", r as Any]) as! QPolygonF }
    public func Intersects(p: QPolygonF_ITF? = nil) -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "Intersects", p as Any]) as! Bool }
    public func IsClosed() -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "IsClosed"]) as! Bool }
    public func Subtracted(r: QPolygonF_ITF? = nil) -> QPolygonF { callLocalFunction(l: ["", Pointer(), ___className, "Subtracted", r as Any]) as! QPolygonF }
    public func Swap_QPolygonF(other: QPolygonF_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "Swap", other as Any]) }
    public func ToPolygon() -> QPolygon { callLocalFunction(l: ["", Pointer(), ___className, "ToPolygon"]) as! QPolygon }
    public func Translate(offset: QPointF_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "Translate", offset as Any]) }
    public func Translate2(dx: Float, dy: Float) { _ = callLocalFunction(l: ["", Pointer(), ___className, "Translate2", dx as Any, dy as Any]) }
    public func Translated(offset: QPointF_ITF? = nil) -> QPolygonF { callLocalFunction(l: ["", Pointer(), ___className, "Translated", offset as Any]) as! QPolygonF }
    public func Translated2(dx: Float, dy: Float) -> QPolygonF { callLocalFunction(l: ["", Pointer(), ___className, "Translated2", dx as Any, dy as Any]) as! QPolygonF }
    public func United(r: QPolygonF_ITF? = nil) -> QPolygonF { callLocalFunction(l: ["", Pointer(), ___className, "United", r as Any]) as! QPolygonF }
    public func DestroyQPolygonF() { _ = callLocalFunction(l: ["", Pointer(), ___className, "DestroyQPolygonF"]) }
}

public func NewQPolygonFFromPointer(ptr: String) -> QPolygonF { let r = QPolygonF(); r.initFrom(p: ptr, n: "gui.QPolygonF"); return r }
public func NewQPolygonF() -> QPolygonF { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.NewQPolygonF", ""]) as! QPolygonF }
public func NewQPolygonF2(size: Int) -> QPolygonF { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.NewQPolygonF2", "", size as Any]) as! QPolygonF }
public func NewQPolygonF3(points: [QPointF]) -> QPolygonF { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.NewQPolygonF3", "", points as Any]) as! QPolygonF }
public func NewQPolygonF5(rectangle: QRectF_ITF? = nil) -> QPolygonF { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.NewQPolygonF5", "", rectangle as Any]) as! QPolygonF }
public func NewQPolygonF6(polygon: QPolygon_ITF? = nil) -> QPolygonF { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.NewQPolygonF6", "", polygon as Any]) as! QPolygonF }
public func NewQPolygonF7(polygon: QPolygonF_ITF? = nil) -> QPolygonF { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.NewQPolygonF7", "", polygon as Any]) as! QPolygonF }
public protocol QQuaternion_ITF {
    func QQuaternion_PTR() -> QQuaternion
}

public class QQuaternion: Internal, QQuaternion_ITF {
    public func QQuaternion_PTR() -> QQuaternion { callLocalFunction(l: ["", Pointer(), ___className, "QQuaternion_PTR"]) as! QQuaternion }
    public func DestroyQQuaternion() { _ = callLocalFunction(l: ["", Pointer(), ___className, "DestroyQQuaternion"]) }
    public func Conjugated() -> QQuaternion { callLocalFunction(l: ["", Pointer(), ___className, "Conjugated"]) as! QQuaternion }
    public func DotProduct(q1: QQuaternion_ITF? = nil, q2: QQuaternion_ITF? = nil) -> Float { callLocalFunction(l: ["", Pointer(), ___className, "DotProduct", q1 as Any, q2 as Any]) as! Float }
    public func FromAxes(xAxis: QVector3D_ITF? = nil, yAxis: QVector3D_ITF? = nil, zAxis: QVector3D_ITF? = nil) -> QQuaternion { callLocalFunction(l: ["", Pointer(), ___className, "FromAxes", xAxis as Any, yAxis as Any, zAxis as Any]) as! QQuaternion }
    public func FromAxisAndAngle(axis: QVector3D_ITF? = nil, angle: Float) -> QQuaternion { callLocalFunction(l: ["", Pointer(), ___className, "FromAxisAndAngle", axis as Any, angle as Any]) as! QQuaternion }
    public func FromAxisAndAngle2(x: Float, y: Float, z: Float, angle: Float) -> QQuaternion { callLocalFunction(l: ["", Pointer(), ___className, "FromAxisAndAngle2", x as Any, y as Any, z as Any, angle as Any]) as! QQuaternion }
    public func FromDirection(direction: QVector3D_ITF? = nil, up: QVector3D_ITF? = nil) -> QQuaternion { callLocalFunction(l: ["", Pointer(), ___className, "FromDirection", direction as Any, up as Any]) as! QQuaternion }
    public func FromEulerAngles(pitch: Float, yaw: Float, roll: Float) -> QQuaternion { callLocalFunction(l: ["", Pointer(), ___className, "FromEulerAngles", pitch as Any, yaw as Any, roll as Any]) as! QQuaternion }
    public func FromEulerAngles2(eulerAngles: QVector3D_ITF? = nil) -> QQuaternion { callLocalFunction(l: ["", Pointer(), ___className, "FromEulerAngles2", eulerAngles as Any]) as! QQuaternion }
    public func GetAxes(xAxis: QVector3D_ITF? = nil, yAxis: QVector3D_ITF? = nil, zAxis: QVector3D_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "GetAxes", xAxis as Any, yAxis as Any, zAxis as Any]) }
    public func GetAxisAndAngle(x: Float, y: Float, z: Float, angle: Float) { _ = callLocalFunction(l: ["", Pointer(), ___className, "GetAxisAndAngle", x as Any, y as Any, z as Any, angle as Any]) }
    public func GetAxisAndAngle2(axis: QVector3D_ITF? = nil, angle: Float) { _ = callLocalFunction(l: ["", Pointer(), ___className, "GetAxisAndAngle2", axis as Any, angle as Any]) }
    public func GetEulerAngles(pitch: Float, yaw: Float, roll: Float) { _ = callLocalFunction(l: ["", Pointer(), ___className, "GetEulerAngles", pitch as Any, yaw as Any, roll as Any]) }
    public func Inverted() -> QQuaternion { callLocalFunction(l: ["", Pointer(), ___className, "Inverted"]) as! QQuaternion }
    public func IsIdentity() -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "IsIdentity"]) as! Bool }
    public func IsNull() -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "IsNull"]) as! Bool }
    public func Length() -> Float { callLocalFunction(l: ["", Pointer(), ___className, "Length"]) as! Float }
    public func LengthSquared() -> Float { callLocalFunction(l: ["", Pointer(), ___className, "LengthSquared"]) as! Float }
    public func Nlerp(q1: QQuaternion_ITF? = nil, q2: QQuaternion_ITF? = nil, t: Float) -> QQuaternion { callLocalFunction(l: ["", Pointer(), ___className, "Nlerp", q1 as Any, q2 as Any, t as Any]) as! QQuaternion }
    public func Normalize() { _ = callLocalFunction(l: ["", Pointer(), ___className, "Normalize"]) }
    public func Normalized() -> QQuaternion { callLocalFunction(l: ["", Pointer(), ___className, "Normalized"]) as! QQuaternion }
    public func RotatedVector(vector: QVector3D_ITF? = nil) -> QVector3D { callLocalFunction(l: ["", Pointer(), ___className, "RotatedVector", vector as Any]) as! QVector3D }
    public func RotationTo(from: QVector3D_ITF? = nil, to: QVector3D_ITF? = nil) -> QQuaternion { callLocalFunction(l: ["", Pointer(), ___className, "RotationTo", from as Any, to as Any]) as! QQuaternion }
    public func Scalar() -> Float { callLocalFunction(l: ["", Pointer(), ___className, "Scalar"]) as! Float }
    public func SetScalar(scalar: Float) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetScalar", scalar as Any]) }
    public func SetVector(vector: QVector3D_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetVector", vector as Any]) }
    public func SetVector2(x: Float, y: Float, z: Float) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetVector2", x as Any, y as Any, z as Any]) }
    public func SetX(x: Float) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetX", x as Any]) }
    public func SetY(y: Float) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetY", y as Any]) }
    public func SetZ(z: Float) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetZ", z as Any]) }
    public func Slerp(q1: QQuaternion_ITF? = nil, q2: QQuaternion_ITF? = nil, t: Float) -> QQuaternion { callLocalFunction(l: ["", Pointer(), ___className, "Slerp", q1 as Any, q2 as Any, t as Any]) as! QQuaternion }
    public func ToEulerAngles() -> QVector3D { callLocalFunction(l: ["", Pointer(), ___className, "ToEulerAngles"]) as! QVector3D }
    public func ToVector4D() -> QVector4D { callLocalFunction(l: ["", Pointer(), ___className, "ToVector4D"]) as! QVector4D }
    public func Vector() -> QVector3D { callLocalFunction(l: ["", Pointer(), ___className, "Vector"]) as! QVector3D }
    public func X() -> Float { callLocalFunction(l: ["", Pointer(), ___className, "X"]) as! Float }
    public func Y() -> Float { callLocalFunction(l: ["", Pointer(), ___className, "Y"]) as! Float }
    public func Z() -> Float { callLocalFunction(l: ["", Pointer(), ___className, "Z"]) as! Float }
}

public func NewQQuaternionFromPointer(ptr: String) -> QQuaternion { let r = QQuaternion(); r.initFrom(p: ptr, n: "gui.QQuaternion"); return r }
public func NewQQuaternion() -> QQuaternion { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.NewQQuaternion", ""]) as! QQuaternion }
public func NewQQuaternion3(scalar: Float, xpos: Float, ypos: Float, zpos: Float) -> QQuaternion { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.NewQQuaternion3", "", scalar as Any, xpos as Any, ypos as Any, zpos as Any]) as! QQuaternion }
public func NewQQuaternion4(scalar: Float, vector: QVector3D_ITF? = nil) -> QQuaternion { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.NewQQuaternion4", "", scalar as Any, vector as Any]) as! QQuaternion }
public func NewQQuaternion5(vector: QVector4D_ITF? = nil) -> QQuaternion { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.NewQQuaternion5", "", vector as Any]) as! QQuaternion }
public func QQuaternion_DotProduct(q1: QQuaternion_ITF? = nil, q2: QQuaternion_ITF? = nil) -> Float { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.QQuaternion_DotProduct", "", q1 as Any, q2 as Any]) as! Float }
public func QQuaternion_FromAxes(xAxis: QVector3D_ITF? = nil, yAxis: QVector3D_ITF? = nil, zAxis: QVector3D_ITF? = nil) -> QQuaternion { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.QQuaternion_FromAxes", "", xAxis as Any, yAxis as Any, zAxis as Any]) as! QQuaternion }
public func QQuaternion_FromAxisAndAngle(axis: QVector3D_ITF? = nil, angle: Float) -> QQuaternion { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.QQuaternion_FromAxisAndAngle", "", axis as Any, angle as Any]) as! QQuaternion }
public func QQuaternion_FromAxisAndAngle2(x: Float, y: Float, z: Float, angle: Float) -> QQuaternion { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.QQuaternion_FromAxisAndAngle2", "", x as Any, y as Any, z as Any, angle as Any]) as! QQuaternion }
public func QQuaternion_FromDirection(direction: QVector3D_ITF? = nil, up: QVector3D_ITF? = nil) -> QQuaternion { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.QQuaternion_FromDirection", "", direction as Any, up as Any]) as! QQuaternion }
public func QQuaternion_FromEulerAngles(pitch: Float, yaw: Float, roll: Float) -> QQuaternion { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.QQuaternion_FromEulerAngles", "", pitch as Any, yaw as Any, roll as Any]) as! QQuaternion }
public func QQuaternion_FromEulerAngles2(eulerAngles: QVector3D_ITF? = nil) -> QQuaternion { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.QQuaternion_FromEulerAngles2", "", eulerAngles as Any]) as! QQuaternion }
public func QQuaternion_Nlerp(q1: QQuaternion_ITF? = nil, q2: QQuaternion_ITF? = nil, t: Float) -> QQuaternion { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.QQuaternion_Nlerp", "", q1 as Any, q2 as Any, t as Any]) as! QQuaternion }
public func QQuaternion_RotationTo(from: QVector3D_ITF? = nil, to: QVector3D_ITF? = nil) -> QQuaternion { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.QQuaternion_RotationTo", "", from as Any, to as Any]) as! QQuaternion }
public func QQuaternion_Slerp(q1: QQuaternion_ITF? = nil, q2: QQuaternion_ITF? = nil, t: Float) -> QQuaternion { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.QQuaternion_Slerp", "", q1 as Any, q2 as Any, t as Any]) as! QQuaternion }
public protocol QRadialGradient_ITF: QGradient_ITF {
    func QRadialGradient_PTR() -> QRadialGradient
}

public class QRadialGradient: QGradient, QRadialGradient_ITF {
    public func QRadialGradient_PTR() -> QRadialGradient { callLocalFunction(l: ["", Pointer(), ___className, "QRadialGradient_PTR"]) as! QRadialGradient }
    public func DestroyQRadialGradient() { _ = callLocalFunction(l: ["", Pointer(), ___className, "DestroyQRadialGradient"]) }
    public func Center() -> QPointF { callLocalFunction(l: ["", Pointer(), ___className, "Center"]) as! QPointF }
    public func CenterRadius() -> Float { callLocalFunction(l: ["", Pointer(), ___className, "CenterRadius"]) as! Float }
    public func FocalPoint() -> QPointF { callLocalFunction(l: ["", Pointer(), ___className, "FocalPoint"]) as! QPointF }
    public func FocalRadius() -> Float { callLocalFunction(l: ["", Pointer(), ___className, "FocalRadius"]) as! Float }
    public func Radius() -> Float { callLocalFunction(l: ["", Pointer(), ___className, "Radius"]) as! Float }
    public func SetCenter(center: QPointF_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetCenter", center as Any]) }
    public func SetCenter2(x: Float, y: Float) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetCenter2", x as Any, y as Any]) }
    public func SetCenterRadius(radius: Float) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetCenterRadius", radius as Any]) }
    public func SetFocalPoint(focalPoint: QPointF_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetFocalPoint", focalPoint as Any]) }
    public func SetFocalPoint2(x: Float, y: Float) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetFocalPoint2", x as Any, y as Any]) }
    public func SetFocalRadius(radius: Float) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetFocalRadius", radius as Any]) }
    public func SetRadius(radius: Float) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetRadius", radius as Any]) }
}

public func NewQRadialGradientFromPointer(ptr: String) -> QRadialGradient { let r = QRadialGradient(); r.initFrom(p: ptr, n: "gui.QRadialGradient"); return r }
public func NewQRadialGradient() -> QRadialGradient { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.NewQRadialGradient", ""]) as! QRadialGradient }
public func NewQRadialGradient2(center: QPointF_ITF? = nil, radius: Float, focalPoint: QPointF_ITF? = nil) -> QRadialGradient { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.NewQRadialGradient2", "", center as Any, radius as Any, focalPoint as Any]) as! QRadialGradient }
public func NewQRadialGradient3(cx: Float, cy: Float, radius: Float, fx: Float, fy: Float) -> QRadialGradient { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.NewQRadialGradient3", "", cx as Any, cy as Any, radius as Any, fx as Any, fy as Any]) as! QRadialGradient }
public func NewQRadialGradient4(center: QPointF_ITF? = nil, radius: Float) -> QRadialGradient { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.NewQRadialGradient4", "", center as Any, radius as Any]) as! QRadialGradient }
public func NewQRadialGradient5(cx: Float, cy: Float, radius: Float) -> QRadialGradient { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.NewQRadialGradient5", "", cx as Any, cy as Any, radius as Any]) as! QRadialGradient }
public func NewQRadialGradient6(center: QPointF_ITF? = nil, centerRadius: Float, focalPoint: QPointF_ITF? = nil, focalRadius: Float) -> QRadialGradient { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.NewQRadialGradient6", "", center as Any, centerRadius as Any, focalPoint as Any, focalRadius as Any]) as! QRadialGradient }
public func NewQRadialGradient7(cx: Float, cy: Float, centerRadius: Float, fx: Float, fy: Float, focalRadius: Float) -> QRadialGradient { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.NewQRadialGradient7", "", cx as Any, cy as Any, centerRadius as Any, fx as Any, fy as Any, focalRadius as Any]) as! QRadialGradient }
public protocol QRasterPaintEngine_ITF: QPaintEngine_ITF {
    func QRasterPaintEngine_PTR() -> QRasterPaintEngine
}

public class QRasterPaintEngine: QPaintEngine, QRasterPaintEngine_ITF {
    public func QRasterPaintEngine_PTR() -> QRasterPaintEngine { callLocalFunction(l: ["", Pointer(), ___className, "QRasterPaintEngine_PTR"]) as! QRasterPaintEngine }
}

public protocol QRasterWindow_ITF: QPaintDeviceWindow_ITF {
    func QRasterWindow_PTR() -> QRasterWindow
}

public class QRasterWindow: QPaintDeviceWindow, QRasterWindow_ITF {
    public func QRasterWindow_PTR() -> QRasterWindow { callLocalFunction(l: ["", Pointer(), ___className, "QRasterWindow_PTR"]) as! QRasterWindow }
}

public func NewQRasterWindowFromPointer(ptr: String) -> QRasterWindow { let r = QRasterWindow(); r.initFrom(p: ptr, n: "gui.QRasterWindow"); return r }
public func NewQRasterWindow(parent: QWindow_ITF? = nil) -> QRasterWindow { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.NewQRasterWindow", "", parent as Any]) as! QRasterWindow }
public protocol QRawFont_ITF {
    func QRawFont_PTR() -> QRawFont
}

public class QRawFont: Internal, QRawFont_ITF {
    public func QRawFont_PTR() -> QRawFont { callLocalFunction(l: ["", Pointer(), ___className, "QRawFont_PTR"]) as! QRawFont }
    public func AdvancesForGlyphIndexes(glyphIndexes: [Int], layoutFlags: Int) -> [QPointF] { callLocalFunction(l: ["", Pointer(), ___className, "AdvancesForGlyphIndexes", glyphIndexes as Any, layoutFlags as Any]) as! [QPointF] }
    public func AdvancesForGlyphIndexes2(glyphIndexes: [Int]) -> [QPointF] { callLocalFunction(l: ["", Pointer(), ___className, "AdvancesForGlyphIndexes2", glyphIndexes as Any]) as! [QPointF] }
    public func AdvancesForGlyphIndexes3(glyphIndexes: Int, advances: QPointF_ITF? = nil, numGlyphs: Int) -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "AdvancesForGlyphIndexes3", glyphIndexes as Any, advances as Any, numGlyphs as Any]) as! Bool }
    public func AdvancesForGlyphIndexes4(glyphIndexes: Int, advances: QPointF_ITF? = nil, numGlyphs: Int, layoutFlags: Int) -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "AdvancesForGlyphIndexes4", glyphIndexes as Any, advances as Any, numGlyphs as Any, layoutFlags as Any]) as! Bool }
    public func AlphaMapForGlyph(glyphIndex: Int, antialiasingType: Int, transform: QTransform_ITF? = nil) -> QImage { callLocalFunction(l: ["", Pointer(), ___className, "AlphaMapForGlyph", glyphIndex as Any, antialiasingType as Any, transform as Any]) as! QImage }
    public func Ascent() -> Float { callLocalFunction(l: ["", Pointer(), ___className, "Ascent"]) as! Float }
    public func AverageCharWidth() -> Float { callLocalFunction(l: ["", Pointer(), ___className, "AverageCharWidth"]) as! Float }
    public func BoundingRect(glyphIndex: Int) -> QRectF { callLocalFunction(l: ["", Pointer(), ___className, "BoundingRect", glyphIndex as Any]) as! QRectF }
    public func CapHeight() -> Float { callLocalFunction(l: ["", Pointer(), ___className, "CapHeight"]) as! Float }
    public func Descent() -> Float { callLocalFunction(l: ["", Pointer(), ___className, "Descent"]) as! Float }
    public func FamilyName() -> String { callLocalFunction(l: ["", Pointer(), ___className, "FamilyName"]) as! String }
    public func FontTable(tagName: String) -> QByteArray { callLocalFunction(l: ["", Pointer(), ___className, "FontTable", tagName as Any]) as! QByteArray }
    public func FromFont(font: QFont_ITF? = nil, writingSystem: Int) -> QRawFont { callLocalFunction(l: ["", Pointer(), ___className, "FromFont", font as Any, writingSystem as Any]) as! QRawFont }
    public func GlyphIndexesForChars(chars: QChar_ITF? = nil, numChars: Int, glyphIndexes: Int, numGlyphs: Int) -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "GlyphIndexesForChars", chars as Any, numChars as Any, glyphIndexes as Any, numGlyphs as Any]) as! Bool }
    public func GlyphIndexesForString(text: String) -> [Int] { callLocalFunction(l: ["", Pointer(), ___className, "GlyphIndexesForString", text as Any]) as! [Int] }
    public func HintingPreference() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "HintingPreference"]) as! Float) }
    public func IsValid() -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "IsValid"]) as! Bool }
    public func Leading() -> Float { callLocalFunction(l: ["", Pointer(), ___className, "Leading"]) as! Float }
    public func LineThickness() -> Float { callLocalFunction(l: ["", Pointer(), ___className, "LineThickness"]) as! Float }
    public func LoadFromData(fontData: QByteArray_ITF? = nil, pixelSize: Float, hintingPreference: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "LoadFromData", fontData as Any, pixelSize as Any, hintingPreference as Any]) }
    public func LoadFromFile(fileName: String, pixelSize: Float, hintingPreference: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "LoadFromFile", fileName as Any, pixelSize as Any, hintingPreference as Any]) }
    public func MaxCharWidth() -> Float { callLocalFunction(l: ["", Pointer(), ___className, "MaxCharWidth"]) as! Float }
    public func PathForGlyph(glyphIndex: Int) -> QPainterPath { callLocalFunction(l: ["", Pointer(), ___className, "PathForGlyph", glyphIndex as Any]) as! QPainterPath }
    public func PixelSize() -> Float { callLocalFunction(l: ["", Pointer(), ___className, "PixelSize"]) as! Float }
    public func SetPixelSize(pixelSize: Float) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetPixelSize", pixelSize as Any]) }
    public func Style() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "Style"]) as! Float) }
    public func StyleName() -> String { callLocalFunction(l: ["", Pointer(), ___className, "StyleName"]) as! String }
    public func SupportedWritingSystems() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "SupportedWritingSystems"]) as! Float) }
    public func SupportsCharacter(character: QChar_ITF? = nil) -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "SupportsCharacter", character as Any]) as! Bool }
    public func SupportsCharacter2(ucs4: Int) -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "SupportsCharacter2", ucs4 as Any]) as! Bool }
    public func Swap(other: QRawFont_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "Swap", other as Any]) }
    public func UnderlinePosition() -> Float { callLocalFunction(l: ["", Pointer(), ___className, "UnderlinePosition"]) as! Float }
    public func UnitsPerEm() -> Float { callLocalFunction(l: ["", Pointer(), ___className, "UnitsPerEm"]) as! Float }
    public func Weight() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "Weight"]) as! Float) }
    public func XHeight() -> Float { callLocalFunction(l: ["", Pointer(), ___className, "XHeight"]) as! Float }
    public func DestroyQRawFont() { _ = callLocalFunction(l: ["", Pointer(), ___className, "DestroyQRawFont"]) }
}

public func NewQRawFontFromPointer(ptr: String) -> QRawFont { let r = QRawFont(); r.initFrom(p: ptr, n: "gui.QRawFont"); return r }
public func NewQRawFont() -> QRawFont { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.NewQRawFont", ""]) as! QRawFont }
public func NewQRawFont2(fileName: String, pixelSize: Float, hintingPreference: Int) -> QRawFont { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.NewQRawFont2", "", fileName as Any, pixelSize as Any, hintingPreference as Any]) as! QRawFont }
public func NewQRawFont3(fontData: QByteArray_ITF? = nil, pixelSize: Float, hintingPreference: Int) -> QRawFont { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.NewQRawFont3", "", fontData as Any, pixelSize as Any, hintingPreference as Any]) as! QRawFont }
public func NewQRawFont4(other: QRawFont_ITF? = nil) -> QRawFont { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.NewQRawFont4", "", other as Any]) as! QRawFont }
public func QRawFont_FromFont(font: QFont_ITF? = nil, writingSystem: Int) -> QRawFont { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.QRawFont_FromFont", "", font as Any, writingSystem as Any]) as! QRawFont }
public protocol QRegExpValidator_ITF: QValidator_ITF {
    func QRegExpValidator_PTR() -> QRegExpValidator
}

public class QRegExpValidator: QValidator, QRegExpValidator_ITF {
    public func QRegExpValidator_PTR() -> QRegExpValidator { callLocalFunction(l: ["", Pointer(), ___className, "QRegExpValidator_PTR"]) as! QRegExpValidator }
    public func RegExp() -> QRegExp { callLocalFunction(l: ["", Pointer(), ___className, "RegExp"]) as! QRegExp }
    public func ConnectRegExpChanged(f: @escaping (_ regExp: QRegExp) -> Void) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectRegExpChanged", "___REMOTE_CALLBACK___"], f: { (inp: [Any]) -> Any in f(inp[0] as! QRegExp) } as Any) }
    public func DisconnectRegExpChanged() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectRegExpChanged"]) }
    public func RegExpChanged(regExp: QRegExp_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "RegExpChanged", regExp as Any]) }
    public func SetRegExp(rx: QRegExp_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetRegExp", rx as Any]) }
    override public func ConnectValidate(f: @escaping (_ input: String, _ pos: Int) -> Int) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectValidate", "___REMOTE_CALLBACK___"], f: { (inp: [Any]) -> Any in f(inp[0] as! String, Int(inp[1] as! Float)) } as Any) }
    override public func DisconnectValidate() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectValidate"]) }
    override public func Validate(input: String, pos: Int) -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "Validate", input as Any, pos as Any]) as! Float) }
    public func ValidateDefault(input: String, pos: Int) -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "ValidateDefault", input as Any, pos as Any]) as! Float) }
    public func ConnectDestroyQRegExpValidator(f: @escaping () -> Void) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectDestroyQRegExpValidator", "___REMOTE_CALLBACK___"], f: { (_: [Any]) -> Any in f() } as Any) }
    public func DisconnectDestroyQRegExpValidator() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectDestroyQRegExpValidator"]) }
    public func DestroyQRegExpValidator() { _ = callLocalFunction(l: ["", Pointer(), ___className, "DestroyQRegExpValidator"]) }
    public func DestroyQRegExpValidatorDefault() { _ = callLocalFunction(l: ["", Pointer(), ___className, "DestroyQRegExpValidatorDefault"]) }
}

public func NewQRegExpValidatorFromPointer(ptr: String) -> QRegExpValidator { let r = QRegExpValidator(); r.initFrom(p: ptr, n: "gui.QRegExpValidator"); return r }
public func NewQRegExpValidator(parent: QObject_ITF? = nil) -> QRegExpValidator { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.NewQRegExpValidator", "", parent as Any]) as! QRegExpValidator }
public func NewQRegExpValidator2(rx: QRegExp_ITF? = nil, parent: QObject_ITF? = nil) -> QRegExpValidator { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.NewQRegExpValidator2", "", rx as Any, parent as Any]) as! QRegExpValidator }
public protocol QRegion_ITF {
    func QRegion_PTR() -> QRegion
}

public class QRegion: Internal, QRegion_ITF {
    public func QRegion_PTR() -> QRegion { callLocalFunction(l: ["", Pointer(), ___className, "QRegion_PTR"]) as! QRegion }
    public func DestroyQRegion() { _ = callLocalFunction(l: ["", Pointer(), ___className, "DestroyQRegion"]) }
    public func BoundingRect() -> QRect { callLocalFunction(l: ["", Pointer(), ___className, "BoundingRect"]) as! QRect }
    public func Contains(p: QPoint_ITF? = nil) -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "Contains", p as Any]) as! Bool }
    public func Contains2(r: QRect_ITF? = nil) -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "Contains2", r as Any]) as! Bool }
    public func Intersected(r: QRegion_ITF? = nil) -> QRegion { callLocalFunction(l: ["", Pointer(), ___className, "Intersected", r as Any]) as! QRegion }
    public func Intersected2(rect: QRect_ITF? = nil) -> QRegion { callLocalFunction(l: ["", Pointer(), ___className, "Intersected2", rect as Any]) as! QRegion }
    public func Intersects(region: QRegion_ITF? = nil) -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "Intersects", region as Any]) as! Bool }
    public func Intersects2(rect: QRect_ITF? = nil) -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "Intersects2", rect as Any]) as! Bool }
    public func IsEmpty() -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "IsEmpty"]) as! Bool }
    public func IsNull() -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "IsNull"]) as! Bool }
    public func RectCount() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "RectCount"]) as! Float) }
    public func SetRects(rects: QRect_ITF? = nil, number: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetRects", rects as Any, number as Any]) }
    public func Subtracted(r: QRegion_ITF? = nil) -> QRegion { callLocalFunction(l: ["", Pointer(), ___className, "Subtracted", r as Any]) as! QRegion }
    public func Swap(other: QRegion_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "Swap", other as Any]) }
    public func Translate(dx: Int, dy: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "Translate", dx as Any, dy as Any]) }
    public func Translate2(point: QPoint_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "Translate2", point as Any]) }
    public func Translated(dx: Int, dy: Int) -> QRegion { callLocalFunction(l: ["", Pointer(), ___className, "Translated", dx as Any, dy as Any]) as! QRegion }
    public func Translated2(p: QPoint_ITF? = nil) -> QRegion { callLocalFunction(l: ["", Pointer(), ___className, "Translated2", p as Any]) as! QRegion }
    public func United(r: QRegion_ITF? = nil) -> QRegion { callLocalFunction(l: ["", Pointer(), ___className, "United", r as Any]) as! QRegion }
    public func United2(rect: QRect_ITF? = nil) -> QRegion { callLocalFunction(l: ["", Pointer(), ___className, "United2", rect as Any]) as! QRegion }
    public func Xored(r: QRegion_ITF? = nil) -> QRegion { callLocalFunction(l: ["", Pointer(), ___className, "Xored", r as Any]) as! QRegion }
}

public func NewQRegionFromPointer(ptr: String) -> QRegion { let r = QRegion(); r.initFrom(p: ptr, n: "gui.QRegion"); return r }
public func NewQRegion() -> QRegion { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.NewQRegion", ""]) as! QRegion }
public func NewQRegion2(x: Int, y: Int, w: Int, h: Int, t: Int) -> QRegion { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.NewQRegion2", "", x as Any, y as Any, w as Any, h as Any, t as Any]) as! QRegion }
public func NewQRegion3(r: QRect_ITF? = nil, t: Int) -> QRegion { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.NewQRegion3", "", r as Any, t as Any]) as! QRegion }
public func NewQRegion4(a: QPolygon_ITF? = nil, fillRule: Int) -> QRegion { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.NewQRegion4", "", a as Any, fillRule as Any]) as! QRegion }
public func NewQRegion5(r: QRegion_ITF? = nil) -> QRegion { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.NewQRegion5", "", r as Any]) as! QRegion }
public func NewQRegion6(other: QRegion_ITF? = nil) -> QRegion { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.NewQRegion6", "", other as Any]) as! QRegion }
public func NewQRegion7(bm: QBitmap_ITF? = nil) -> QRegion { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.NewQRegion7", "", bm as Any]) as! QRegion }
public protocol QRegularExpressionValidator_ITF: QValidator_ITF {
    func QRegularExpressionValidator_PTR() -> QRegularExpressionValidator
}

public class QRegularExpressionValidator: QValidator, QRegularExpressionValidator_ITF {
    public func QRegularExpressionValidator_PTR() -> QRegularExpressionValidator { callLocalFunction(l: ["", Pointer(), ___className, "QRegularExpressionValidator_PTR"]) as! QRegularExpressionValidator }
    public func RegularExpression() -> QRegularExpression { callLocalFunction(l: ["", Pointer(), ___className, "RegularExpression"]) as! QRegularExpression }
    public func ConnectRegularExpressionChanged(f: @escaping (_ re: QRegularExpression) -> Void) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectRegularExpressionChanged", "___REMOTE_CALLBACK___"], f: { (inp: [Any]) -> Any in f(inp[0] as! QRegularExpression) } as Any) }
    public func DisconnectRegularExpressionChanged() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectRegularExpressionChanged"]) }
    public func RegularExpressionChanged(re: QRegularExpression_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "RegularExpressionChanged", re as Any]) }
    public func ConnectSetRegularExpression(f: @escaping (_ re: QRegularExpression) -> Void) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectSetRegularExpression", "___REMOTE_CALLBACK___"], f: { (inp: [Any]) -> Any in f(inp[0] as! QRegularExpression) } as Any) }
    public func DisconnectSetRegularExpression() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectSetRegularExpression"]) }
    public func SetRegularExpression(re: QRegularExpression_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetRegularExpression", re as Any]) }
    public func SetRegularExpressionDefault(re: QRegularExpression_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetRegularExpressionDefault", re as Any]) }
    override public func ConnectValidate(f: @escaping (_ input: String, _ pos: Int) -> Int) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectValidate", "___REMOTE_CALLBACK___"], f: { (inp: [Any]) -> Any in f(inp[0] as! String, Int(inp[1] as! Float)) } as Any) }
    override public func DisconnectValidate() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectValidate"]) }
    override public func Validate(input: String, pos: Int) -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "Validate", input as Any, pos as Any]) as! Float) }
    public func ValidateDefault(input: String, pos: Int) -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "ValidateDefault", input as Any, pos as Any]) as! Float) }
    public func ConnectDestroyQRegularExpressionValidator(f: @escaping () -> Void) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectDestroyQRegularExpressionValidator", "___REMOTE_CALLBACK___"], f: { (_: [Any]) -> Any in f() } as Any) }
    public func DisconnectDestroyQRegularExpressionValidator() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectDestroyQRegularExpressionValidator"]) }
    public func DestroyQRegularExpressionValidator() { _ = callLocalFunction(l: ["", Pointer(), ___className, "DestroyQRegularExpressionValidator"]) }
    public func DestroyQRegularExpressionValidatorDefault() { _ = callLocalFunction(l: ["", Pointer(), ___className, "DestroyQRegularExpressionValidatorDefault"]) }
}

public func NewQRegularExpressionValidatorFromPointer(ptr: String) -> QRegularExpressionValidator { let r = QRegularExpressionValidator(); r.initFrom(p: ptr, n: "gui.QRegularExpressionValidator"); return r }
public func NewQRegularExpressionValidator(parent: QObject_ITF? = nil) -> QRegularExpressionValidator { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.NewQRegularExpressionValidator", "", parent as Any]) as! QRegularExpressionValidator }
public func NewQRegularExpressionValidator2(re: QRegularExpression_ITF? = nil, parent: QObject_ITF? = nil) -> QRegularExpressionValidator { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.NewQRegularExpressionValidator2", "", re as Any, parent as Any]) as! QRegularExpressionValidator }
public protocol QResizeEvent_ITF: QEvent_ITF {
    func QResizeEvent_PTR() -> QResizeEvent
}

public class QResizeEvent: QEvent, QResizeEvent_ITF {
    public func QResizeEvent_PTR() -> QResizeEvent { callLocalFunction(l: ["", Pointer(), ___className, "QResizeEvent_PTR"]) as! QResizeEvent }
    public func DestroyQResizeEvent() { _ = callLocalFunction(l: ["", Pointer(), ___className, "DestroyQResizeEvent"]) }
    public func OldSize() -> QSize { callLocalFunction(l: ["", Pointer(), ___className, "OldSize"]) as! QSize }
    public func Size() -> QSize { callLocalFunction(l: ["", Pointer(), ___className, "Size"]) as! QSize }
}

public func NewQResizeEventFromPointer(ptr: String) -> QResizeEvent { let r = QResizeEvent(); r.initFrom(p: ptr, n: "gui.QResizeEvent"); return r }
public func NewQResizeEvent(size: QSize_ITF? = nil, oldSize: QSize_ITF? = nil) -> QResizeEvent { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.NewQResizeEvent", "", size as Any, oldSize as Any]) as! QResizeEvent }
public protocol QRgba64_ITF {
    func QRgba64_PTR() -> QRgba64
}

public class QRgba64: Internal, QRgba64_ITF {
    public func QRgba64_PTR() -> QRgba64 { callLocalFunction(l: ["", Pointer(), ___className, "QRgba64_PTR"]) as! QRgba64 }
    public func DestroyQRgba64() { _ = callLocalFunction(l: ["", Pointer(), ___className, "DestroyQRgba64"]) }
    public func Alpha() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "Alpha"]) as! Float) }
    public func Alpha8() -> String { callLocalFunction(l: ["", Pointer(), ___className, "Alpha8"]) as! String }
    public func Blue() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "Blue"]) as! Float) }
    public func Blue8() -> String { callLocalFunction(l: ["", Pointer(), ___className, "Blue8"]) as! String }
    public func Green() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "Green"]) as! Float) }
    public func Green8() -> String { callLocalFunction(l: ["", Pointer(), ___className, "Green8"]) as! String }
    public func IsOpaque() -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "IsOpaque"]) as! Bool }
    public func IsTransparent() -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "IsTransparent"]) as! Bool }
    public func Red() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "Red"]) as! Float) }
    public func Red8() -> String { callLocalFunction(l: ["", Pointer(), ___className, "Red8"]) as! String }
    public func SetAlpha(alpha: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetAlpha", alpha as Any]) }
    public func SetBlue(blue: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetBlue", blue as Any]) }
    public func SetGreen(green: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetGreen", green as Any]) }
    public func SetRed(red: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetRed", red as Any]) }
    public func ToArgb32() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "ToArgb32"]) as! Float) }
    public func ToRgb16() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "ToRgb16"]) as! Float) }
}

public func NewQRgba64FromPointer(ptr: String) -> QRgba64 { let r = QRgba64(); r.initFrom(p: ptr, n: "gui.QRgba64"); return r }
public protocol QScreen_ITF: QObject_ITF {
    func QScreen_PTR() -> QScreen
}

public class QScreen: QObject, QScreen_ITF {
    public func QScreen_PTR() -> QScreen { callLocalFunction(l: ["", Pointer(), ___className, "QScreen_PTR"]) as! QScreen }
    public func AngleBetween(a: Int, b: Int) -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "AngleBetween", a as Any, b as Any]) as! Float) }
    public func AvailableGeometry() -> QRect { callLocalFunction(l: ["", Pointer(), ___className, "AvailableGeometry"]) as! QRect }
    public func ConnectAvailableGeometryChanged(f: @escaping (_ geometry: QRect) -> Void) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectAvailableGeometryChanged", "___REMOTE_CALLBACK___"], f: { (inp: [Any]) -> Any in f(inp[0] as! QRect) } as Any) }
    public func DisconnectAvailableGeometryChanged() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectAvailableGeometryChanged"]) }
    public func AvailableGeometryChanged(geometry: QRect_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "AvailableGeometryChanged", geometry as Any]) }
    public func AvailableSize() -> QSize { callLocalFunction(l: ["", Pointer(), ___className, "AvailableSize"]) as! QSize }
    public func AvailableVirtualGeometry() -> QRect { callLocalFunction(l: ["", Pointer(), ___className, "AvailableVirtualGeometry"]) as! QRect }
    public func AvailableVirtualSize() -> QSize { callLocalFunction(l: ["", Pointer(), ___className, "AvailableVirtualSize"]) as! QSize }
    public func Depth() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "Depth"]) as! Float) }
    public func DevicePixelRatio() -> Float { callLocalFunction(l: ["", Pointer(), ___className, "DevicePixelRatio"]) as! Float }
    public func Geometry() -> QRect { callLocalFunction(l: ["", Pointer(), ___className, "Geometry"]) as! QRect }
    public func ConnectGeometryChanged(f: @escaping (_ geometry: QRect) -> Void) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectGeometryChanged", "___REMOTE_CALLBACK___"], f: { (inp: [Any]) -> Any in f(inp[0] as! QRect) } as Any) }
    public func DisconnectGeometryChanged() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectGeometryChanged"]) }
    public func GeometryChanged(geometry: QRect_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "GeometryChanged", geometry as Any]) }
    public func GrabWindow(window: Int, x: Int, y: Int, width: Int, height: Int) -> QPixmap { callLocalFunction(l: ["", Pointer(), ___className, "GrabWindow", window as Any, x as Any, y as Any, width as Any, height as Any]) as! QPixmap }
    public func IsLandscape(o: Int) -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "IsLandscape", o as Any]) as! Bool }
    public func IsPortrait(o: Int) -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "IsPortrait", o as Any]) as! Bool }
    public func LogicalDotsPerInch() -> Float { callLocalFunction(l: ["", Pointer(), ___className, "LogicalDotsPerInch"]) as! Float }
    public func ConnectLogicalDotsPerInchChanged(f: @escaping (_ dpi: Float) -> Void) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectLogicalDotsPerInchChanged", "___REMOTE_CALLBACK___"], f: { (inp: [Any]) -> Any in f(inp[0] as! Float) } as Any) }
    public func DisconnectLogicalDotsPerInchChanged() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectLogicalDotsPerInchChanged"]) }
    public func LogicalDotsPerInchChanged(dpi: Float) { _ = callLocalFunction(l: ["", Pointer(), ___className, "LogicalDotsPerInchChanged", dpi as Any]) }
    public func LogicalDotsPerInchX() -> Float { callLocalFunction(l: ["", Pointer(), ___className, "LogicalDotsPerInchX"]) as! Float }
    public func LogicalDotsPerInchY() -> Float { callLocalFunction(l: ["", Pointer(), ___className, "LogicalDotsPerInchY"]) as! Float }
    public func Manufacturer() -> String { callLocalFunction(l: ["", Pointer(), ___className, "Manufacturer"]) as! String }
    public func MapBetween(a: Int, b: Int, rect: QRect_ITF? = nil) -> QRect { callLocalFunction(l: ["", Pointer(), ___className, "MapBetween", a as Any, b as Any, rect as Any]) as! QRect }
    public func Model() -> String { callLocalFunction(l: ["", Pointer(), ___className, "Model"]) as! String }
    public func Name() -> String { callLocalFunction(l: ["", Pointer(), ___className, "Name"]) as! String }
    public func NativeOrientation() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "NativeOrientation"]) as! Float) }
    public func Orientation() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "Orientation"]) as! Float) }
    public func ConnectOrientationChanged(f: @escaping (_ orientation: Int) -> Void) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectOrientationChanged", "___REMOTE_CALLBACK___"], f: { (inp: [Any]) -> Any in f(Int(inp[0] as! Float)) } as Any) }
    public func DisconnectOrientationChanged() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectOrientationChanged"]) }
    public func OrientationChanged(orientation: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "OrientationChanged", orientation as Any]) }
    public func OrientationUpdateMask() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "OrientationUpdateMask"]) as! Float) }
    public func PhysicalDotsPerInch() -> Float { callLocalFunction(l: ["", Pointer(), ___className, "PhysicalDotsPerInch"]) as! Float }
    public func ConnectPhysicalDotsPerInchChanged(f: @escaping (_ dpi: Float) -> Void) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectPhysicalDotsPerInchChanged", "___REMOTE_CALLBACK___"], f: { (inp: [Any]) -> Any in f(inp[0] as! Float) } as Any) }
    public func DisconnectPhysicalDotsPerInchChanged() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectPhysicalDotsPerInchChanged"]) }
    public func PhysicalDotsPerInchChanged(dpi: Float) { _ = callLocalFunction(l: ["", Pointer(), ___className, "PhysicalDotsPerInchChanged", dpi as Any]) }
    public func PhysicalDotsPerInchX() -> Float { callLocalFunction(l: ["", Pointer(), ___className, "PhysicalDotsPerInchX"]) as! Float }
    public func PhysicalDotsPerInchY() -> Float { callLocalFunction(l: ["", Pointer(), ___className, "PhysicalDotsPerInchY"]) as! Float }
    public func PhysicalSize() -> QSizeF { callLocalFunction(l: ["", Pointer(), ___className, "PhysicalSize"]) as! QSizeF }
    public func ConnectPhysicalSizeChanged(f: @escaping (_ size: QSizeF) -> Void) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectPhysicalSizeChanged", "___REMOTE_CALLBACK___"], f: { (inp: [Any]) -> Any in f(inp[0] as! QSizeF) } as Any) }
    public func DisconnectPhysicalSizeChanged() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectPhysicalSizeChanged"]) }
    public func PhysicalSizeChanged(size: QSizeF_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "PhysicalSizeChanged", size as Any]) }
    public func PrimaryOrientation() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "PrimaryOrientation"]) as! Float) }
    public func ConnectPrimaryOrientationChanged(f: @escaping (_ orientation: Int) -> Void) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectPrimaryOrientationChanged", "___REMOTE_CALLBACK___"], f: { (inp: [Any]) -> Any in f(Int(inp[0] as! Float)) } as Any) }
    public func DisconnectPrimaryOrientationChanged() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectPrimaryOrientationChanged"]) }
    public func PrimaryOrientationChanged(orientation: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "PrimaryOrientationChanged", orientation as Any]) }
    public func RefreshRate() -> Float { callLocalFunction(l: ["", Pointer(), ___className, "RefreshRate"]) as! Float }
    public func ConnectRefreshRateChanged(f: @escaping (_ refreshRate: Float) -> Void) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectRefreshRateChanged", "___REMOTE_CALLBACK___"], f: { (inp: [Any]) -> Any in f(inp[0] as! Float) } as Any) }
    public func DisconnectRefreshRateChanged() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectRefreshRateChanged"]) }
    public func RefreshRateChanged(refreshRate: Float) { _ = callLocalFunction(l: ["", Pointer(), ___className, "RefreshRateChanged", refreshRate as Any]) }
    public func SerialNumber() -> String { callLocalFunction(l: ["", Pointer(), ___className, "SerialNumber"]) as! String }
    public func SetOrientationUpdateMask(mask: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetOrientationUpdateMask", mask as Any]) }
    public func Size() -> QSize { callLocalFunction(l: ["", Pointer(), ___className, "Size"]) as! QSize }
    public func TransformBetween(a: Int, b: Int, target: QRect_ITF? = nil) -> QTransform { callLocalFunction(l: ["", Pointer(), ___className, "TransformBetween", a as Any, b as Any, target as Any]) as! QTransform }
    public func VirtualGeometry() -> QRect { callLocalFunction(l: ["", Pointer(), ___className, "VirtualGeometry"]) as! QRect }
    public func ConnectVirtualGeometryChanged(f: @escaping (_ rect: QRect) -> Void) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectVirtualGeometryChanged", "___REMOTE_CALLBACK___"], f: { (inp: [Any]) -> Any in f(inp[0] as! QRect) } as Any) }
    public func DisconnectVirtualGeometryChanged() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectVirtualGeometryChanged"]) }
    public func VirtualGeometryChanged(rect: QRect_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "VirtualGeometryChanged", rect as Any]) }
    public func VirtualSiblings() -> [QScreen] { callLocalFunction(l: ["", Pointer(), ___className, "VirtualSiblings"]) as! [QScreen] }
    public func VirtualSize() -> QSize { callLocalFunction(l: ["", Pointer(), ___className, "VirtualSize"]) as! QSize }
    public func ConnectDestroyQScreen(f: @escaping () -> Void) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectDestroyQScreen", "___REMOTE_CALLBACK___"], f: { (_: [Any]) -> Any in f() } as Any) }
    public func DisconnectDestroyQScreen() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectDestroyQScreen"]) }
    public func DestroyQScreen() { _ = callLocalFunction(l: ["", Pointer(), ___className, "DestroyQScreen"]) }
    public func DestroyQScreenDefault() { _ = callLocalFunction(l: ["", Pointer(), ___className, "DestroyQScreenDefault"]) }
    override public func ChildEventDefault(event: QChildEvent_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "ChildEventDefault", event as Any]) }
    override public func ConnectNotifyDefault(sign: QMetaMethod_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "ConnectNotifyDefault", sign as Any]) }
    override public func CustomEventDefault(event: QEvent_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "CustomEventDefault", event as Any]) }
    override public func DeleteLaterDefault() { _ = callLocalFunction(l: ["", Pointer(), ___className, "DeleteLaterDefault"]) }
    override public func DisconnectNotifyDefault(sign: QMetaMethod_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "DisconnectNotifyDefault", sign as Any]) }
    override public func EventDefault(e: QEvent_ITF? = nil) -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "EventDefault", e as Any]) as! Bool }
    override public func EventFilterDefault(watched: QObject_ITF? = nil, event: QEvent_ITF? = nil) -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "EventFilterDefault", watched as Any, event as Any]) as! Bool }
    override public func MetaObjectDefault() -> QMetaObject { callLocalFunction(l: ["", Pointer(), ___className, "MetaObjectDefault"]) as! QMetaObject }
    override public func TimerEventDefault(event: QTimerEvent_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "TimerEventDefault", event as Any]) }
}

public func NewQScreenFromPointer(ptr: String) -> QScreen { let r = QScreen(); r.initFrom(p: ptr, n: "gui.QScreen"); return r }
public protocol QScreenOrientationChangeEvent_ITF: QEvent_ITF {
    func QScreenOrientationChangeEvent_PTR() -> QScreenOrientationChangeEvent
}

public class QScreenOrientationChangeEvent: QEvent, QScreenOrientationChangeEvent_ITF {
    public func QScreenOrientationChangeEvent_PTR() -> QScreenOrientationChangeEvent { callLocalFunction(l: ["", Pointer(), ___className, "QScreenOrientationChangeEvent_PTR"]) as! QScreenOrientationChangeEvent }
    public func Orientation() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "Orientation"]) as! Float) }
    public func Screen() -> QScreen { callLocalFunction(l: ["", Pointer(), ___className, "Screen"]) as! QScreen }
    public func ConnectDestroyQScreenOrientationChangeEvent(f: @escaping () -> Void) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectDestroyQScreenOrientationChangeEvent", "___REMOTE_CALLBACK___"], f: { (_: [Any]) -> Any in f() } as Any) }
    public func DisconnectDestroyQScreenOrientationChangeEvent() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectDestroyQScreenOrientationChangeEvent"]) }
    public func DestroyQScreenOrientationChangeEvent() { _ = callLocalFunction(l: ["", Pointer(), ___className, "DestroyQScreenOrientationChangeEvent"]) }
    public func DestroyQScreenOrientationChangeEventDefault() { _ = callLocalFunction(l: ["", Pointer(), ___className, "DestroyQScreenOrientationChangeEventDefault"]) }
}

public func NewQScreenOrientationChangeEventFromPointer(ptr: String) -> QScreenOrientationChangeEvent { let r = QScreenOrientationChangeEvent(); r.initFrom(p: ptr, n: "gui.QScreenOrientationChangeEvent"); return r }
public func NewQScreenOrientationChangeEvent(screen: QScreen_ITF? = nil, screenOrientation: Int) -> QScreenOrientationChangeEvent { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.NewQScreenOrientationChangeEvent", "", screen as Any, screenOrientation as Any]) as! QScreenOrientationChangeEvent }
public protocol QScrollEvent_ITF: QEvent_ITF {
    func QScrollEvent_PTR() -> QScrollEvent
}

public class QScrollEvent: QEvent, QScrollEvent_ITF {
    public func QScrollEvent_PTR() -> QScrollEvent { callLocalFunction(l: ["", Pointer(), ___className, "QScrollEvent_PTR"]) as! QScrollEvent }
    public func ContentPos() -> QPointF { callLocalFunction(l: ["", Pointer(), ___className, "ContentPos"]) as! QPointF }
    public func OvershootDistance() -> QPointF { callLocalFunction(l: ["", Pointer(), ___className, "OvershootDistance"]) as! QPointF }
    public func ScrollState() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "ScrollState"]) as! Float) }
    public func ConnectDestroyQScrollEvent(f: @escaping () -> Void) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectDestroyQScrollEvent", "___REMOTE_CALLBACK___"], f: { (_: [Any]) -> Any in f() } as Any) }
    public func DisconnectDestroyQScrollEvent() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectDestroyQScrollEvent"]) }
    public func DestroyQScrollEvent() { _ = callLocalFunction(l: ["", Pointer(), ___className, "DestroyQScrollEvent"]) }
    public func DestroyQScrollEventDefault() { _ = callLocalFunction(l: ["", Pointer(), ___className, "DestroyQScrollEventDefault"]) }
}

public func NewQScrollEventFromPointer(ptr: String) -> QScrollEvent { let r = QScrollEvent(); r.initFrom(p: ptr, n: "gui.QScrollEvent"); return r }
public func NewQScrollEvent(contentPos: QPointF_ITF? = nil, overshootDistance: QPointF_ITF? = nil, scrollState: Int) -> QScrollEvent { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.NewQScrollEvent", "", contentPos as Any, overshootDistance as Any, scrollState as Any]) as! QScrollEvent }
public protocol QScrollPrepareEvent_ITF: QEvent_ITF {
    func QScrollPrepareEvent_PTR() -> QScrollPrepareEvent
}

public class QScrollPrepareEvent: QEvent, QScrollPrepareEvent_ITF {
    public func QScrollPrepareEvent_PTR() -> QScrollPrepareEvent { callLocalFunction(l: ["", Pointer(), ___className, "QScrollPrepareEvent_PTR"]) as! QScrollPrepareEvent }
    public func ContentPos() -> QPointF { callLocalFunction(l: ["", Pointer(), ___className, "ContentPos"]) as! QPointF }
    public func ContentPosRange() -> QRectF { callLocalFunction(l: ["", Pointer(), ___className, "ContentPosRange"]) as! QRectF }
    public func SetContentPos(pos: QPointF_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetContentPos", pos as Any]) }
    public func SetContentPosRange(rect: QRectF_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetContentPosRange", rect as Any]) }
    public func SetViewportSize(size: QSizeF_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetViewportSize", size as Any]) }
    public func StartPos() -> QPointF { callLocalFunction(l: ["", Pointer(), ___className, "StartPos"]) as! QPointF }
    public func ViewportSize() -> QSizeF { callLocalFunction(l: ["", Pointer(), ___className, "ViewportSize"]) as! QSizeF }
    public func ConnectDestroyQScrollPrepareEvent(f: @escaping () -> Void) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectDestroyQScrollPrepareEvent", "___REMOTE_CALLBACK___"], f: { (_: [Any]) -> Any in f() } as Any) }
    public func DisconnectDestroyQScrollPrepareEvent() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectDestroyQScrollPrepareEvent"]) }
    public func DestroyQScrollPrepareEvent() { _ = callLocalFunction(l: ["", Pointer(), ___className, "DestroyQScrollPrepareEvent"]) }
    public func DestroyQScrollPrepareEventDefault() { _ = callLocalFunction(l: ["", Pointer(), ___className, "DestroyQScrollPrepareEventDefault"]) }
}

public func NewQScrollPrepareEventFromPointer(ptr: String) -> QScrollPrepareEvent { let r = QScrollPrepareEvent(); r.initFrom(p: ptr, n: "gui.QScrollPrepareEvent"); return r }
public func NewQScrollPrepareEvent(startPos: QPointF_ITF? = nil) -> QScrollPrepareEvent { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.NewQScrollPrepareEvent", "", startPos as Any]) as! QScrollPrepareEvent }
public protocol QSessionManager_ITF: QObject_ITF {
    func QSessionManager_PTR() -> QSessionManager
}

public class QSessionManager: QObject, QSessionManager_ITF {
    public func QSessionManager_PTR() -> QSessionManager { callLocalFunction(l: ["", Pointer(), ___className, "QSessionManager_PTR"]) as! QSessionManager }
    public func AllowsErrorInteraction() -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "AllowsErrorInteraction"]) as! Bool }
    public func AllowsInteraction() -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "AllowsInteraction"]) as! Bool }
    public func Cancel() { _ = callLocalFunction(l: ["", Pointer(), ___className, "Cancel"]) }
    public func DiscardCommand() -> [String] { callLocalFunction(l: ["", Pointer(), ___className, "DiscardCommand"]) as! [String] }
    public func IsPhase2() -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "IsPhase2"]) as! Bool }
    public func Release() { _ = callLocalFunction(l: ["", Pointer(), ___className, "Release"]) }
    public func RequestPhase2() { _ = callLocalFunction(l: ["", Pointer(), ___className, "RequestPhase2"]) }
    public func RestartCommand() -> [String] { callLocalFunction(l: ["", Pointer(), ___className, "RestartCommand"]) as! [String] }
    public func RestartHint() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "RestartHint"]) as! Float) }
    public func SessionId() -> String { callLocalFunction(l: ["", Pointer(), ___className, "SessionId"]) as! String }
    public func SessionKey() -> String { callLocalFunction(l: ["", Pointer(), ___className, "SessionKey"]) as! String }
    public func SetDiscardCommand(command: [String]) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetDiscardCommand", command as Any]) }
    public func SetManagerProperty(name: String, value: [String]) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetManagerProperty", name as Any, value as Any]) }
    public func SetManagerProperty2(name: String, value: String) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetManagerProperty2", name as Any, value as Any]) }
    public func SetRestartCommand(command: [String]) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetRestartCommand", command as Any]) }
    public func SetRestartHint(hint: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetRestartHint", hint as Any]) }
    override public func ChildEventDefault(event: QChildEvent_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "ChildEventDefault", event as Any]) }
    override public func ConnectNotifyDefault(sign: QMetaMethod_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "ConnectNotifyDefault", sign as Any]) }
    override public func CustomEventDefault(event: QEvent_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "CustomEventDefault", event as Any]) }
    override public func DeleteLaterDefault() { _ = callLocalFunction(l: ["", Pointer(), ___className, "DeleteLaterDefault"]) }
    override public func DisconnectNotifyDefault(sign: QMetaMethod_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "DisconnectNotifyDefault", sign as Any]) }
    override public func EventDefault(e: QEvent_ITF? = nil) -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "EventDefault", e as Any]) as! Bool }
    override public func EventFilterDefault(watched: QObject_ITF? = nil, event: QEvent_ITF? = nil) -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "EventFilterDefault", watched as Any, event as Any]) as! Bool }
    override public func MetaObjectDefault() -> QMetaObject { callLocalFunction(l: ["", Pointer(), ___className, "MetaObjectDefault"]) as! QMetaObject }
    override public func TimerEventDefault(event: QTimerEvent_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "TimerEventDefault", event as Any]) }
}

public func NewQSessionManagerFromPointer(ptr: String) -> QSessionManager { let r = QSessionManager(); r.initFrom(p: ptr, n: "gui.QSessionManager"); return r }
public protocol QShortcutEvent_ITF: QEvent_ITF {
    func QShortcutEvent_PTR() -> QShortcutEvent
}

public class QShortcutEvent: QEvent, QShortcutEvent_ITF {
    public func QShortcutEvent_PTR() -> QShortcutEvent { callLocalFunction(l: ["", Pointer(), ___className, "QShortcutEvent_PTR"]) as! QShortcutEvent }
    public func IsAmbiguous() -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "IsAmbiguous"]) as! Bool }
    public func Key() -> QKeySequence { callLocalFunction(l: ["", Pointer(), ___className, "Key"]) as! QKeySequence }
    public func ShortcutId() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "ShortcutId"]) as! Float) }
    public func ConnectDestroyQShortcutEvent(f: @escaping () -> Void) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectDestroyQShortcutEvent", "___REMOTE_CALLBACK___"], f: { (_: [Any]) -> Any in f() } as Any) }
    public func DisconnectDestroyQShortcutEvent() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectDestroyQShortcutEvent"]) }
    public func DestroyQShortcutEvent() { _ = callLocalFunction(l: ["", Pointer(), ___className, "DestroyQShortcutEvent"]) }
    public func DestroyQShortcutEventDefault() { _ = callLocalFunction(l: ["", Pointer(), ___className, "DestroyQShortcutEventDefault"]) }
}

public func NewQShortcutEventFromPointer(ptr: String) -> QShortcutEvent { let r = QShortcutEvent(); r.initFrom(p: ptr, n: "gui.QShortcutEvent"); return r }
public func NewQShortcutEvent(key: QKeySequence_ITF? = nil, id: Int, ambiguous: Bool) -> QShortcutEvent { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.NewQShortcutEvent", "", key as Any, id as Any, ambiguous as Any]) as! QShortcutEvent }
public protocol QShowEvent_ITF: QEvent_ITF {
    func QShowEvent_PTR() -> QShowEvent
}

public class QShowEvent: QEvent, QShowEvent_ITF {
    public func QShowEvent_PTR() -> QShowEvent { callLocalFunction(l: ["", Pointer(), ___className, "QShowEvent_PTR"]) as! QShowEvent }
    public func DestroyQShowEvent() { _ = callLocalFunction(l: ["", Pointer(), ___className, "DestroyQShowEvent"]) }
}

public func NewQShowEventFromPointer(ptr: String) -> QShowEvent { let r = QShowEvent(); r.initFrom(p: ptr, n: "gui.QShowEvent"); return r }
public func NewQShowEvent() -> QShowEvent { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.NewQShowEvent", ""]) as! QShowEvent }
public protocol QStandardItem_ITF {
    func QStandardItem_PTR() -> QStandardItem
}

public class QStandardItem: Internal, QStandardItem_ITF {
    public func QStandardItem_PTR() -> QStandardItem { callLocalFunction(l: ["", Pointer(), ___className, "QStandardItem_PTR"]) as! QStandardItem }
    public func AccessibleDescription() -> String { callLocalFunction(l: ["", Pointer(), ___className, "AccessibleDescription"]) as! String }
    public func AccessibleText() -> String { callLocalFunction(l: ["", Pointer(), ___className, "AccessibleText"]) as! String }
    public func AppendColumn(items: [QStandardItem]) { _ = callLocalFunction(l: ["", Pointer(), ___className, "AppendColumn", items as Any]) }
    public func AppendRow(items: [QStandardItem]) { _ = callLocalFunction(l: ["", Pointer(), ___className, "AppendRow", items as Any]) }
    public func AppendRow2(item: QStandardItem_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "AppendRow2", item as Any]) }
    public func AppendRows(items: [QStandardItem]) { _ = callLocalFunction(l: ["", Pointer(), ___className, "AppendRows", items as Any]) }
    public func Background() -> QBrush { callLocalFunction(l: ["", Pointer(), ___className, "Background"]) as! QBrush }
    public func CheckState() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "CheckState"]) as! Float) }
    public func Child(row: Int, column: Int) -> QStandardItem { callLocalFunction(l: ["", Pointer(), ___className, "Child", row as Any, column as Any]) as! QStandardItem }
    public func ClearData() { _ = callLocalFunction(l: ["", Pointer(), ___className, "ClearData"]) }
    public func ConnectClone(f: @escaping () -> QStandardItem) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectClone", "___REMOTE_CALLBACK___"], f: { (_: [Any]) -> Any in f() } as Any) }
    public func DisconnectClone() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectClone"]) }
    public func Clone() -> QStandardItem { callLocalFunction(l: ["", Pointer(), ___className, "Clone"]) as! QStandardItem }
    public func CloneDefault() -> QStandardItem { callLocalFunction(l: ["", Pointer(), ___className, "CloneDefault"]) as! QStandardItem }
    public func Column() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "Column"]) as! Float) }
    public func ColumnCount() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "ColumnCount"]) as! Float) }
    public func ConnectData(f: @escaping (_ role: Int) -> QVariant) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectData", "___REMOTE_CALLBACK___"], f: { (inp: [Any]) -> Any in f(Int(inp[0] as! Float)) } as Any) }
    public func DisconnectData() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectData"]) }
    public func Data(role: Int) -> QVariant { callLocalFunction(l: ["", Pointer(), ___className, "Data", role as Any]) as! QVariant }
    public func DataDefault(role: Int) -> QVariant { callLocalFunction(l: ["", Pointer(), ___className, "DataDefault", role as Any]) as! QVariant }
    public func EmitDataChanged() { _ = callLocalFunction(l: ["", Pointer(), ___className, "EmitDataChanged"]) }
    public func Flags() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "Flags"]) as! Float) }
    public func Font() -> QFont { callLocalFunction(l: ["", Pointer(), ___className, "Font"]) as! QFont }
    public func Foreground() -> QBrush { callLocalFunction(l: ["", Pointer(), ___className, "Foreground"]) as! QBrush }
    public func HasChildren() -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "HasChildren"]) as! Bool }
    public func Icon() -> QIcon { callLocalFunction(l: ["", Pointer(), ___className, "Icon"]) as! QIcon }
    public func Index() -> QModelIndex { callLocalFunction(l: ["", Pointer(), ___className, "Index"]) as! QModelIndex }
    public func InsertColumn(column: Int, items: [QStandardItem]) { _ = callLocalFunction(l: ["", Pointer(), ___className, "InsertColumn", column as Any, items as Any]) }
    public func InsertColumns(column: Int, count: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "InsertColumns", column as Any, count as Any]) }
    public func InsertRow(row: Int, items: [QStandardItem]) { _ = callLocalFunction(l: ["", Pointer(), ___className, "InsertRow", row as Any, items as Any]) }
    public func InsertRow2(row: Int, item: QStandardItem_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "InsertRow2", row as Any, item as Any]) }
    public func InsertRows(row: Int, items: [QStandardItem]) { _ = callLocalFunction(l: ["", Pointer(), ___className, "InsertRows", row as Any, items as Any]) }
    public func InsertRows2(row: Int, count: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "InsertRows2", row as Any, count as Any]) }
    public func IsAutoTristate() -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "IsAutoTristate"]) as! Bool }
    public func IsCheckable() -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "IsCheckable"]) as! Bool }
    public func IsDragEnabled() -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "IsDragEnabled"]) as! Bool }
    public func IsDropEnabled() -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "IsDropEnabled"]) as! Bool }
    public func IsEditable() -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "IsEditable"]) as! Bool }
    public func IsEnabled() -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "IsEnabled"]) as! Bool }
    public func IsSelectable() -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "IsSelectable"]) as! Bool }
    public func IsUserTristate() -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "IsUserTristate"]) as! Bool }
    public func Model() -> QStandardItemModel { callLocalFunction(l: ["", Pointer(), ___className, "Model"]) as! QStandardItemModel }
    public func Parent() -> QStandardItem { callLocalFunction(l: ["", Pointer(), ___className, "Parent"]) as! QStandardItem }
    public func ConnectRead(f: @escaping (_ i: QDataStream) -> Void) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectRead", "___REMOTE_CALLBACK___"], f: { (inp: [Any]) -> Any in f(inp[0] as! QDataStream) } as Any) }
    public func DisconnectRead() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectRead"]) }
    public func Read(i: QDataStream_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "Read", i as Any]) }
    public func ReadDefault(i: QDataStream_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "ReadDefault", i as Any]) }
    public func RemoveColumn(column: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "RemoveColumn", column as Any]) }
    public func RemoveColumns(column: Int, count: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "RemoveColumns", column as Any, count as Any]) }
    public func RemoveRow(row: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "RemoveRow", row as Any]) }
    public func RemoveRows(row: Int, count: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "RemoveRows", row as Any, count as Any]) }
    public func Row() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "Row"]) as! Float) }
    public func RowCount() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "RowCount"]) as! Float) }
    public func SetAccessibleDescription(accessibleDescription: String) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetAccessibleDescription", accessibleDescription as Any]) }
    public func SetAccessibleText(accessibleText: String) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetAccessibleText", accessibleText as Any]) }
    public func SetAutoTristate(tristate: Bool) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetAutoTristate", tristate as Any]) }
    public func SetBackground(brush: QBrush_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetBackground", brush as Any]) }
    public func SetCheckState(state: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetCheckState", state as Any]) }
    public func SetCheckable(checkable: Bool) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetCheckable", checkable as Any]) }
    public func SetChild(row: Int, column: Int, item: QStandardItem_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetChild", row as Any, column as Any, item as Any]) }
    public func SetChild2(row: Int, item: QStandardItem_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetChild2", row as Any, item as Any]) }
    public func SetColumnCount(columns: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetColumnCount", columns as Any]) }
    public func ConnectSetData(f: @escaping (_ value: QVariant, _ role: Int) -> Void) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectSetData", "___REMOTE_CALLBACK___"], f: { (inp: [Any]) -> Any in f(inp[0] as! QVariant, Int(inp[1] as! Float)) } as Any) }
    public func DisconnectSetData() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectSetData"]) }
    public func SetData(value: QVariant_ITF? = nil, role: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetData", value as Any, role as Any]) }
    public func SetDataDefault(value: QVariant_ITF? = nil, role: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetDataDefault", value as Any, role as Any]) }
    public func SetDragEnabled(dragEnabled: Bool) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetDragEnabled", dragEnabled as Any]) }
    public func SetDropEnabled(dropEnabled: Bool) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetDropEnabled", dropEnabled as Any]) }
    public func SetEditable(editable: Bool) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetEditable", editable as Any]) }
    public func SetEnabled(enabled: Bool) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetEnabled", enabled as Any]) }
    public func SetFlags(flags: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetFlags", flags as Any]) }
    public func SetFont(font: QFont_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetFont", font as Any]) }
    public func SetForeground(brush: QBrush_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetForeground", brush as Any]) }
    public func SetIcon(icon: QIcon_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetIcon", icon as Any]) }
    public func SetRowCount(rows: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetRowCount", rows as Any]) }
    public func SetSelectable(selectable: Bool) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetSelectable", selectable as Any]) }
    public func SetSizeHint(size: QSize_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetSizeHint", size as Any]) }
    public func SetStatusTip(statusTip: String) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetStatusTip", statusTip as Any]) }
    public func SetText(text: String) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetText", text as Any]) }
    public func SetTextAlignment(alignment: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetTextAlignment", alignment as Any]) }
    public func SetToolTip(toolTip: String) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetToolTip", toolTip as Any]) }
    public func SetUserTristate(tristate: Bool) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetUserTristate", tristate as Any]) }
    public func SetWhatsThis(whatsThis: String) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetWhatsThis", whatsThis as Any]) }
    public func SizeHint() -> QSize { callLocalFunction(l: ["", Pointer(), ___className, "SizeHint"]) as! QSize }
    public func SortChildren(column: Int, order: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SortChildren", column as Any, order as Any]) }
    public func StatusTip() -> String { callLocalFunction(l: ["", Pointer(), ___className, "StatusTip"]) as! String }
    public func TakeChild(row: Int, column: Int) -> QStandardItem { callLocalFunction(l: ["", Pointer(), ___className, "TakeChild", row as Any, column as Any]) as! QStandardItem }
    public func TakeColumn(column: Int) -> [QStandardItem] { callLocalFunction(l: ["", Pointer(), ___className, "TakeColumn", column as Any]) as! [QStandardItem] }
    public func TakeRow(row: Int) -> [QStandardItem] { callLocalFunction(l: ["", Pointer(), ___className, "TakeRow", row as Any]) as! [QStandardItem] }
    public func Text() -> String { callLocalFunction(l: ["", Pointer(), ___className, "Text"]) as! String }
    public func TextAlignment() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "TextAlignment"]) as! Float) }
    public func ToolTip() -> String { callLocalFunction(l: ["", Pointer(), ___className, "ToolTip"]) as! String }
    public func ConnectType(f: @escaping () -> Int) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectType", "___REMOTE_CALLBACK___"], f: { (_: [Any]) -> Any in f() } as Any) }
    public func DisconnectType() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectType"]) }
    public func Type() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "Type"]) as! Float) }
    public func TypeDefault() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "TypeDefault"]) as! Float) }
    public func WhatsThis() -> String { callLocalFunction(l: ["", Pointer(), ___className, "WhatsThis"]) as! String }
    public func ConnectWrite(f: @escaping (_ out: QDataStream) -> Void) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectWrite", "___REMOTE_CALLBACK___"], f: { (inp: [Any]) -> Any in f(inp[0] as! QDataStream) } as Any) }
    public func DisconnectWrite() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectWrite"]) }
    public func Write(out: QDataStream_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "Write", out as Any]) }
    public func WriteDefault(out: QDataStream_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "WriteDefault", out as Any]) }
    public func ConnectDestroyQStandardItem(f: @escaping () -> Void) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectDestroyQStandardItem", "___REMOTE_CALLBACK___"], f: { (_: [Any]) -> Any in f() } as Any) }
    public func DisconnectDestroyQStandardItem() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectDestroyQStandardItem"]) }
    public func DestroyQStandardItem() { _ = callLocalFunction(l: ["", Pointer(), ___className, "DestroyQStandardItem"]) }
    public func DestroyQStandardItemDefault() { _ = callLocalFunction(l: ["", Pointer(), ___className, "DestroyQStandardItemDefault"]) }
}

public func NewQStandardItemFromPointer(ptr: String) -> QStandardItem { let r = QStandardItem(); r.initFrom(p: ptr, n: "gui.QStandardItem"); return r }
public func NewQStandardItem() -> QStandardItem { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.NewQStandardItem", ""]) as! QStandardItem }
public func NewQStandardItem2(text: String) -> QStandardItem { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.NewQStandardItem2", "", text as Any]) as! QStandardItem }
public func NewQStandardItem3(icon: QIcon_ITF? = nil, text: String) -> QStandardItem { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.NewQStandardItem3", "", icon as Any, text as Any]) as! QStandardItem }
public func NewQStandardItem4(rows: Int, columns: Int) -> QStandardItem { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.NewQStandardItem4", "", rows as Any, columns as Any]) as! QStandardItem }
public func NewQStandardItem5(other: QStandardItem_ITF? = nil) -> QStandardItem { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.NewQStandardItem5", "", other as Any]) as! QStandardItem }
public protocol QStandardItemModel_ITF: QAbstractItemModel_ITF {
    func QStandardItemModel_PTR() -> QStandardItemModel
}

public class QStandardItemModel: QAbstractItemModel, QStandardItemModel_ITF {
    public func QStandardItemModel_PTR() -> QStandardItemModel { callLocalFunction(l: ["", Pointer(), ___className, "QStandardItemModel_PTR"]) as! QStandardItemModel }
    public func AppendColumn(items: [QStandardItem]) { _ = callLocalFunction(l: ["", Pointer(), ___className, "AppendColumn", items as Any]) }
    public func AppendRow(items: [QStandardItem]) { _ = callLocalFunction(l: ["", Pointer(), ___className, "AppendRow", items as Any]) }
    public func AppendRow2(item: QStandardItem_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "AppendRow2", item as Any]) }
    public func Clear() { _ = callLocalFunction(l: ["", Pointer(), ___className, "Clear"]) }
    public func ClearItemData(index: QModelIndex_ITF? = nil) -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "ClearItemData", index as Any]) as! Bool }
    override public func ConnectColumnCount(f: @escaping (_ parent: QModelIndex) -> Int) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectColumnCount", "___REMOTE_CALLBACK___"], f: { (inp: [Any]) -> Any in f(inp[0] as! QModelIndex) } as Any) }
    override public func DisconnectColumnCount() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectColumnCount"]) }
    override public func ColumnCount(parent: QModelIndex_ITF? = nil) -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "ColumnCount", parent as Any]) as! Float) }
    public func ColumnCountDefault(parent: QModelIndex_ITF? = nil) -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "ColumnCountDefault", parent as Any]) as! Float) }
    override public func ConnectData(f: @escaping (_ index: QModelIndex, _ role: Int) -> QVariant) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectData", "___REMOTE_CALLBACK___"], f: { (inp: [Any]) -> Any in f(inp[0] as! QModelIndex, Int(inp[1] as! Float)) } as Any) }
    override public func DisconnectData() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectData"]) }
    override public func Data(index: QModelIndex_ITF? = nil, role: Int) -> QVariant { callLocalFunction(l: ["", Pointer(), ___className, "Data", index as Any, role as Any]) as! QVariant }
    public func DataDefault(index: QModelIndex_ITF? = nil, role: Int) -> QVariant { callLocalFunction(l: ["", Pointer(), ___className, "DataDefault", index as Any, role as Any]) as! QVariant }
    override public func DropMimeDataDefault(data: QMimeData_ITF? = nil, action: Int, row: Int, column: Int, parent: QModelIndex_ITF? = nil) -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "DropMimeDataDefault", data as Any, action as Any, row as Any, column as Any, parent as Any]) as! Bool }
    public func FindItems(text: String, flags: Int, column: Int) -> [QStandardItem] { callLocalFunction(l: ["", Pointer(), ___className, "FindItems", text as Any, flags as Any, column as Any]) as! [QStandardItem] }
    override public func FlagsDefault(index: QModelIndex_ITF? = nil) -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "FlagsDefault", index as Any]) as! Float) }
    override public func HasChildrenDefault(parent: QModelIndex_ITF? = nil) -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "HasChildrenDefault", parent as Any]) as! Bool }
    override public func HeaderDataDefault(section: Int, orientation: Int, role: Int) -> QVariant { callLocalFunction(l: ["", Pointer(), ___className, "HeaderDataDefault", section as Any, orientation as Any, role as Any]) as! QVariant }
    public func HorizontalHeaderItem(column: Int) -> QStandardItem { callLocalFunction(l: ["", Pointer(), ___className, "HorizontalHeaderItem", column as Any]) as! QStandardItem }
    override public func ConnectIndex(f: @escaping (_ row: Int, _ column: Int, _ parent: QModelIndex) -> QModelIndex) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectIndex", "___REMOTE_CALLBACK___"], f: { (inp: [Any]) -> Any in f(Int(inp[0] as! Float), Int(inp[1] as! Float), inp[2] as! QModelIndex) } as Any) }
    override public func DisconnectIndex() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectIndex"]) }
    override public func Index(row: Int, column: Int, parent: QModelIndex_ITF? = nil) -> QModelIndex { callLocalFunction(l: ["", Pointer(), ___className, "Index", row as Any, column as Any, parent as Any]) as! QModelIndex }
    public func IndexDefault(row: Int, column: Int, parent: QModelIndex_ITF? = nil) -> QModelIndex { callLocalFunction(l: ["", Pointer(), ___className, "IndexDefault", row as Any, column as Any, parent as Any]) as! QModelIndex }
    public func IndexFromItem(item: QStandardItem_ITF? = nil) -> QModelIndex { callLocalFunction(l: ["", Pointer(), ___className, "IndexFromItem", item as Any]) as! QModelIndex }
    public func InsertColumn_QStandardItemModel(column: Int, items: [QStandardItem]) { _ = callLocalFunction(l: ["", Pointer(), ___className, "InsertColumn", column as Any, items as Any]) }
    override public func InsertColumnsDefault(column: Int, count: Int, parent: QModelIndex_ITF? = nil) -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "InsertColumnsDefault", column as Any, count as Any, parent as Any]) as! Bool }
    public func InsertRow_QStandardItemModel(row: Int, items: [QStandardItem]) { _ = callLocalFunction(l: ["", Pointer(), ___className, "InsertRow", row as Any, items as Any]) }
    public func InsertRow2(row: Int, item: QStandardItem_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "InsertRow2", row as Any, item as Any]) }
    override public func InsertRowsDefault(row: Int, count: Int, parent: QModelIndex_ITF? = nil) -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "InsertRowsDefault", row as Any, count as Any, parent as Any]) as! Bool }
    public func InvisibleRootItem() -> QStandardItem { callLocalFunction(l: ["", Pointer(), ___className, "InvisibleRootItem"]) as! QStandardItem }
    public func Item(row: Int, column: Int) -> QStandardItem { callLocalFunction(l: ["", Pointer(), ___className, "Item", row as Any, column as Any]) as! QStandardItem }
    public func ConnectItemChanged(f: @escaping (_ item: QStandardItem) -> Void) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectItemChanged", "___REMOTE_CALLBACK___"], f: { (inp: [Any]) -> Any in f(inp[0] as! QStandardItem) } as Any) }
    public func DisconnectItemChanged() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectItemChanged"]) }
    public func ItemChanged(item: QStandardItem_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "ItemChanged", item as Any]) }
    override public func ItemDataDefault(index: QModelIndex_ITF? = nil) -> [Int: QVariant] { callLocalFunction(l: ["", Pointer(), ___className, "ItemDataDefault", index as Any]) as! [Int: QVariant] }
    public func ItemFromIndex(index: QModelIndex_ITF? = nil) -> QStandardItem { callLocalFunction(l: ["", Pointer(), ___className, "ItemFromIndex", index as Any]) as! QStandardItem }
    public func ItemPrototype() -> QStandardItem { callLocalFunction(l: ["", Pointer(), ___className, "ItemPrototype"]) as! QStandardItem }
    override public func MimeDataDefault(indexes: [QModelIndex]) -> QMimeData { callLocalFunction(l: ["", Pointer(), ___className, "MimeDataDefault", indexes as Any]) as! QMimeData }
    override public func MimeTypesDefault() -> [String] { callLocalFunction(l: ["", Pointer(), ___className, "MimeTypesDefault"]) as! [String] }
    override public func ConnectParent_QAbstractItemModel(f: @escaping (_ child: QModelIndex) -> QModelIndex) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectParent", "___REMOTE_CALLBACK___"], f: { (inp: [Any]) -> Any in f(inp[0] as! QModelIndex) } as Any) }
    override public func DisconnectParent_QAbstractItemModel() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectParent"]) }
    override public func Parent_QAbstractItemModel(index: QModelIndex_ITF? = nil) -> QModelIndex { callLocalFunction(l: ["", Pointer(), ___className, "Parent", index as Any]) as! QModelIndex }
    public func ParentDefault_QAbstractItemModel(child: QModelIndex_ITF? = nil) -> QModelIndex { callLocalFunction(l: ["", Pointer(), ___className, "ParentDefault", child as Any]) as! QModelIndex }
    override public func RemoveColumnsDefault(column: Int, count: Int, parent: QModelIndex_ITF? = nil) -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "RemoveColumnsDefault", column as Any, count as Any, parent as Any]) as! Bool }
    override public func RemoveRowsDefault(row: Int, count: Int, parent: QModelIndex_ITF? = nil) -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "RemoveRowsDefault", row as Any, count as Any, parent as Any]) as! Bool }
    override public func ConnectRowCount(f: @escaping (_ parent: QModelIndex) -> Int) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectRowCount", "___REMOTE_CALLBACK___"], f: { (inp: [Any]) -> Any in f(inp[0] as! QModelIndex) } as Any) }
    override public func DisconnectRowCount() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectRowCount"]) }
    override public func RowCount(parent: QModelIndex_ITF? = nil) -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "RowCount", parent as Any]) as! Float) }
    public func RowCountDefault(parent: QModelIndex_ITF? = nil) -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "RowCountDefault", parent as Any]) as! Float) }
    public func SetColumnCount(columns: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetColumnCount", columns as Any]) }
    override public func SetDataDefault(index: QModelIndex_ITF? = nil, value: QVariant_ITF? = nil, role: Int) -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "SetDataDefault", index as Any, value as Any, role as Any]) as! Bool }
    override public func SetHeaderDataDefault(section: Int, orientation: Int, value: QVariant_ITF? = nil, role: Int) -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "SetHeaderDataDefault", section as Any, orientation as Any, value as Any, role as Any]) as! Bool }
    public func SetHorizontalHeaderItem(column: Int, item: QStandardItem_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetHorizontalHeaderItem", column as Any, item as Any]) }
    public func SetHorizontalHeaderLabels(labels: [String]) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetHorizontalHeaderLabels", labels as Any]) }
    public func SetItem(row: Int, column: Int, item: QStandardItem_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetItem", row as Any, column as Any, item as Any]) }
    public func SetItem2(row: Int, item: QStandardItem_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetItem2", row as Any, item as Any]) }
    override public func SetItemDataDefault(index: QModelIndex_ITF? = nil, roles: [Int: QVariant]) -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "SetItemDataDefault", index as Any, roles as Any]) as! Bool }
    public func SetItemPrototype(item: QStandardItem_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetItemPrototype", item as Any]) }
    public func SetItemRoleNames(roleNames: [Int: QByteArray]) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetItemRoleNames", roleNames as Any]) }
    public func SetRowCount(rows: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetRowCount", rows as Any]) }
    public func SetSortRole(role: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetSortRole", role as Any]) }
    public func SetVerticalHeaderItem(row: Int, item: QStandardItem_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetVerticalHeaderItem", row as Any, item as Any]) }
    public func SetVerticalHeaderLabels(labels: [String]) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetVerticalHeaderLabels", labels as Any]) }
    public func SiblingDefault(row: Int, column: Int, idx: QModelIndex_ITF? = nil) -> QModelIndex { callLocalFunction(l: ["", Pointer(), ___className, "SiblingDefault", row as Any, column as Any, idx as Any]) as! QModelIndex }
    override public func SortDefault(column: Int, order: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SortDefault", column as Any, order as Any]) }
    public func SortRole() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "SortRole"]) as! Float) }
    override public func SupportedDropActionsDefault() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "SupportedDropActionsDefault"]) as! Float) }
    public func TakeColumn(column: Int) -> [QStandardItem] { callLocalFunction(l: ["", Pointer(), ___className, "TakeColumn", column as Any]) as! [QStandardItem] }
    public func TakeHorizontalHeaderItem(column: Int) -> QStandardItem { callLocalFunction(l: ["", Pointer(), ___className, "TakeHorizontalHeaderItem", column as Any]) as! QStandardItem }
    public func TakeItem(row: Int, column: Int) -> QStandardItem { callLocalFunction(l: ["", Pointer(), ___className, "TakeItem", row as Any, column as Any]) as! QStandardItem }
    public func TakeRow(row: Int) -> [QStandardItem] { callLocalFunction(l: ["", Pointer(), ___className, "TakeRow", row as Any]) as! [QStandardItem] }
    public func TakeVerticalHeaderItem(row: Int) -> QStandardItem { callLocalFunction(l: ["", Pointer(), ___className, "TakeVerticalHeaderItem", row as Any]) as! QStandardItem }
    public func VerticalHeaderItem(row: Int) -> QStandardItem { callLocalFunction(l: ["", Pointer(), ___className, "VerticalHeaderItem", row as Any]) as! QStandardItem }
    public func ConnectDestroyQStandardItemModel(f: @escaping () -> Void) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectDestroyQStandardItemModel", "___REMOTE_CALLBACK___"], f: { (_: [Any]) -> Any in f() } as Any) }
    public func DisconnectDestroyQStandardItemModel() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectDestroyQStandardItemModel"]) }
    public func DestroyQStandardItemModel() { _ = callLocalFunction(l: ["", Pointer(), ___className, "DestroyQStandardItemModel"]) }
    public func DestroyQStandardItemModelDefault() { _ = callLocalFunction(l: ["", Pointer(), ___className, "DestroyQStandardItemModelDefault"]) }
    override public func BuddyDefault(index: QModelIndex_ITF? = nil) -> QModelIndex { callLocalFunction(l: ["", Pointer(), ___className, "BuddyDefault", index as Any]) as! QModelIndex }
    override public func CanDropMimeDataDefault(data: QMimeData_ITF? = nil, action: Int, row: Int, column: Int, parent: QModelIndex_ITF? = nil) -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "CanDropMimeDataDefault", data as Any, action as Any, row as Any, column as Any, parent as Any]) as! Bool }
    override public func CanFetchMoreDefault(parent: QModelIndex_ITF? = nil) -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "CanFetchMoreDefault", parent as Any]) as! Bool }
    override public func FetchMoreDefault(parent: QModelIndex_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "FetchMoreDefault", parent as Any]) }
    override public func MatchDefault(start: QModelIndex_ITF? = nil, role: Int, value: QVariant_ITF? = nil, hits: Int, flags: Int) -> [QModelIndex] { callLocalFunction(l: ["", Pointer(), ___className, "MatchDefault", start as Any, role as Any, value as Any, hits as Any, flags as Any]) as! [QModelIndex] }
    override public func MoveColumnsDefault(sourceParent: QModelIndex_ITF? = nil, sourceColumn: Int, count: Int, destinationParent: QModelIndex_ITF? = nil, destinationChild: Int) -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "MoveColumnsDefault", sourceParent as Any, sourceColumn as Any, count as Any, destinationParent as Any, destinationChild as Any]) as! Bool }
    override public func MoveRowsDefault(sourceParent: QModelIndex_ITF? = nil, sourceRow: Int, count: Int, destinationParent: QModelIndex_ITF? = nil, destinationChild: Int) -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "MoveRowsDefault", sourceParent as Any, sourceRow as Any, count as Any, destinationParent as Any, destinationChild as Any]) as! Bool }
    override public func ResetInternalDataDefault() { _ = callLocalFunction(l: ["", Pointer(), ___className, "ResetInternalDataDefault"]) }
    override public func RevertDefault() { _ = callLocalFunction(l: ["", Pointer(), ___className, "RevertDefault"]) }
    override public func RoleNamesDefault() -> [Int: QByteArray] { callLocalFunction(l: ["", Pointer(), ___className, "RoleNamesDefault"]) as! [Int: QByteArray] }
    override public func SpanDefault(index: QModelIndex_ITF? = nil) -> QSize { callLocalFunction(l: ["", Pointer(), ___className, "SpanDefault", index as Any]) as! QSize }
    override public func SubmitDefault() -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "SubmitDefault"]) as! Bool }
    override public func SupportedDragActionsDefault() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "SupportedDragActionsDefault"]) as! Float) }
    override public func ChildEventDefault(event: QChildEvent_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "ChildEventDefault", event as Any]) }
    override public func ConnectNotifyDefault(sign: QMetaMethod_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "ConnectNotifyDefault", sign as Any]) }
    override public func CustomEventDefault(event: QEvent_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "CustomEventDefault", event as Any]) }
    override public func DeleteLaterDefault() { _ = callLocalFunction(l: ["", Pointer(), ___className, "DeleteLaterDefault"]) }
    override public func DisconnectNotifyDefault(sign: QMetaMethod_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "DisconnectNotifyDefault", sign as Any]) }
    override public func EventDefault(e: QEvent_ITF? = nil) -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "EventDefault", e as Any]) as! Bool }
    override public func EventFilterDefault(watched: QObject_ITF? = nil, event: QEvent_ITF? = nil) -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "EventFilterDefault", watched as Any, event as Any]) as! Bool }
    override public func MetaObjectDefault() -> QMetaObject { callLocalFunction(l: ["", Pointer(), ___className, "MetaObjectDefault"]) as! QMetaObject }
    override public func TimerEventDefault(event: QTimerEvent_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "TimerEventDefault", event as Any]) }
}

public func NewQStandardItemModelFromPointer(ptr: String) -> QStandardItemModel { let r = QStandardItemModel(); r.initFrom(p: ptr, n: "gui.QStandardItemModel"); return r }
public func NewQStandardItemModel(parent: QObject_ITF? = nil) -> QStandardItemModel { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.NewQStandardItemModel", "", parent as Any]) as! QStandardItemModel }
public func NewQStandardItemModel2(rows: Int, columns: Int, parent: QObject_ITF? = nil) -> QStandardItemModel { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.NewQStandardItemModel2", "", rows as Any, columns as Any, parent as Any]) as! QStandardItemModel }
public protocol QStaticText_ITF {
    func QStaticText_PTR() -> QStaticText
}

public class QStaticText: Internal, QStaticText_ITF {
    public func QStaticText_PTR() -> QStaticText { callLocalFunction(l: ["", Pointer(), ___className, "QStaticText_PTR"]) as! QStaticText }
    public func PerformanceHint() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "PerformanceHint"]) as! Float) }
    public func Prepare(matrix: QTransform_ITF? = nil, font: QFont_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "Prepare", matrix as Any, font as Any]) }
    public func SetPerformanceHint(performanceHint: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetPerformanceHint", performanceHint as Any]) }
    public func SetText(text: String) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetText", text as Any]) }
    public func SetTextFormat(textFormat: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetTextFormat", textFormat as Any]) }
    public func SetTextOption(textOption: QTextOption_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetTextOption", textOption as Any]) }
    public func SetTextWidth(textWidth: Float) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetTextWidth", textWidth as Any]) }
    public func Size() -> QSizeF { callLocalFunction(l: ["", Pointer(), ___className, "Size"]) as! QSizeF }
    public func Swap(other: QStaticText_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "Swap", other as Any]) }
    public func Text() -> String { callLocalFunction(l: ["", Pointer(), ___className, "Text"]) as! String }
    public func TextFormat() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "TextFormat"]) as! Float) }
    public func TextOption() -> QTextOption { callLocalFunction(l: ["", Pointer(), ___className, "TextOption"]) as! QTextOption }
    public func TextWidth() -> Float { callLocalFunction(l: ["", Pointer(), ___className, "TextWidth"]) as! Float }
    public func DestroyQStaticText() { _ = callLocalFunction(l: ["", Pointer(), ___className, "DestroyQStaticText"]) }
}

public func NewQStaticTextFromPointer(ptr: String) -> QStaticText { let r = QStaticText(); r.initFrom(p: ptr, n: "gui.QStaticText"); return r }
public func NewQStaticText() -> QStaticText { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.NewQStaticText", ""]) as! QStaticText }
public func NewQStaticText2(text: String) -> QStaticText { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.NewQStaticText2", "", text as Any]) as! QStaticText }
public func NewQStaticText3(other: QStaticText_ITF? = nil) -> QStaticText { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.NewQStaticText3", "", other as Any]) as! QStaticText }
public protocol QStatusTipEvent_ITF: QEvent_ITF {
    func QStatusTipEvent_PTR() -> QStatusTipEvent
}

public class QStatusTipEvent: QEvent, QStatusTipEvent_ITF {
    public func QStatusTipEvent_PTR() -> QStatusTipEvent { callLocalFunction(l: ["", Pointer(), ___className, "QStatusTipEvent_PTR"]) as! QStatusTipEvent }
    public func DestroyQStatusTipEvent() { _ = callLocalFunction(l: ["", Pointer(), ___className, "DestroyQStatusTipEvent"]) }
    public func Tip() -> String { callLocalFunction(l: ["", Pointer(), ___className, "Tip"]) as! String }
}

public func NewQStatusTipEventFromPointer(ptr: String) -> QStatusTipEvent { let r = QStatusTipEvent(); r.initFrom(p: ptr, n: "gui.QStatusTipEvent"); return r }
public func NewQStatusTipEvent(tip: String) -> QStatusTipEvent { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.NewQStatusTipEvent", "", tip as Any]) as! QStatusTipEvent }
public protocol QStyleHints_ITF: QObject_ITF {
    func QStyleHints_PTR() -> QStyleHints
}

public class QStyleHints: QObject, QStyleHints_ITF {
    public func QStyleHints_PTR() -> QStyleHints { callLocalFunction(l: ["", Pointer(), ___className, "QStyleHints_PTR"]) as! QStyleHints }
    public func CursorFlashTime() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "CursorFlashTime"]) as! Float) }
    public func ConnectCursorFlashTimeChanged(f: @escaping (_ cursorFlashTime: Int) -> Void) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectCursorFlashTimeChanged", "___REMOTE_CALLBACK___"], f: { (inp: [Any]) -> Any in f(Int(inp[0] as! Float)) } as Any) }
    public func DisconnectCursorFlashTimeChanged() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectCursorFlashTimeChanged"]) }
    public func CursorFlashTimeChanged(cursorFlashTime: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "CursorFlashTimeChanged", cursorFlashTime as Any]) }
    public func FontSmoothingGamma() -> Float { callLocalFunction(l: ["", Pointer(), ___className, "FontSmoothingGamma"]) as! Float }
    public func KeyboardAutoRepeatRate() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "KeyboardAutoRepeatRate"]) as! Float) }
    public func KeyboardInputInterval() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "KeyboardInputInterval"]) as! Float) }
    public func ConnectKeyboardInputIntervalChanged(f: @escaping (_ keyboardInputInterval: Int) -> Void) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectKeyboardInputIntervalChanged", "___REMOTE_CALLBACK___"], f: { (inp: [Any]) -> Any in f(Int(inp[0] as! Float)) } as Any) }
    public func DisconnectKeyboardInputIntervalChanged() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectKeyboardInputIntervalChanged"]) }
    public func KeyboardInputIntervalChanged(keyboardInputInterval: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "KeyboardInputIntervalChanged", keyboardInputInterval as Any]) }
    public func MouseDoubleClickInterval() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "MouseDoubleClickInterval"]) as! Float) }
    public func ConnectMouseDoubleClickIntervalChanged(f: @escaping (_ mouseDoubleClickInterval: Int) -> Void) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectMouseDoubleClickIntervalChanged", "___REMOTE_CALLBACK___"], f: { (inp: [Any]) -> Any in f(Int(inp[0] as! Float)) } as Any) }
    public func DisconnectMouseDoubleClickIntervalChanged() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectMouseDoubleClickIntervalChanged"]) }
    public func MouseDoubleClickIntervalChanged(mouseDoubleClickInterval: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "MouseDoubleClickIntervalChanged", mouseDoubleClickInterval as Any]) }
    public func MousePressAndHoldInterval() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "MousePressAndHoldInterval"]) as! Float) }
    public func ConnectMousePressAndHoldIntervalChanged(f: @escaping (_ mousePressAndHoldInterval: Int) -> Void) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectMousePressAndHoldIntervalChanged", "___REMOTE_CALLBACK___"], f: { (inp: [Any]) -> Any in f(Int(inp[0] as! Float)) } as Any) }
    public func DisconnectMousePressAndHoldIntervalChanged() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectMousePressAndHoldIntervalChanged"]) }
    public func MousePressAndHoldIntervalChanged(mousePressAndHoldInterval: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "MousePressAndHoldIntervalChanged", mousePressAndHoldInterval as Any]) }
    public func MouseQuickSelectionThreshold() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "MouseQuickSelectionThreshold"]) as! Float) }
    public func ConnectMouseQuickSelectionThresholdChanged(f: @escaping (_ threshold: Int) -> Void) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectMouseQuickSelectionThresholdChanged", "___REMOTE_CALLBACK___"], f: { (inp: [Any]) -> Any in f(Int(inp[0] as! Float)) } as Any) }
    public func DisconnectMouseQuickSelectionThresholdChanged() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectMouseQuickSelectionThresholdChanged"]) }
    public func MouseQuickSelectionThresholdChanged(threshold: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "MouseQuickSelectionThresholdChanged", threshold as Any]) }
    public func PasswordMaskCharacter() -> QChar { callLocalFunction(l: ["", Pointer(), ___className, "PasswordMaskCharacter"]) as! QChar }
    public func PasswordMaskDelay() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "PasswordMaskDelay"]) as! Float) }
    public func SetFocusOnTouchRelease() -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "SetFocusOnTouchRelease"]) as! Bool }
    public func SetShowShortcutsInContextMenus(showShortcutsInContextMenus: Bool) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetShowShortcutsInContextMenus", showShortcutsInContextMenus as Any]) }
    public func SetUseHoverEffects(useHoverEffects: Bool) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetUseHoverEffects", useHoverEffects as Any]) }
    public func ShowIsFullScreen() -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "ShowIsFullScreen"]) as! Bool }
    public func ShowIsMaximized() -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "ShowIsMaximized"]) as! Bool }
    public func ShowShortcutsInContextMenus() -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "ShowShortcutsInContextMenus"]) as! Bool }
    public func ConnectShowShortcutsInContextMenusChanged(f: @escaping (_ vbo: Bool) -> Void) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectShowShortcutsInContextMenusChanged", "___REMOTE_CALLBACK___"], f: { (inp: [Any]) -> Any in f(inp[0] as! Bool) } as Any) }
    public func DisconnectShowShortcutsInContextMenusChanged() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectShowShortcutsInContextMenusChanged"]) }
    public func ShowShortcutsInContextMenusChanged(vbo: Bool) { _ = callLocalFunction(l: ["", Pointer(), ___className, "ShowShortcutsInContextMenusChanged", vbo as Any]) }
    public func SingleClickActivation() -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "SingleClickActivation"]) as! Bool }
    public func StartDragDistance() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "StartDragDistance"]) as! Float) }
    public func ConnectStartDragDistanceChanged(f: @escaping (_ startDragDistance: Int) -> Void) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectStartDragDistanceChanged", "___REMOTE_CALLBACK___"], f: { (inp: [Any]) -> Any in f(Int(inp[0] as! Float)) } as Any) }
    public func DisconnectStartDragDistanceChanged() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectStartDragDistanceChanged"]) }
    public func StartDragDistanceChanged(startDragDistance: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "StartDragDistanceChanged", startDragDistance as Any]) }
    public func StartDragTime() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "StartDragTime"]) as! Float) }
    public func ConnectStartDragTimeChanged(f: @escaping (_ startDragTime: Int) -> Void) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectStartDragTimeChanged", "___REMOTE_CALLBACK___"], f: { (inp: [Any]) -> Any in f(Int(inp[0] as! Float)) } as Any) }
    public func DisconnectStartDragTimeChanged() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectStartDragTimeChanged"]) }
    public func StartDragTimeChanged(startDragTime: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "StartDragTimeChanged", startDragTime as Any]) }
    public func StartDragVelocity() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "StartDragVelocity"]) as! Float) }
    public func TabFocusBehavior() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "TabFocusBehavior"]) as! Float) }
    public func ConnectTabFocusBehaviorChanged(f: @escaping (_ tabFocusBehavior: Int) -> Void) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectTabFocusBehaviorChanged", "___REMOTE_CALLBACK___"], f: { (inp: [Any]) -> Any in f(Int(inp[0] as! Float)) } as Any) }
    public func DisconnectTabFocusBehaviorChanged() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectTabFocusBehaviorChanged"]) }
    public func TabFocusBehaviorChanged(tabFocusBehavior: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "TabFocusBehaviorChanged", tabFocusBehavior as Any]) }
    public func UseHoverEffects() -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "UseHoverEffects"]) as! Bool }
    public func ConnectUseHoverEffectsChanged(f: @escaping (_ useHoverEffects: Bool) -> Void) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectUseHoverEffectsChanged", "___REMOTE_CALLBACK___"], f: { (inp: [Any]) -> Any in f(inp[0] as! Bool) } as Any) }
    public func DisconnectUseHoverEffectsChanged() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectUseHoverEffectsChanged"]) }
    public func UseHoverEffectsChanged(useHoverEffects: Bool) { _ = callLocalFunction(l: ["", Pointer(), ___className, "UseHoverEffectsChanged", useHoverEffects as Any]) }
    public func UseRtlExtensions() -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "UseRtlExtensions"]) as! Bool }
    public func WheelScrollLines() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "WheelScrollLines"]) as! Float) }
    public func ConnectWheelScrollLinesChanged(f: @escaping (_ scrollLines: Int) -> Void) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectWheelScrollLinesChanged", "___REMOTE_CALLBACK___"], f: { (inp: [Any]) -> Any in f(Int(inp[0] as! Float)) } as Any) }
    public func DisconnectWheelScrollLinesChanged() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectWheelScrollLinesChanged"]) }
    public func WheelScrollLinesChanged(scrollLines: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "WheelScrollLinesChanged", scrollLines as Any]) }
    override public func ChildEventDefault(event: QChildEvent_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "ChildEventDefault", event as Any]) }
    override public func ConnectNotifyDefault(sign: QMetaMethod_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "ConnectNotifyDefault", sign as Any]) }
    override public func CustomEventDefault(event: QEvent_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "CustomEventDefault", event as Any]) }
    override public func DeleteLaterDefault() { _ = callLocalFunction(l: ["", Pointer(), ___className, "DeleteLaterDefault"]) }
    override public func DisconnectNotifyDefault(sign: QMetaMethod_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "DisconnectNotifyDefault", sign as Any]) }
    override public func EventDefault(e: QEvent_ITF? = nil) -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "EventDefault", e as Any]) as! Bool }
    override public func EventFilterDefault(watched: QObject_ITF? = nil, event: QEvent_ITF? = nil) -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "EventFilterDefault", watched as Any, event as Any]) as! Bool }
    override public func MetaObjectDefault() -> QMetaObject { callLocalFunction(l: ["", Pointer(), ___className, "MetaObjectDefault"]) as! QMetaObject }
    override public func TimerEventDefault(event: QTimerEvent_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "TimerEventDefault", event as Any]) }
}

public func NewQStyleHintsFromPointer(ptr: String) -> QStyleHints { let r = QStyleHints(); r.initFrom(p: ptr, n: "gui.QStyleHints"); return r }
public protocol QSupportedWritingSystems_ITF {
    func QSupportedWritingSystems_PTR() -> QSupportedWritingSystems
}

public class QSupportedWritingSystems: Internal, QSupportedWritingSystems_ITF {
    public func QSupportedWritingSystems_PTR() -> QSupportedWritingSystems { callLocalFunction(l: ["", Pointer(), ___className, "QSupportedWritingSystems_PTR"]) as! QSupportedWritingSystems }
}

public protocol QSurface_ITF {
    func QSurface_PTR() -> QSurface
}

public class QSurface: Internal, QSurface_ITF {
    public func QSurface_PTR() -> QSurface { callLocalFunction(l: ["", Pointer(), ___className, "QSurface_PTR"]) as! QSurface }
    public func ConnectFormat(f: @escaping () -> QSurfaceFormat) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectFormat", "___REMOTE_CALLBACK___"], f: { (_: [Any]) -> Any in f() } as Any) }
    public func DisconnectFormat() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectFormat"]) }
    public func Format() -> QSurfaceFormat { callLocalFunction(l: ["", Pointer(), ___className, "Format"]) as! QSurfaceFormat }
    public func ConnectSize(f: @escaping () -> QSize) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectSize", "___REMOTE_CALLBACK___"], f: { (_: [Any]) -> Any in f() } as Any) }
    public func DisconnectSize() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectSize"]) }
    public func Size() -> QSize { callLocalFunction(l: ["", Pointer(), ___className, "Size"]) as! QSize }
    public func SupportsOpenGL() -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "SupportsOpenGL"]) as! Bool }
    public func SurfaceClass() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "SurfaceClass"]) as! Float) }
    public func ConnectSurfaceType(f: @escaping () -> Int) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectSurfaceType", "___REMOTE_CALLBACK___"], f: { (_: [Any]) -> Any in f() } as Any) }
    public func DisconnectSurfaceType() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectSurfaceType"]) }
    public func SurfaceType() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "SurfaceType"]) as! Float) }
    public func ConnectDestroyQSurface(f: @escaping () -> Void) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectDestroyQSurface", "___REMOTE_CALLBACK___"], f: { (_: [Any]) -> Any in f() } as Any) }
    public func DisconnectDestroyQSurface() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectDestroyQSurface"]) }
    public func DestroyQSurface() { _ = callLocalFunction(l: ["", Pointer(), ___className, "DestroyQSurface"]) }
    public func DestroyQSurfaceDefault() { _ = callLocalFunction(l: ["", Pointer(), ___className, "DestroyQSurfaceDefault"]) }
}

public func NewQSurfaceFromPointer(ptr: String) -> QSurface { let r = QSurface(); r.initFrom(p: ptr, n: "gui.QSurface"); return r }
public protocol QSurfaceFormat_ITF {
    func QSurfaceFormat_PTR() -> QSurfaceFormat
}

public class QSurfaceFormat: Internal, QSurfaceFormat_ITF {
    public func QSurfaceFormat_PTR() -> QSurfaceFormat { callLocalFunction(l: ["", Pointer(), ___className, "QSurfaceFormat_PTR"]) as! QSurfaceFormat }
    public func AlphaBufferSize() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "AlphaBufferSize"]) as! Float) }
    public func BlueBufferSize() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "BlueBufferSize"]) as! Float) }
    public func ColorSpace() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "ColorSpace"]) as! Float) }
    public func DefaultFormat() -> QSurfaceFormat { callLocalFunction(l: ["", Pointer(), ___className, "DefaultFormat"]) as! QSurfaceFormat }
    public func DepthBufferSize() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "DepthBufferSize"]) as! Float) }
    public func GreenBufferSize() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "GreenBufferSize"]) as! Float) }
    public func HasAlpha() -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "HasAlpha"]) as! Bool }
    public func MajorVersion() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "MajorVersion"]) as! Float) }
    public func MinorVersion() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "MinorVersion"]) as! Float) }
    public func Options() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "Options"]) as! Float) }
    public func Profile() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "Profile"]) as! Float) }
    public func RedBufferSize() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "RedBufferSize"]) as! Float) }
    public func RenderableType() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "RenderableType"]) as! Float) }
    public func Samples() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "Samples"]) as! Float) }
    public func SetAlphaBufferSize(size: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetAlphaBufferSize", size as Any]) }
    public func SetBlueBufferSize(size: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetBlueBufferSize", size as Any]) }
    public func SetColorSpace(colorSpace: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetColorSpace", colorSpace as Any]) }
    public func SetDefaultFormat(format: QSurfaceFormat_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetDefaultFormat", format as Any]) }
    public func SetDepthBufferSize(size: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetDepthBufferSize", size as Any]) }
    public func SetGreenBufferSize(size: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetGreenBufferSize", size as Any]) }
    public func SetMajorVersion(major: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetMajorVersion", major as Any]) }
    public func SetMinorVersion(minor: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetMinorVersion", minor as Any]) }
    public func SetOption(option: Int, on: Bool) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetOption", option as Any, on as Any]) }
    public func SetOptions(options: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetOptions", options as Any]) }
    public func SetProfile(profile: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetProfile", profile as Any]) }
    public func SetRedBufferSize(size: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetRedBufferSize", size as Any]) }
    public func SetRenderableType(ty: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetRenderableType", ty as Any]) }
    public func SetSamples(numSamples: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetSamples", numSamples as Any]) }
    public func SetStencilBufferSize(size: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetStencilBufferSize", size as Any]) }
    public func SetStereo(enable: Bool) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetStereo", enable as Any]) }
    public func SetSwapBehavior(behavior: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetSwapBehavior", behavior as Any]) }
    public func SetSwapInterval(interval: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetSwapInterval", interval as Any]) }
    public func SetVersion(major: Int, minor: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetVersion", major as Any, minor as Any]) }
    public func StencilBufferSize() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "StencilBufferSize"]) as! Float) }
    public func Stereo() -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "Stereo"]) as! Bool }
    public func SwapBehavior() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "SwapBehavior"]) as! Float) }
    public func SwapInterval() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "SwapInterval"]) as! Float) }
    public func TestOption(option: Int) -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "TestOption", option as Any]) as! Bool }
    public func DestroyQSurfaceFormat() { _ = callLocalFunction(l: ["", Pointer(), ___className, "DestroyQSurfaceFormat"]) }
}

public func NewQSurfaceFormatFromPointer(ptr: String) -> QSurfaceFormat { let r = QSurfaceFormat(); r.initFrom(p: ptr, n: "gui.QSurfaceFormat"); return r }
public func NewQSurfaceFormat() -> QSurfaceFormat { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.NewQSurfaceFormat", ""]) as! QSurfaceFormat }
public func NewQSurfaceFormat2(options: Int) -> QSurfaceFormat { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.NewQSurfaceFormat2", "", options as Any]) as! QSurfaceFormat }
public func NewQSurfaceFormat3(other: QSurfaceFormat_ITF? = nil) -> QSurfaceFormat { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.NewQSurfaceFormat3", "", other as Any]) as! QSurfaceFormat }
public func QSurfaceFormat_DefaultFormat() -> QSurfaceFormat { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.QSurfaceFormat_DefaultFormat", ""]) as! QSurfaceFormat }
public func QSurfaceFormat_SetDefaultFormat(format: QSurfaceFormat_ITF? = nil) { Gui.initModule(); _ = callLocalFunction(l: ["", "", "gui.QSurfaceFormat_SetDefaultFormat", "", format as Any]) }
public protocol QSyntaxHighlighter_ITF: QObject_ITF {
    func QSyntaxHighlighter_PTR() -> QSyntaxHighlighter
}

public class QSyntaxHighlighter: QObject, QSyntaxHighlighter_ITF {
    public func QSyntaxHighlighter_PTR() -> QSyntaxHighlighter { callLocalFunction(l: ["", Pointer(), ___className, "QSyntaxHighlighter_PTR"]) as! QSyntaxHighlighter }
    public func CurrentBlock() -> QTextBlock { callLocalFunction(l: ["", Pointer(), ___className, "CurrentBlock"]) as! QTextBlock }
    public func CurrentBlockState() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "CurrentBlockState"]) as! Float) }
    public func CurrentBlockUserData() -> QTextBlockUserData { callLocalFunction(l: ["", Pointer(), ___className, "CurrentBlockUserData"]) as! QTextBlockUserData }
    public func Document() -> QTextDocument { callLocalFunction(l: ["", Pointer(), ___className, "Document"]) as! QTextDocument }
    public func Format(position: Int) -> QTextCharFormat { callLocalFunction(l: ["", Pointer(), ___className, "Format", position as Any]) as! QTextCharFormat }
    public func ConnectHighlightBlock(f: @escaping (_ text: String) -> Void) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectHighlightBlock", "___REMOTE_CALLBACK___"], f: { (inp: [Any]) -> Any in f(inp[0] as! String) } as Any) }
    public func DisconnectHighlightBlock() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectHighlightBlock"]) }
    public func HighlightBlock(text: String) { _ = callLocalFunction(l: ["", Pointer(), ___className, "HighlightBlock", text as Any]) }
    public func PreviousBlockState() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "PreviousBlockState"]) as! Float) }
    public func ConnectRehighlight(f: @escaping () -> Void) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectRehighlight", "___REMOTE_CALLBACK___"], f: { (_: [Any]) -> Any in f() } as Any) }
    public func DisconnectRehighlight() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectRehighlight"]) }
    public func Rehighlight() { _ = callLocalFunction(l: ["", Pointer(), ___className, "Rehighlight"]) }
    public func RehighlightDefault() { _ = callLocalFunction(l: ["", Pointer(), ___className, "RehighlightDefault"]) }
    public func ConnectRehighlightBlock(f: @escaping (_ block: QTextBlock) -> Void) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectRehighlightBlock", "___REMOTE_CALLBACK___"], f: { (inp: [Any]) -> Any in f(inp[0] as! QTextBlock) } as Any) }
    public func DisconnectRehighlightBlock() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectRehighlightBlock"]) }
    public func RehighlightBlock(block: QTextBlock_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "RehighlightBlock", block as Any]) }
    public func RehighlightBlockDefault(block: QTextBlock_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "RehighlightBlockDefault", block as Any]) }
    public func SetCurrentBlockState(newState: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetCurrentBlockState", newState as Any]) }
    public func SetCurrentBlockUserData(data: QTextBlockUserData_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetCurrentBlockUserData", data as Any]) }
    public func SetDocument(doc: QTextDocument_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetDocument", doc as Any]) }
    public func SetFormat(start: Int, count: Int, format: QTextCharFormat_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetFormat", start as Any, count as Any, format as Any]) }
    public func SetFormat2(start: Int, count: Int, color: QColor_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetFormat2", start as Any, count as Any, color as Any]) }
    public func SetFormat3(start: Int, count: Int, font: QFont_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetFormat3", start as Any, count as Any, font as Any]) }
    public func ConnectDestroyQSyntaxHighlighter(f: @escaping () -> Void) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectDestroyQSyntaxHighlighter", "___REMOTE_CALLBACK___"], f: { (_: [Any]) -> Any in f() } as Any) }
    public func DisconnectDestroyQSyntaxHighlighter() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectDestroyQSyntaxHighlighter"]) }
    public func DestroyQSyntaxHighlighter() { _ = callLocalFunction(l: ["", Pointer(), ___className, "DestroyQSyntaxHighlighter"]) }
    public func DestroyQSyntaxHighlighterDefault() { _ = callLocalFunction(l: ["", Pointer(), ___className, "DestroyQSyntaxHighlighterDefault"]) }
    override public func ChildEventDefault(event: QChildEvent_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "ChildEventDefault", event as Any]) }
    override public func ConnectNotifyDefault(sign: QMetaMethod_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "ConnectNotifyDefault", sign as Any]) }
    override public func CustomEventDefault(event: QEvent_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "CustomEventDefault", event as Any]) }
    override public func DeleteLaterDefault() { _ = callLocalFunction(l: ["", Pointer(), ___className, "DeleteLaterDefault"]) }
    override public func DisconnectNotifyDefault(sign: QMetaMethod_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "DisconnectNotifyDefault", sign as Any]) }
    override public func EventDefault(e: QEvent_ITF? = nil) -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "EventDefault", e as Any]) as! Bool }
    override public func EventFilterDefault(watched: QObject_ITF? = nil, event: QEvent_ITF? = nil) -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "EventFilterDefault", watched as Any, event as Any]) as! Bool }
    override public func MetaObjectDefault() -> QMetaObject { callLocalFunction(l: ["", Pointer(), ___className, "MetaObjectDefault"]) as! QMetaObject }
    override public func TimerEventDefault(event: QTimerEvent_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "TimerEventDefault", event as Any]) }
}

public func NewQSyntaxHighlighterFromPointer(ptr: String) -> QSyntaxHighlighter { let r = QSyntaxHighlighter(); r.initFrom(p: ptr, n: "gui.QSyntaxHighlighter"); return r }
public func NewQSyntaxHighlighter(parent: QObject_ITF? = nil) -> QSyntaxHighlighter { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.NewQSyntaxHighlighter", "", parent as Any]) as! QSyntaxHighlighter }
public func NewQSyntaxHighlighter2(parent: QTextDocument_ITF? = nil) -> QSyntaxHighlighter { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.NewQSyntaxHighlighter2", "", parent as Any]) as! QSyntaxHighlighter }
public protocol QTabletEvent_ITF: QInputEvent_ITF {
    func QTabletEvent_PTR() -> QTabletEvent
}

public class QTabletEvent: QInputEvent, QTabletEvent_ITF {
    public func QTabletEvent_PTR() -> QTabletEvent { callLocalFunction(l: ["", Pointer(), ___className, "QTabletEvent_PTR"]) as! QTabletEvent }
    public func DestroyQTabletEvent() { _ = callLocalFunction(l: ["", Pointer(), ___className, "DestroyQTabletEvent"]) }
    public func Button() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "Button"]) as! Float) }
    public func Buttons() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "Buttons"]) as! Float) }
    public func Device() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "Device"]) as! Float) }
    public func GlobalPos() -> QPoint { callLocalFunction(l: ["", Pointer(), ___className, "GlobalPos"]) as! QPoint }
    public func GlobalPosF() -> QPointF { callLocalFunction(l: ["", Pointer(), ___className, "GlobalPosF"]) as! QPointF }
    public func GlobalX() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "GlobalX"]) as! Float) }
    public func GlobalY() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "GlobalY"]) as! Float) }
    public func HiResGlobalX() -> Float { callLocalFunction(l: ["", Pointer(), ___className, "HiResGlobalX"]) as! Float }
    public func HiResGlobalY() -> Float { callLocalFunction(l: ["", Pointer(), ___className, "HiResGlobalY"]) as! Float }
    public func PointerType() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "PointerType"]) as! Float) }
    public func Pos() -> QPoint { callLocalFunction(l: ["", Pointer(), ___className, "Pos"]) as! QPoint }
    public func PosF() -> QPointF { callLocalFunction(l: ["", Pointer(), ___className, "PosF"]) as! QPointF }
    public func Pressure() -> Float { callLocalFunction(l: ["", Pointer(), ___className, "Pressure"]) as! Float }
    public func Rotation() -> Float { callLocalFunction(l: ["", Pointer(), ___className, "Rotation"]) as! Float }
    public func TangentialPressure() -> Float { callLocalFunction(l: ["", Pointer(), ___className, "TangentialPressure"]) as! Float }
    public func UniqueId() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "UniqueId"]) as! Float) }
    public func X() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "X"]) as! Float) }
    public func XTilt() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "XTilt"]) as! Float) }
    public func Y() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "Y"]) as! Float) }
    public func YTilt() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "YTilt"]) as! Float) }
    public func Z() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "Z"]) as! Float) }
}

public func NewQTabletEventFromPointer(ptr: String) -> QTabletEvent { let r = QTabletEvent(); r.initFrom(p: ptr, n: "gui.QTabletEvent"); return r }
public func NewQTabletEvent2(ty: Int, pos: QPointF_ITF? = nil, globalPos: QPointF_ITF? = nil, device: Int, pointerType: Int, pressure: Float, xTilt: Int, yTilt: Int, tangentialPressure: Float, rotation: Float, z: Int, keyState: Int, uniqueID: Int, button: Int, buttons: Int) -> QTabletEvent { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.NewQTabletEvent2", "", ty as Any, pos as Any, globalPos as Any, device as Any, pointerType as Any, pressure as Any, xTilt as Any, yTilt as Any, tangentialPressure as Any, rotation as Any, z as Any, keyState as Any, uniqueID as Any, button as Any, buttons as Any]) as! QTabletEvent }
public protocol QTextBlock_ITF {
    func QTextBlock_PTR() -> QTextBlock
}

public class QTextBlock: Internal, QTextBlock_ITF {
    public func QTextBlock_PTR() -> QTextBlock { callLocalFunction(l: ["", Pointer(), ___className, "QTextBlock_PTR"]) as! QTextBlock }
    public func DestroyQTextBlock() { _ = callLocalFunction(l: ["", Pointer(), ___className, "DestroyQTextBlock"]) }
    public func BlockFormat() -> QTextBlockFormat { callLocalFunction(l: ["", Pointer(), ___className, "BlockFormat"]) as! QTextBlockFormat }
    public func BlockFormatIndex() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "BlockFormatIndex"]) as! Float) }
    public func BlockNumber() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "BlockNumber"]) as! Float) }
    public func CharFormat() -> QTextCharFormat { callLocalFunction(l: ["", Pointer(), ___className, "CharFormat"]) as! QTextCharFormat }
    public func CharFormatIndex() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "CharFormatIndex"]) as! Float) }
    public func ClearLayout() { _ = callLocalFunction(l: ["", Pointer(), ___className, "ClearLayout"]) }
    public func Contains(position: Int) -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "Contains", position as Any]) as! Bool }
    public func Document() -> QTextDocument { callLocalFunction(l: ["", Pointer(), ___className, "Document"]) as! QTextDocument }
    public func FirstLineNumber() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "FirstLineNumber"]) as! Float) }
    public func IsValid() -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "IsValid"]) as! Bool }
    public func IsVisible() -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "IsVisible"]) as! Bool }
    public func Layout() -> QTextLayout { callLocalFunction(l: ["", Pointer(), ___className, "Layout"]) as! QTextLayout }
    public func Length() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "Length"]) as! Float) }
    public func LineCount() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "LineCount"]) as! Float) }
    public func Next() -> QTextBlock { callLocalFunction(l: ["", Pointer(), ___className, "Next"]) as! QTextBlock }
    public func Position() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "Position"]) as! Float) }
    public func Previous() -> QTextBlock { callLocalFunction(l: ["", Pointer(), ___className, "Previous"]) as! QTextBlock }
    public func Revision() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "Revision"]) as! Float) }
    public func SetLineCount(count: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetLineCount", count as Any]) }
    public func SetRevision(rev: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetRevision", rev as Any]) }
    public func SetUserData(data: QTextBlockUserData_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetUserData", data as Any]) }
    public func SetUserState(state: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetUserState", state as Any]) }
    public func SetVisible(visible: Bool) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetVisible", visible as Any]) }
    public func Text() -> String { callLocalFunction(l: ["", Pointer(), ___className, "Text"]) as! String }
    public func TextDirection() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "TextDirection"]) as! Float) }
    public func UserData() -> QTextBlockUserData { callLocalFunction(l: ["", Pointer(), ___className, "UserData"]) as! QTextBlockUserData }
    public func UserState() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "UserState"]) as! Float) }
}

public func NewQTextBlockFromPointer(ptr: String) -> QTextBlock { let r = QTextBlock(); r.initFrom(p: ptr, n: "gui.QTextBlock"); return r }
public func NewQTextBlock3(other: QTextBlock_ITF? = nil) -> QTextBlock { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.NewQTextBlock3", "", other as Any]) as! QTextBlock }
public protocol QTextBlockFormat_ITF: QTextFormat_ITF {
    func QTextBlockFormat_PTR() -> QTextBlockFormat
}

public class QTextBlockFormat: QTextFormat, QTextBlockFormat_ITF {
    public func QTextBlockFormat_PTR() -> QTextBlockFormat { callLocalFunction(l: ["", Pointer(), ___className, "QTextBlockFormat_PTR"]) as! QTextBlockFormat }
    public func DestroyQTextBlockFormat() { _ = callLocalFunction(l: ["", Pointer(), ___className, "DestroyQTextBlockFormat"]) }
    public func Alignment() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "Alignment"]) as! Float) }
    public func BottomMargin() -> Float { callLocalFunction(l: ["", Pointer(), ___className, "BottomMargin"]) as! Float }
    public func HeadingLevel() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "HeadingLevel"]) as! Float) }
    public func Indent() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "Indent"]) as! Float) }
    public func LeftMargin() -> Float { callLocalFunction(l: ["", Pointer(), ___className, "LeftMargin"]) as! Float }
    public func LineHeight(scriptLineHeight: Float, scaling: Float) -> Float { callLocalFunction(l: ["", Pointer(), ___className, "LineHeight", scriptLineHeight as Any, scaling as Any]) as! Float }
    public func LineHeight2() -> Float { callLocalFunction(l: ["", Pointer(), ___className, "LineHeight2"]) as! Float }
    public func LineHeightType() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "LineHeightType"]) as! Float) }
    public func NonBreakableLines() -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "NonBreakableLines"]) as! Bool }
    public func PageBreakPolicy() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "PageBreakPolicy"]) as! Float) }
    public func RightMargin() -> Float { callLocalFunction(l: ["", Pointer(), ___className, "RightMargin"]) as! Float }
    public func SetAlignment(alignment: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetAlignment", alignment as Any]) }
    public func SetBottomMargin(margi: Float) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetBottomMargin", margi as Any]) }
    public func SetHeadingLevel(level: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetHeadingLevel", level as Any]) }
    public func SetIndent(indentation: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetIndent", indentation as Any]) }
    public func SetLeftMargin(margi: Float) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetLeftMargin", margi as Any]) }
    public func SetLineHeight(height: Float, heightType: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetLineHeight", height as Any, heightType as Any]) }
    public func SetNonBreakableLines(b: Bool) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetNonBreakableLines", b as Any]) }
    public func SetPageBreakPolicy(policy: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetPageBreakPolicy", policy as Any]) }
    public func SetRightMargin(margi: Float) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetRightMargin", margi as Any]) }
    public func SetTextIndent(indent: Float) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetTextIndent", indent as Any]) }
    public func SetTopMargin(margi: Float) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetTopMargin", margi as Any]) }
    public func TextIndent() -> Float { callLocalFunction(l: ["", Pointer(), ___className, "TextIndent"]) as! Float }
    public func TopMargin() -> Float { callLocalFunction(l: ["", Pointer(), ___className, "TopMargin"]) as! Float }
}

public func NewQTextBlockFormatFromPointer(ptr: String) -> QTextBlockFormat { let r = QTextBlockFormat(); r.initFrom(p: ptr, n: "gui.QTextBlockFormat"); return r }
public func NewQTextBlockFormat() -> QTextBlockFormat { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.NewQTextBlockFormat", ""]) as! QTextBlockFormat }
public protocol QTextBlockGroup_ITF: QTextObject_ITF {
    func QTextBlockGroup_PTR() -> QTextBlockGroup
}

public class QTextBlockGroup: QTextObject, QTextBlockGroup_ITF {
    public func QTextBlockGroup_PTR() -> QTextBlockGroup { callLocalFunction(l: ["", Pointer(), ___className, "QTextBlockGroup_PTR"]) as! QTextBlockGroup }
    public func ConnectBlockFormatChanged(f: @escaping (_ block: QTextBlock) -> Void) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectBlockFormatChanged", "___REMOTE_CALLBACK___"], f: { (inp: [Any]) -> Any in f(inp[0] as! QTextBlock) } as Any) }
    public func DisconnectBlockFormatChanged() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectBlockFormatChanged"]) }
    public func BlockFormatChanged(block: QTextBlock_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "BlockFormatChanged", block as Any]) }
    public func BlockFormatChangedDefault(block: QTextBlock_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "BlockFormatChangedDefault", block as Any]) }
    public func ConnectBlockInserted(f: @escaping (_ block: QTextBlock) -> Void) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectBlockInserted", "___REMOTE_CALLBACK___"], f: { (inp: [Any]) -> Any in f(inp[0] as! QTextBlock) } as Any) }
    public func DisconnectBlockInserted() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectBlockInserted"]) }
    public func BlockInserted(block: QTextBlock_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "BlockInserted", block as Any]) }
    public func BlockInsertedDefault(block: QTextBlock_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "BlockInsertedDefault", block as Any]) }
    public func BlockList() -> [QTextBlock] { callLocalFunction(l: ["", Pointer(), ___className, "BlockList"]) as! [QTextBlock] }
    public func ConnectBlockRemoved(f: @escaping (_ block: QTextBlock) -> Void) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectBlockRemoved", "___REMOTE_CALLBACK___"], f: { (inp: [Any]) -> Any in f(inp[0] as! QTextBlock) } as Any) }
    public func DisconnectBlockRemoved() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectBlockRemoved"]) }
    public func BlockRemoved(block: QTextBlock_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "BlockRemoved", block as Any]) }
    public func BlockRemovedDefault(block: QTextBlock_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "BlockRemovedDefault", block as Any]) }
    public func ConnectDestroyQTextBlockGroup(f: @escaping () -> Void) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectDestroyQTextBlockGroup", "___REMOTE_CALLBACK___"], f: { (_: [Any]) -> Any in f() } as Any) }
    public func DisconnectDestroyQTextBlockGroup() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectDestroyQTextBlockGroup"]) }
    public func DestroyQTextBlockGroup() { _ = callLocalFunction(l: ["", Pointer(), ___className, "DestroyQTextBlockGroup"]) }
    public func DestroyQTextBlockGroupDefault() { _ = callLocalFunction(l: ["", Pointer(), ___className, "DestroyQTextBlockGroupDefault"]) }
}

public func NewQTextBlockGroupFromPointer(ptr: String) -> QTextBlockGroup { let r = QTextBlockGroup(); r.initFrom(p: ptr, n: "gui.QTextBlockGroup"); return r }
public func NewQTextBlockGroup(document: QTextDocument_ITF? = nil) -> QTextBlockGroup { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.NewQTextBlockGroup", "", document as Any]) as! QTextBlockGroup }
public protocol QTextBlockUserData_ITF {
    func QTextBlockUserData_PTR() -> QTextBlockUserData
}

public class QTextBlockUserData: Internal, QTextBlockUserData_ITF {
    public func QTextBlockUserData_PTR() -> QTextBlockUserData { callLocalFunction(l: ["", Pointer(), ___className, "QTextBlockUserData_PTR"]) as! QTextBlockUserData }
    public func ConnectDestroyQTextBlockUserData(f: @escaping () -> Void) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectDestroyQTextBlockUserData", "___REMOTE_CALLBACK___"], f: { (_: [Any]) -> Any in f() } as Any) }
    public func DisconnectDestroyQTextBlockUserData() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectDestroyQTextBlockUserData"]) }
    public func DestroyQTextBlockUserData() { _ = callLocalFunction(l: ["", Pointer(), ___className, "DestroyQTextBlockUserData"]) }
    public func DestroyQTextBlockUserDataDefault() { _ = callLocalFunction(l: ["", Pointer(), ___className, "DestroyQTextBlockUserDataDefault"]) }
}

public func NewQTextBlockUserDataFromPointer(ptr: String) -> QTextBlockUserData { let r = QTextBlockUserData(); r.initFrom(p: ptr, n: "gui.QTextBlockUserData"); return r }
public protocol QTextCharFormat_ITF: QTextFormat_ITF {
    func QTextCharFormat_PTR() -> QTextCharFormat
}

public class QTextCharFormat: QTextFormat, QTextCharFormat_ITF {
    public func QTextCharFormat_PTR() -> QTextCharFormat { callLocalFunction(l: ["", Pointer(), ___className, "QTextCharFormat_PTR"]) as! QTextCharFormat }
    public func DestroyQTextCharFormat() { _ = callLocalFunction(l: ["", Pointer(), ___className, "DestroyQTextCharFormat"]) }
    public func AnchorHref() -> String { callLocalFunction(l: ["", Pointer(), ___className, "AnchorHref"]) as! String }
    public func AnchorNames() -> [String] { callLocalFunction(l: ["", Pointer(), ___className, "AnchorNames"]) as! [String] }
    public func Font() -> QFont { callLocalFunction(l: ["", Pointer(), ___className, "Font"]) as! QFont }
    public func FontCapitalization() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "FontCapitalization"]) as! Float) }
    public func FontFamilies() -> QVariant { callLocalFunction(l: ["", Pointer(), ___className, "FontFamilies"]) as! QVariant }
    public func FontFamily() -> String { callLocalFunction(l: ["", Pointer(), ___className, "FontFamily"]) as! String }
    public func FontFixedPitch() -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "FontFixedPitch"]) as! Bool }
    public func FontHintingPreference() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "FontHintingPreference"]) as! Float) }
    public func FontItalic() -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "FontItalic"]) as! Bool }
    public func FontKerning() -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "FontKerning"]) as! Bool }
    public func FontLetterSpacing() -> Float { callLocalFunction(l: ["", Pointer(), ___className, "FontLetterSpacing"]) as! Float }
    public func FontLetterSpacingType() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "FontLetterSpacingType"]) as! Float) }
    public func FontOverline() -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "FontOverline"]) as! Bool }
    public func FontPointSize() -> Float { callLocalFunction(l: ["", Pointer(), ___className, "FontPointSize"]) as! Float }
    public func FontStretch() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "FontStretch"]) as! Float) }
    public func FontStrikeOut() -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "FontStrikeOut"]) as! Bool }
    public func FontStyleHint() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "FontStyleHint"]) as! Float) }
    public func FontStyleName() -> QVariant { callLocalFunction(l: ["", Pointer(), ___className, "FontStyleName"]) as! QVariant }
    public func FontStyleStrategy() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "FontStyleStrategy"]) as! Float) }
    public func FontUnderline() -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "FontUnderline"]) as! Bool }
    public func FontWeight() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "FontWeight"]) as! Float) }
    public func FontWordSpacing() -> Float { callLocalFunction(l: ["", Pointer(), ___className, "FontWordSpacing"]) as! Float }
    public func IsAnchor() -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "IsAnchor"]) as! Bool }
    public func SetAnchor(anchor: Bool) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetAnchor", anchor as Any]) }
    public func SetAnchorHref(value: String) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetAnchorHref", value as Any]) }
    public func SetAnchorNames(names: [String]) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetAnchorNames", names as Any]) }
    public func SetFont(font: QFont_ITF? = nil, behavior: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetFont", font as Any, behavior as Any]) }
    public func SetFont2(font: QFont_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetFont2", font as Any]) }
    public func SetFontCapitalization(capitalization: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetFontCapitalization", capitalization as Any]) }
    public func SetFontFamilies(families: [String]) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetFontFamilies", families as Any]) }
    public func SetFontFamily(family: String) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetFontFamily", family as Any]) }
    public func SetFontFixedPitch(fixedPitch: Bool) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetFontFixedPitch", fixedPitch as Any]) }
    public func SetFontHintingPreference(hintingPreference: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetFontHintingPreference", hintingPreference as Any]) }
    public func SetFontItalic(italic: Bool) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetFontItalic", italic as Any]) }
    public func SetFontKerning(enable: Bool) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetFontKerning", enable as Any]) }
    public func SetFontLetterSpacing(spacing: Float) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetFontLetterSpacing", spacing as Any]) }
    public func SetFontLetterSpacingType(letterSpacingType: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetFontLetterSpacingType", letterSpacingType as Any]) }
    public func SetFontOverline(overline: Bool) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetFontOverline", overline as Any]) }
    public func SetFontPointSize(size: Float) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetFontPointSize", size as Any]) }
    public func SetFontStretch(factor: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetFontStretch", factor as Any]) }
    public func SetFontStrikeOut(strikeOut: Bool) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetFontStrikeOut", strikeOut as Any]) }
    public func SetFontStyleHint(hint: Int, strategy: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetFontStyleHint", hint as Any, strategy as Any]) }
    public func SetFontStyleName(styleName: String) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetFontStyleName", styleName as Any]) }
    public func SetFontStyleStrategy(strategy: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetFontStyleStrategy", strategy as Any]) }
    public func SetFontUnderline(underline: Bool) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetFontUnderline", underline as Any]) }
    public func SetFontWeight(weight: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetFontWeight", weight as Any]) }
    public func SetFontWordSpacing(spacing: Float) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetFontWordSpacing", spacing as Any]) }
    public func SetTextOutline(pen: QPen_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetTextOutline", pen as Any]) }
    public func SetToolTip(text: String) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetToolTip", text as Any]) }
    public func SetUnderlineColor(color: QColor_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetUnderlineColor", color as Any]) }
    public func SetUnderlineStyle(style: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetUnderlineStyle", style as Any]) }
    public func SetVerticalAlignment(alignment: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetVerticalAlignment", alignment as Any]) }
    public func TextOutline() -> QPen { callLocalFunction(l: ["", Pointer(), ___className, "TextOutline"]) as! QPen }
    public func ToolTip() -> String { callLocalFunction(l: ["", Pointer(), ___className, "ToolTip"]) as! String }
    public func UnderlineColor() -> QColor { callLocalFunction(l: ["", Pointer(), ___className, "UnderlineColor"]) as! QColor }
    public func UnderlineStyle() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "UnderlineStyle"]) as! Float) }
    public func VerticalAlignment() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "VerticalAlignment"]) as! Float) }
}

public func NewQTextCharFormatFromPointer(ptr: String) -> QTextCharFormat { let r = QTextCharFormat(); r.initFrom(p: ptr, n: "gui.QTextCharFormat"); return r }
public func NewQTextCharFormat() -> QTextCharFormat { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.NewQTextCharFormat", ""]) as! QTextCharFormat }
public protocol QTextCursor_ITF {
    func QTextCursor_PTR() -> QTextCursor
}

public class QTextCursor: Internal, QTextCursor_ITF {
    public func QTextCursor_PTR() -> QTextCursor { callLocalFunction(l: ["", Pointer(), ___className, "QTextCursor_PTR"]) as! QTextCursor }
    public func Anchor() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "Anchor"]) as! Float) }
    public func AtBlockEnd() -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "AtBlockEnd"]) as! Bool }
    public func AtBlockStart() -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "AtBlockStart"]) as! Bool }
    public func AtEnd() -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "AtEnd"]) as! Bool }
    public func AtStart() -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "AtStart"]) as! Bool }
    public func BeginEditBlock() { _ = callLocalFunction(l: ["", Pointer(), ___className, "BeginEditBlock"]) }
    public func Block() -> QTextBlock { callLocalFunction(l: ["", Pointer(), ___className, "Block"]) as! QTextBlock }
    public func BlockCharFormat() -> QTextCharFormat { callLocalFunction(l: ["", Pointer(), ___className, "BlockCharFormat"]) as! QTextCharFormat }
    public func BlockFormat() -> QTextBlockFormat { callLocalFunction(l: ["", Pointer(), ___className, "BlockFormat"]) as! QTextBlockFormat }
    public func BlockNumber() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "BlockNumber"]) as! Float) }
    public func CharFormat() -> QTextCharFormat { callLocalFunction(l: ["", Pointer(), ___className, "CharFormat"]) as! QTextCharFormat }
    public func ClearSelection() { _ = callLocalFunction(l: ["", Pointer(), ___className, "ClearSelection"]) }
    public func ColumnNumber() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "ColumnNumber"]) as! Float) }
    public func CreateList(format: QTextListFormat_ITF? = nil) -> QTextList { callLocalFunction(l: ["", Pointer(), ___className, "CreateList", format as Any]) as! QTextList }
    public func CreateList2(style: Int) -> QTextList { callLocalFunction(l: ["", Pointer(), ___className, "CreateList2", style as Any]) as! QTextList }
    public func CurrentFrame() -> QTextFrame { callLocalFunction(l: ["", Pointer(), ___className, "CurrentFrame"]) as! QTextFrame }
    public func CurrentList() -> QTextList { callLocalFunction(l: ["", Pointer(), ___className, "CurrentList"]) as! QTextList }
    public func CurrentTable() -> QTextTable { callLocalFunction(l: ["", Pointer(), ___className, "CurrentTable"]) as! QTextTable }
    public func DeleteChar() { _ = callLocalFunction(l: ["", Pointer(), ___className, "DeleteChar"]) }
    public func DeletePreviousChar() { _ = callLocalFunction(l: ["", Pointer(), ___className, "DeletePreviousChar"]) }
    public func Document() -> QTextDocument { callLocalFunction(l: ["", Pointer(), ___className, "Document"]) as! QTextDocument }
    public func EndEditBlock() { _ = callLocalFunction(l: ["", Pointer(), ___className, "EndEditBlock"]) }
    public func HasComplexSelection() -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "HasComplexSelection"]) as! Bool }
    public func HasSelection() -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "HasSelection"]) as! Bool }
    public func InsertBlock() { _ = callLocalFunction(l: ["", Pointer(), ___className, "InsertBlock"]) }
    public func InsertBlock2(format: QTextBlockFormat_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "InsertBlock2", format as Any]) }
    public func InsertBlock3(format: QTextBlockFormat_ITF? = nil, charFormat: QTextCharFormat_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "InsertBlock3", format as Any, charFormat as Any]) }
    public func InsertFragment(fragment: QTextDocumentFragment_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "InsertFragment", fragment as Any]) }
    public func InsertFrame(format: QTextFrameFormat_ITF? = nil) -> QTextFrame { callLocalFunction(l: ["", Pointer(), ___className, "InsertFrame", format as Any]) as! QTextFrame }
    public func InsertHtml(html: String) { _ = callLocalFunction(l: ["", Pointer(), ___className, "InsertHtml", html as Any]) }
    public func InsertImage(format: QTextImageFormat_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "InsertImage", format as Any]) }
    public func InsertImage2(format: QTextImageFormat_ITF? = nil, alignment: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "InsertImage2", format as Any, alignment as Any]) }
    public func InsertImage3(name: String) { _ = callLocalFunction(l: ["", Pointer(), ___className, "InsertImage3", name as Any]) }
    public func InsertImage4(image: QImage_ITF? = nil, name: String) { _ = callLocalFunction(l: ["", Pointer(), ___className, "InsertImage4", image as Any, name as Any]) }
    public func InsertList(format: QTextListFormat_ITF? = nil) -> QTextList { callLocalFunction(l: ["", Pointer(), ___className, "InsertList", format as Any]) as! QTextList }
    public func InsertList2(style: Int) -> QTextList { callLocalFunction(l: ["", Pointer(), ___className, "InsertList2", style as Any]) as! QTextList }
    public func InsertTable(rows: Int, columns: Int, format: QTextTableFormat_ITF? = nil) -> QTextTable { callLocalFunction(l: ["", Pointer(), ___className, "InsertTable", rows as Any, columns as Any, format as Any]) as! QTextTable }
    public func InsertTable2(rows: Int, columns: Int) -> QTextTable { callLocalFunction(l: ["", Pointer(), ___className, "InsertTable2", rows as Any, columns as Any]) as! QTextTable }
    public func InsertText(text: String) { _ = callLocalFunction(l: ["", Pointer(), ___className, "InsertText", text as Any]) }
    public func InsertText2(text: String, format: QTextCharFormat_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "InsertText2", text as Any, format as Any]) }
    public func IsCopyOf(other: QTextCursor_ITF? = nil) -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "IsCopyOf", other as Any]) as! Bool }
    public func IsNull() -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "IsNull"]) as! Bool }
    public func JoinPreviousEditBlock() { _ = callLocalFunction(l: ["", Pointer(), ___className, "JoinPreviousEditBlock"]) }
    public func KeepPositionOnInsert() -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "KeepPositionOnInsert"]) as! Bool }
    public func MergeBlockCharFormat(modifier: QTextCharFormat_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "MergeBlockCharFormat", modifier as Any]) }
    public func MergeBlockFormat(modifier: QTextBlockFormat_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "MergeBlockFormat", modifier as Any]) }
    public func MergeCharFormat(modifier: QTextCharFormat_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "MergeCharFormat", modifier as Any]) }
    public func MovePosition(operation: Int, mode: Int, n: Int) -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "MovePosition", operation as Any, mode as Any, n as Any]) as! Bool }
    public func Position() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "Position"]) as! Float) }
    public func PositionInBlock() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "PositionInBlock"]) as! Float) }
    public func RemoveSelectedText() { _ = callLocalFunction(l: ["", Pointer(), ___className, "RemoveSelectedText"]) }
    public func Select(selection: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "Select", selection as Any]) }
    public func SelectedTableCells(firstRow: Int, numRows: Int, firstColumn: Int, numColumns: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SelectedTableCells", firstRow as Any, numRows as Any, firstColumn as Any, numColumns as Any]) }
    public func SelectedText() -> String { callLocalFunction(l: ["", Pointer(), ___className, "SelectedText"]) as! String }
    public func Selection() -> QTextDocumentFragment { callLocalFunction(l: ["", Pointer(), ___className, "Selection"]) as! QTextDocumentFragment }
    public func SelectionEnd() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "SelectionEnd"]) as! Float) }
    public func SelectionStart() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "SelectionStart"]) as! Float) }
    public func SetBlockCharFormat(format: QTextCharFormat_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetBlockCharFormat", format as Any]) }
    public func SetBlockFormat(format: QTextBlockFormat_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetBlockFormat", format as Any]) }
    public func SetCharFormat(format: QTextCharFormat_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetCharFormat", format as Any]) }
    public func SetKeepPositionOnInsert(b: Bool) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetKeepPositionOnInsert", b as Any]) }
    public func SetPosition(pos: Int, m: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetPosition", pos as Any, m as Any]) }
    public func SetVerticalMovementX(x: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetVerticalMovementX", x as Any]) }
    public func SetVisualNavigation(b: Bool) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetVisualNavigation", b as Any]) }
    public func Swap(other: QTextCursor_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "Swap", other as Any]) }
    public func VerticalMovementX() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "VerticalMovementX"]) as! Float) }
    public func VisualNavigation() -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "VisualNavigation"]) as! Bool }
    public func DestroyQTextCursor() { _ = callLocalFunction(l: ["", Pointer(), ___className, "DestroyQTextCursor"]) }
}

public func NewQTextCursorFromPointer(ptr: String) -> QTextCursor { let r = QTextCursor(); r.initFrom(p: ptr, n: "gui.QTextCursor"); return r }
public func NewQTextCursor() -> QTextCursor { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.NewQTextCursor", ""]) as! QTextCursor }
public func NewQTextCursor2(document: QTextDocument_ITF? = nil) -> QTextCursor { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.NewQTextCursor2", "", document as Any]) as! QTextCursor }
public func NewQTextCursor3(frame: QTextFrame_ITF? = nil) -> QTextCursor { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.NewQTextCursor3", "", frame as Any]) as! QTextCursor }
public func NewQTextCursor4(block: QTextBlock_ITF? = nil) -> QTextCursor { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.NewQTextCursor4", "", block as Any]) as! QTextCursor }
public func NewQTextCursor5(cursor: QTextCursor_ITF? = nil) -> QTextCursor { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.NewQTextCursor5", "", cursor as Any]) as! QTextCursor }
public protocol QTextDocument_ITF: QObject_ITF {
    func QTextDocument_PTR() -> QTextDocument
}

public class QTextDocument: QObject, QTextDocument_ITF {
    public func QTextDocument_PTR() -> QTextDocument { callLocalFunction(l: ["", Pointer(), ___className, "QTextDocument_PTR"]) as! QTextDocument }
    public func AddResource(ty: Int, name: QUrl_ITF? = nil, resource: QVariant_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "AddResource", ty as Any, name as Any, resource as Any]) }
    public func AdjustSize() { _ = callLocalFunction(l: ["", Pointer(), ___className, "AdjustSize"]) }
    public func AllFormats() -> [QTextFormat] { callLocalFunction(l: ["", Pointer(), ___className, "AllFormats"]) as! [QTextFormat] }
    public func AvailableRedoSteps() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "AvailableRedoSteps"]) as! Float) }
    public func AvailableUndoSteps() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "AvailableUndoSteps"]) as! Float) }
    public func BaseUrl() -> QUrl { callLocalFunction(l: ["", Pointer(), ___className, "BaseUrl"]) as! QUrl }
    public func ConnectBaseUrlChanged(f: @escaping (_ url: QUrl) -> Void) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectBaseUrlChanged", "___REMOTE_CALLBACK___"], f: { (inp: [Any]) -> Any in f(inp[0] as! QUrl) } as Any) }
    public func DisconnectBaseUrlChanged() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectBaseUrlChanged"]) }
    public func BaseUrlChanged(url: QUrl_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "BaseUrlChanged", url as Any]) }
    public func Begin() -> QTextBlock { callLocalFunction(l: ["", Pointer(), ___className, "Begin"]) as! QTextBlock }
    public func BlockCount() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "BlockCount"]) as! Float) }
    public func ConnectBlockCountChanged(f: @escaping (_ newBlockCount: Int) -> Void) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectBlockCountChanged", "___REMOTE_CALLBACK___"], f: { (inp: [Any]) -> Any in f(Int(inp[0] as! Float)) } as Any) }
    public func DisconnectBlockCountChanged() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectBlockCountChanged"]) }
    public func BlockCountChanged(newBlockCount: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "BlockCountChanged", newBlockCount as Any]) }
    public func CharacterAt(pos: Int) -> QChar { callLocalFunction(l: ["", Pointer(), ___className, "CharacterAt", pos as Any]) as! QChar }
    public func CharacterCount() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "CharacterCount"]) as! Float) }
    public func ConnectClear(f: @escaping () -> Void) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectClear", "___REMOTE_CALLBACK___"], f: { (_: [Any]) -> Any in f() } as Any) }
    public func DisconnectClear() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectClear"]) }
    public func Clear() { _ = callLocalFunction(l: ["", Pointer(), ___className, "Clear"]) }
    public func ClearDefault() { _ = callLocalFunction(l: ["", Pointer(), ___className, "ClearDefault"]) }
    public func ClearUndoRedoStacks(stacksToClear: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "ClearUndoRedoStacks", stacksToClear as Any]) }
    public func Clone(parent: QObject_ITF? = nil) -> QTextDocument { callLocalFunction(l: ["", Pointer(), ___className, "Clone", parent as Any]) as! QTextDocument }
    public func ConnectContentsChange(f: @escaping (_ position: Int, _ charsRemoved: Int, _ charsAdded: Int) -> Void) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectContentsChange", "___REMOTE_CALLBACK___"], f: { (inp: [Any]) -> Any in f(Int(inp[0] as! Float), Int(inp[1] as! Float), Int(inp[2] as! Float)) } as Any) }
    public func DisconnectContentsChange() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectContentsChange"]) }
    public func ContentsChange(position: Int, charsRemoved: Int, charsAdded: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "ContentsChange", position as Any, charsRemoved as Any, charsAdded as Any]) }
    public func ConnectContentsChanged(f: @escaping () -> Void) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectContentsChanged", "___REMOTE_CALLBACK___"], f: { (_: [Any]) -> Any in f() } as Any) }
    public func DisconnectContentsChanged() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectContentsChanged"]) }
    public func ContentsChanged() { _ = callLocalFunction(l: ["", Pointer(), ___className, "ContentsChanged"]) }
    public func ConnectCreateObject(f: @escaping (_ format: QTextFormat) -> QTextObject) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectCreateObject", "___REMOTE_CALLBACK___"], f: { (inp: [Any]) -> Any in f(inp[0] as! QTextFormat) } as Any) }
    public func DisconnectCreateObject() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectCreateObject"]) }
    public func CreateObject(format: QTextFormat_ITF? = nil) -> QTextObject { callLocalFunction(l: ["", Pointer(), ___className, "CreateObject", format as Any]) as! QTextObject }
    public func CreateObjectDefault(format: QTextFormat_ITF? = nil) -> QTextObject { callLocalFunction(l: ["", Pointer(), ___className, "CreateObjectDefault", format as Any]) as! QTextObject }
    public func ConnectCursorPositionChanged(f: @escaping (_ cursor: QTextCursor) -> Void) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectCursorPositionChanged", "___REMOTE_CALLBACK___"], f: { (inp: [Any]) -> Any in f(inp[0] as! QTextCursor) } as Any) }
    public func DisconnectCursorPositionChanged() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectCursorPositionChanged"]) }
    public func CursorPositionChanged(cursor: QTextCursor_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "CursorPositionChanged", cursor as Any]) }
    public func DefaultCursorMoveStyle() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "DefaultCursorMoveStyle"]) as! Float) }
    public func DefaultFont() -> QFont { callLocalFunction(l: ["", Pointer(), ___className, "DefaultFont"]) as! QFont }
    public func DefaultStyleSheet() -> String { callLocalFunction(l: ["", Pointer(), ___className, "DefaultStyleSheet"]) as! String }
    public func DefaultTextOption() -> QTextOption { callLocalFunction(l: ["", Pointer(), ___className, "DefaultTextOption"]) as! QTextOption }
    public func DocumentLayout() -> QAbstractTextDocumentLayout { callLocalFunction(l: ["", Pointer(), ___className, "DocumentLayout"]) as! QAbstractTextDocumentLayout }
    public func ConnectDocumentLayoutChanged(f: @escaping () -> Void) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectDocumentLayoutChanged", "___REMOTE_CALLBACK___"], f: { (_: [Any]) -> Any in f() } as Any) }
    public func DisconnectDocumentLayoutChanged() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectDocumentLayoutChanged"]) }
    public func DocumentLayoutChanged() { _ = callLocalFunction(l: ["", Pointer(), ___className, "DocumentLayoutChanged"]) }
    public func DocumentMargin() -> Float { callLocalFunction(l: ["", Pointer(), ___className, "DocumentMargin"]) as! Float }
    public func DrawContents(p: QPainter_ITF? = nil, rect: QRectF_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "DrawContents", p as Any, rect as Any]) }
    public func End() -> QTextBlock { callLocalFunction(l: ["", Pointer(), ___className, "End"]) as! QTextBlock }
    public func Find(subString: String, cursor: QTextCursor_ITF? = nil, options: Int) -> QTextCursor { callLocalFunction(l: ["", Pointer(), ___className, "Find", subString as Any, cursor as Any, options as Any]) as! QTextCursor }
    public func Find2(subString: String, position: Int, options: Int) -> QTextCursor { callLocalFunction(l: ["", Pointer(), ___className, "Find2", subString as Any, position as Any, options as Any]) as! QTextCursor }
    public func Find3(expr: QRegExp_ITF? = nil, from: Int, options: Int) -> QTextCursor { callLocalFunction(l: ["", Pointer(), ___className, "Find3", expr as Any, from as Any, options as Any]) as! QTextCursor }
    public func Find4(expr: QRegExp_ITF? = nil, cursor: QTextCursor_ITF? = nil, options: Int) -> QTextCursor { callLocalFunction(l: ["", Pointer(), ___className, "Find4", expr as Any, cursor as Any, options as Any]) as! QTextCursor }
    public func Find5(expr: QRegularExpression_ITF? = nil, from: Int, options: Int) -> QTextCursor { callLocalFunction(l: ["", Pointer(), ___className, "Find5", expr as Any, from as Any, options as Any]) as! QTextCursor }
    public func Find6(expr: QRegularExpression_ITF? = nil, cursor: QTextCursor_ITF? = nil, options: Int) -> QTextCursor { callLocalFunction(l: ["", Pointer(), ___className, "Find6", expr as Any, cursor as Any, options as Any]) as! QTextCursor }
    public func FindBlock(pos: Int) -> QTextBlock { callLocalFunction(l: ["", Pointer(), ___className, "FindBlock", pos as Any]) as! QTextBlock }
    public func FindBlockByLineNumber(lineNumber: Int) -> QTextBlock { callLocalFunction(l: ["", Pointer(), ___className, "FindBlockByLineNumber", lineNumber as Any]) as! QTextBlock }
    public func FindBlockByNumber(blockNumber: Int) -> QTextBlock { callLocalFunction(l: ["", Pointer(), ___className, "FindBlockByNumber", blockNumber as Any]) as! QTextBlock }
    public func FirstBlock() -> QTextBlock { callLocalFunction(l: ["", Pointer(), ___className, "FirstBlock"]) as! QTextBlock }
    public func IdealWidth() -> Float { callLocalFunction(l: ["", Pointer(), ___className, "IdealWidth"]) as! Float }
    public func IndentWidth() -> Float { callLocalFunction(l: ["", Pointer(), ___className, "IndentWidth"]) as! Float }
    public func IsEmpty() -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "IsEmpty"]) as! Bool }
    public func IsModified() -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "IsModified"]) as! Bool }
    public func IsRedoAvailable() -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "IsRedoAvailable"]) as! Bool }
    public func IsUndoAvailable() -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "IsUndoAvailable"]) as! Bool }
    public func IsUndoRedoEnabled() -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "IsUndoRedoEnabled"]) as! Bool }
    public func LastBlock() -> QTextBlock { callLocalFunction(l: ["", Pointer(), ___className, "LastBlock"]) as! QTextBlock }
    public func LineCount() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "LineCount"]) as! Float) }
    public func ConnectLoadResource(f: @escaping (_ ty: Int, _ name: QUrl) -> QVariant) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectLoadResource", "___REMOTE_CALLBACK___"], f: { (inp: [Any]) -> Any in f(Int(inp[0] as! Float), inp[1] as! QUrl) } as Any) }
    public func DisconnectLoadResource() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectLoadResource"]) }
    public func LoadResource(ty: Int, name: QUrl_ITF? = nil) -> QVariant { callLocalFunction(l: ["", Pointer(), ___className, "LoadResource", ty as Any, name as Any]) as! QVariant }
    public func LoadResourceDefault(ty: Int, name: QUrl_ITF? = nil) -> QVariant { callLocalFunction(l: ["", Pointer(), ___className, "LoadResourceDefault", ty as Any, name as Any]) as! QVariant }
    public func MarkContentsDirty(position: Int, length: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "MarkContentsDirty", position as Any, length as Any]) }
    public func MaximumBlockCount() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "MaximumBlockCount"]) as! Float) }
    public func MetaInformation(info: Int) -> String { callLocalFunction(l: ["", Pointer(), ___className, "MetaInformation", info as Any]) as! String }
    public func ConnectModificationChanged(f: @escaping (_ changed: Bool) -> Void) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectModificationChanged", "___REMOTE_CALLBACK___"], f: { (inp: [Any]) -> Any in f(inp[0] as! Bool) } as Any) }
    public func DisconnectModificationChanged() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectModificationChanged"]) }
    public func ModificationChanged(changed: Bool) { _ = callLocalFunction(l: ["", Pointer(), ___className, "ModificationChanged", changed as Any]) }
    public func Object(objectIndex: Int) -> QTextObject { callLocalFunction(l: ["", Pointer(), ___className, "Object", objectIndex as Any]) as! QTextObject }
    public func ObjectForFormat(ff: QTextFormat_ITF? = nil) -> QTextObject { callLocalFunction(l: ["", Pointer(), ___className, "ObjectForFormat", ff as Any]) as! QTextObject }
    public func PageCount() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "PageCount"]) as! Float) }
    public func PageSize() -> QSizeF { callLocalFunction(l: ["", Pointer(), ___className, "PageSize"]) as! QSizeF }
    public func Print(printer: QPagedPaintDevice_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "Print", printer as Any]) }
    public func Redo(cursor: QTextCursor_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "Redo", cursor as Any]) }
    public func ConnectRedo2(f: @escaping () -> Void) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectRedo2", "___REMOTE_CALLBACK___"], f: { (_: [Any]) -> Any in f() } as Any) }
    public func DisconnectRedo2() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectRedo2"]) }
    public func Redo2() { _ = callLocalFunction(l: ["", Pointer(), ___className, "Redo2"]) }
    public func Redo2Default() { _ = callLocalFunction(l: ["", Pointer(), ___className, "Redo2Default"]) }
    public func ConnectRedoAvailable(f: @escaping (_ available: Bool) -> Void) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectRedoAvailable", "___REMOTE_CALLBACK___"], f: { (inp: [Any]) -> Any in f(inp[0] as! Bool) } as Any) }
    public func DisconnectRedoAvailable() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectRedoAvailable"]) }
    public func RedoAvailable(available: Bool) { _ = callLocalFunction(l: ["", Pointer(), ___className, "RedoAvailable", available as Any]) }
    public func Resource(ty: Int, name: QUrl_ITF? = nil) -> QVariant { callLocalFunction(l: ["", Pointer(), ___className, "Resource", ty as Any, name as Any]) as! QVariant }
    public func Revision() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "Revision"]) as! Float) }
    public func RootFrame() -> QTextFrame { callLocalFunction(l: ["", Pointer(), ___className, "RootFrame"]) as! QTextFrame }
    public func SetBaseUrl(url: QUrl_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetBaseUrl", url as Any]) }
    public func SetDefaultCursorMoveStyle(style: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetDefaultCursorMoveStyle", style as Any]) }
    public func SetDefaultFont(font: QFont_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetDefaultFont", font as Any]) }
    public func SetDefaultStyleSheet(sheet: String) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetDefaultStyleSheet", sheet as Any]) }
    public func SetDefaultTextOption(option: QTextOption_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetDefaultTextOption", option as Any]) }
    public func SetDocumentLayout(layout: QAbstractTextDocumentLayout_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetDocumentLayout", layout as Any]) }
    public func SetDocumentMargin(margi: Float) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetDocumentMargin", margi as Any]) }
    public func SetHtml(html: String) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetHtml", html as Any]) }
    public func SetIndentWidth(width: Float) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetIndentWidth", width as Any]) }
    public func SetMaximumBlockCount(maximum: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetMaximumBlockCount", maximum as Any]) }
    public func SetMetaInformation(info: Int, stri: String) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetMetaInformation", info as Any, stri as Any]) }
    public func ConnectSetModified(f: @escaping (_ m: Bool) -> Void) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectSetModified", "___REMOTE_CALLBACK___"], f: { (inp: [Any]) -> Any in f(inp[0] as! Bool) } as Any) }
    public func DisconnectSetModified() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectSetModified"]) }
    public func SetModified(m: Bool) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetModified", m as Any]) }
    public func SetModifiedDefault(m: Bool) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetModifiedDefault", m as Any]) }
    public func SetPageSize(size: QSizeF_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetPageSize", size as Any]) }
    public func SetPlainText(text: String) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetPlainText", text as Any]) }
    public func SetTextWidth(width: Float) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetTextWidth", width as Any]) }
    public func SetUndoRedoEnabled(enable: Bool) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetUndoRedoEnabled", enable as Any]) }
    public func SetUseDesignMetrics(b: Bool) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetUseDesignMetrics", b as Any]) }
    public func Size() -> QSizeF { callLocalFunction(l: ["", Pointer(), ___className, "Size"]) as! QSizeF }
    public func TextWidth() -> Float { callLocalFunction(l: ["", Pointer(), ___className, "TextWidth"]) as! Float }
    public func ToHtml(encoding: QByteArray_ITF? = nil) -> String { callLocalFunction(l: ["", Pointer(), ___className, "ToHtml", encoding as Any]) as! String }
    public func ToPlainText() -> String { callLocalFunction(l: ["", Pointer(), ___className, "ToPlainText"]) as! String }
    public func ToRawText() -> String { callLocalFunction(l: ["", Pointer(), ___className, "ToRawText"]) as! String }
    public func Undo(cursor: QTextCursor_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "Undo", cursor as Any]) }
    public func ConnectUndo2(f: @escaping () -> Void) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectUndo2", "___REMOTE_CALLBACK___"], f: { (_: [Any]) -> Any in f() } as Any) }
    public func DisconnectUndo2() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectUndo2"]) }
    public func Undo2() { _ = callLocalFunction(l: ["", Pointer(), ___className, "Undo2"]) }
    public func Undo2Default() { _ = callLocalFunction(l: ["", Pointer(), ___className, "Undo2Default"]) }
    public func ConnectUndoAvailable(f: @escaping (_ available: Bool) -> Void) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectUndoAvailable", "___REMOTE_CALLBACK___"], f: { (inp: [Any]) -> Any in f(inp[0] as! Bool) } as Any) }
    public func DisconnectUndoAvailable() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectUndoAvailable"]) }
    public func UndoAvailable(available: Bool) { _ = callLocalFunction(l: ["", Pointer(), ___className, "UndoAvailable", available as Any]) }
    public func ConnectUndoCommandAdded(f: @escaping () -> Void) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectUndoCommandAdded", "___REMOTE_CALLBACK___"], f: { (_: [Any]) -> Any in f() } as Any) }
    public func DisconnectUndoCommandAdded() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectUndoCommandAdded"]) }
    public func UndoCommandAdded() { _ = callLocalFunction(l: ["", Pointer(), ___className, "UndoCommandAdded"]) }
    public func UseDesignMetrics() -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "UseDesignMetrics"]) as! Bool }
    public func ConnectDestroyQTextDocument(f: @escaping () -> Void) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectDestroyQTextDocument", "___REMOTE_CALLBACK___"], f: { (_: [Any]) -> Any in f() } as Any) }
    public func DisconnectDestroyQTextDocument() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectDestroyQTextDocument"]) }
    public func DestroyQTextDocument() { _ = callLocalFunction(l: ["", Pointer(), ___className, "DestroyQTextDocument"]) }
    public func DestroyQTextDocumentDefault() { _ = callLocalFunction(l: ["", Pointer(), ___className, "DestroyQTextDocumentDefault"]) }
    override public func ChildEventDefault(event: QChildEvent_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "ChildEventDefault", event as Any]) }
    override public func ConnectNotifyDefault(sign: QMetaMethod_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "ConnectNotifyDefault", sign as Any]) }
    override public func CustomEventDefault(event: QEvent_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "CustomEventDefault", event as Any]) }
    override public func DeleteLaterDefault() { _ = callLocalFunction(l: ["", Pointer(), ___className, "DeleteLaterDefault"]) }
    override public func DisconnectNotifyDefault(sign: QMetaMethod_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "DisconnectNotifyDefault", sign as Any]) }
    override public func EventDefault(e: QEvent_ITF? = nil) -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "EventDefault", e as Any]) as! Bool }
    override public func EventFilterDefault(watched: QObject_ITF? = nil, event: QEvent_ITF? = nil) -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "EventFilterDefault", watched as Any, event as Any]) as! Bool }
    override public func MetaObjectDefault() -> QMetaObject { callLocalFunction(l: ["", Pointer(), ___className, "MetaObjectDefault"]) as! QMetaObject }
    override public func TimerEventDefault(event: QTimerEvent_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "TimerEventDefault", event as Any]) }
}

public func NewQTextDocumentFromPointer(ptr: String) -> QTextDocument { let r = QTextDocument(); r.initFrom(p: ptr, n: "gui.QTextDocument"); return r }
public func NewQTextDocument(parent: QObject_ITF? = nil) -> QTextDocument { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.NewQTextDocument", "", parent as Any]) as! QTextDocument }
public func NewQTextDocument2(text: String, parent: QObject_ITF? = nil) -> QTextDocument { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.NewQTextDocument2", "", text as Any, parent as Any]) as! QTextDocument }
public protocol QTextDocumentFragment_ITF {
    func QTextDocumentFragment_PTR() -> QTextDocumentFragment
}

public class QTextDocumentFragment: Internal, QTextDocumentFragment_ITF {
    public func QTextDocumentFragment_PTR() -> QTextDocumentFragment { callLocalFunction(l: ["", Pointer(), ___className, "QTextDocumentFragment_PTR"]) as! QTextDocumentFragment }
    public func FromHtml(text: String) -> QTextDocumentFragment { callLocalFunction(l: ["", Pointer(), ___className, "FromHtml", text as Any]) as! QTextDocumentFragment }
    public func FromHtml2(text: String, resourceProvider: QTextDocument_ITF? = nil) -> QTextDocumentFragment { callLocalFunction(l: ["", Pointer(), ___className, "FromHtml2", text as Any, resourceProvider as Any]) as! QTextDocumentFragment }
    public func FromPlainText(plainText: String) -> QTextDocumentFragment { callLocalFunction(l: ["", Pointer(), ___className, "FromPlainText", plainText as Any]) as! QTextDocumentFragment }
    public func IsEmpty() -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "IsEmpty"]) as! Bool }
    public func ToHtml(encoding: QByteArray_ITF? = nil) -> String { callLocalFunction(l: ["", Pointer(), ___className, "ToHtml", encoding as Any]) as! String }
    public func ToPlainText() -> String { callLocalFunction(l: ["", Pointer(), ___className, "ToPlainText"]) as! String }
    public func DestroyQTextDocumentFragment() { _ = callLocalFunction(l: ["", Pointer(), ___className, "DestroyQTextDocumentFragment"]) }
}

public func NewQTextDocumentFragmentFromPointer(ptr: String) -> QTextDocumentFragment { let r = QTextDocumentFragment(); r.initFrom(p: ptr, n: "gui.QTextDocumentFragment"); return r }
public func NewQTextDocumentFragment() -> QTextDocumentFragment { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.NewQTextDocumentFragment", ""]) as! QTextDocumentFragment }
public func NewQTextDocumentFragment2(document: QTextDocument_ITF? = nil) -> QTextDocumentFragment { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.NewQTextDocumentFragment2", "", document as Any]) as! QTextDocumentFragment }
public func NewQTextDocumentFragment3(cursor: QTextCursor_ITF? = nil) -> QTextDocumentFragment { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.NewQTextDocumentFragment3", "", cursor as Any]) as! QTextDocumentFragment }
public func NewQTextDocumentFragment4(other: QTextDocumentFragment_ITF? = nil) -> QTextDocumentFragment { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.NewQTextDocumentFragment4", "", other as Any]) as! QTextDocumentFragment }
public func QTextDocumentFragment_FromHtml(text: String) -> QTextDocumentFragment { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.QTextDocumentFragment_FromHtml", "", text as Any]) as! QTextDocumentFragment }
public func QTextDocumentFragment_FromHtml2(text: String, resourceProvider: QTextDocument_ITF? = nil) -> QTextDocumentFragment { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.QTextDocumentFragment_FromHtml2", "", text as Any, resourceProvider as Any]) as! QTextDocumentFragment }
public func QTextDocumentFragment_FromPlainText(plainText: String) -> QTextDocumentFragment { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.QTextDocumentFragment_FromPlainText", "", plainText as Any]) as! QTextDocumentFragment }
public protocol QTextDocumentWriter_ITF {
    func QTextDocumentWriter_PTR() -> QTextDocumentWriter
}

public class QTextDocumentWriter: Internal, QTextDocumentWriter_ITF {
    public func QTextDocumentWriter_PTR() -> QTextDocumentWriter { callLocalFunction(l: ["", Pointer(), ___className, "QTextDocumentWriter_PTR"]) as! QTextDocumentWriter }
    public func Codec() -> QTextCodec { callLocalFunction(l: ["", Pointer(), ___className, "Codec"]) as! QTextCodec }
    public func Device() -> QIODevice { callLocalFunction(l: ["", Pointer(), ___className, "Device"]) as! QIODevice }
    public func FileName() -> String { callLocalFunction(l: ["", Pointer(), ___className, "FileName"]) as! String }
    public func Format() -> QByteArray { callLocalFunction(l: ["", Pointer(), ___className, "Format"]) as! QByteArray }
    public func SetCodec(codec: QTextCodec_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetCodec", codec as Any]) }
    public func SetDevice(device: QIODevice_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetDevice", device as Any]) }
    public func SetFileName(fileName: String) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetFileName", fileName as Any]) }
    public func SetFormat(format: QByteArray_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetFormat", format as Any]) }
    public func SupportedDocumentFormats() -> [QByteArray] { callLocalFunction(l: ["", Pointer(), ___className, "SupportedDocumentFormats"]) as! [QByteArray] }
    public func Write(document: QTextDocument_ITF? = nil) -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "Write", document as Any]) as! Bool }
    public func Write2(fragment: QTextDocumentFragment_ITF? = nil) -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "Write2", fragment as Any]) as! Bool }
    public func DestroyQTextDocumentWriter() { _ = callLocalFunction(l: ["", Pointer(), ___className, "DestroyQTextDocumentWriter"]) }
}

public func NewQTextDocumentWriterFromPointer(ptr: String) -> QTextDocumentWriter { let r = QTextDocumentWriter(); r.initFrom(p: ptr, n: "gui.QTextDocumentWriter"); return r }
public func NewQTextDocumentWriter() -> QTextDocumentWriter { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.NewQTextDocumentWriter", ""]) as! QTextDocumentWriter }
public func NewQTextDocumentWriter2(device: QIODevice_ITF? = nil, format: QByteArray_ITF? = nil) -> QTextDocumentWriter { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.NewQTextDocumentWriter2", "", device as Any, format as Any]) as! QTextDocumentWriter }
public func NewQTextDocumentWriter3(fileName: String, format: QByteArray_ITF? = nil) -> QTextDocumentWriter { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.NewQTextDocumentWriter3", "", fileName as Any, format as Any]) as! QTextDocumentWriter }
public func QTextDocumentWriter_SupportedDocumentFormats() -> [QByteArray] { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.QTextDocumentWriter_SupportedDocumentFormats", ""]) as! [QByteArray] }
public protocol QTextFormat_ITF {
    func QTextFormat_PTR() -> QTextFormat
}

public class QTextFormat: Internal, QTextFormat_ITF {
    public func QTextFormat_PTR() -> QTextFormat { callLocalFunction(l: ["", Pointer(), ___className, "QTextFormat_PTR"]) as! QTextFormat }
    public func Background() -> QBrush { callLocalFunction(l: ["", Pointer(), ___className, "Background"]) as! QBrush }
    public func BoolProperty(propertyId: Int) -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "BoolProperty", propertyId as Any]) as! Bool }
    public func BrushProperty(propertyId: Int) -> QBrush { callLocalFunction(l: ["", Pointer(), ___className, "BrushProperty", propertyId as Any]) as! QBrush }
    public func ClearBackground() { _ = callLocalFunction(l: ["", Pointer(), ___className, "ClearBackground"]) }
    public func ClearForeground() { _ = callLocalFunction(l: ["", Pointer(), ___className, "ClearForeground"]) }
    public func ClearProperty(propertyId: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "ClearProperty", propertyId as Any]) }
    public func ColorProperty(propertyId: Int) -> QColor { callLocalFunction(l: ["", Pointer(), ___className, "ColorProperty", propertyId as Any]) as! QColor }
    public func DoubleProperty(propertyId: Int) -> Float { callLocalFunction(l: ["", Pointer(), ___className, "DoubleProperty", propertyId as Any]) as! Float }
    public func Foreground() -> QBrush { callLocalFunction(l: ["", Pointer(), ___className, "Foreground"]) as! QBrush }
    public func HasProperty(propertyId: Int) -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "HasProperty", propertyId as Any]) as! Bool }
    public func IntProperty(propertyId: Int) -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "IntProperty", propertyId as Any]) as! Float) }
    public func IsBlockFormat() -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "IsBlockFormat"]) as! Bool }
    public func IsCharFormat() -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "IsCharFormat"]) as! Bool }
    public func IsEmpty() -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "IsEmpty"]) as! Bool }
    public func IsFrameFormat() -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "IsFrameFormat"]) as! Bool }
    public func IsImageFormat() -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "IsImageFormat"]) as! Bool }
    public func IsListFormat() -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "IsListFormat"]) as! Bool }
    public func IsTableCellFormat() -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "IsTableCellFormat"]) as! Bool }
    public func IsTableFormat() -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "IsTableFormat"]) as! Bool }
    public func IsValid() -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "IsValid"]) as! Bool }
    public func LayoutDirection() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "LayoutDirection"]) as! Float) }
    public func LengthProperty(propertyId: Int) -> QTextLength { callLocalFunction(l: ["", Pointer(), ___className, "LengthProperty", propertyId as Any]) as! QTextLength }
    public func Merge(other: QTextFormat_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "Merge", other as Any]) }
    public func ObjectIndex() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "ObjectIndex"]) as! Float) }
    public func ObjectType() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "ObjectType"]) as! Float) }
    public func PenProperty(propertyId: Int) -> QPen { callLocalFunction(l: ["", Pointer(), ___className, "PenProperty", propertyId as Any]) as! QPen }
    public func Properties() -> [Int: QVariant] { callLocalFunction(l: ["", Pointer(), ___className, "Properties"]) as! [Int: QVariant] }
    public func Property(propertyId: Int) -> QVariant { callLocalFunction(l: ["", Pointer(), ___className, "Property", propertyId as Any]) as! QVariant }
    public func PropertyCount() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "PropertyCount"]) as! Float) }
    public func SetBackground(brush: QBrush_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetBackground", brush as Any]) }
    public func SetForeground(brush: QBrush_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetForeground", brush as Any]) }
    public func SetLayoutDirection(direction: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetLayoutDirection", direction as Any]) }
    public func SetObjectIndex(index: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetObjectIndex", index as Any]) }
    public func SetObjectType(ty: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetObjectType", ty as Any]) }
    public func SetProperty(propertyId: Int, value: QVariant_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetProperty", propertyId as Any, value as Any]) }
    public func SetProperty2(propertyId: Int, value: [QTextLength]) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetProperty2", propertyId as Any, value as Any]) }
    public func StringProperty(propertyId: Int) -> String { callLocalFunction(l: ["", Pointer(), ___className, "StringProperty", propertyId as Any]) as! String }
    public func Swap(other: QTextFormat_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "Swap", other as Any]) }
    public func ToBlockFormat() -> QTextBlockFormat { callLocalFunction(l: ["", Pointer(), ___className, "ToBlockFormat"]) as! QTextBlockFormat }
    public func ToCharFormat() -> QTextCharFormat { callLocalFunction(l: ["", Pointer(), ___className, "ToCharFormat"]) as! QTextCharFormat }
    public func ToFrameFormat() -> QTextFrameFormat { callLocalFunction(l: ["", Pointer(), ___className, "ToFrameFormat"]) as! QTextFrameFormat }
    public func ToImageFormat() -> QTextImageFormat { callLocalFunction(l: ["", Pointer(), ___className, "ToImageFormat"]) as! QTextImageFormat }
    public func ToListFormat() -> QTextListFormat { callLocalFunction(l: ["", Pointer(), ___className, "ToListFormat"]) as! QTextListFormat }
    public func ToTableCellFormat() -> QTextTableCellFormat { callLocalFunction(l: ["", Pointer(), ___className, "ToTableCellFormat"]) as! QTextTableCellFormat }
    public func ToTableFormat() -> QTextTableFormat { callLocalFunction(l: ["", Pointer(), ___className, "ToTableFormat"]) as! QTextTableFormat }
    public func Type() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "Type"]) as! Float) }
    public func DestroyQTextFormat() { _ = callLocalFunction(l: ["", Pointer(), ___className, "DestroyQTextFormat"]) }
}

public func NewQTextFormatFromPointer(ptr: String) -> QTextFormat { let r = QTextFormat(); r.initFrom(p: ptr, n: "gui.QTextFormat"); return r }
public func NewQTextFormat() -> QTextFormat { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.NewQTextFormat", ""]) as! QTextFormat }
public func NewQTextFormat2(ty: Int) -> QTextFormat { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.NewQTextFormat2", "", ty as Any]) as! QTextFormat }
public func NewQTextFormat3(other: QTextFormat_ITF? = nil) -> QTextFormat { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.NewQTextFormat3", "", other as Any]) as! QTextFormat }
public protocol QTextFragment_ITF {
    func QTextFragment_PTR() -> QTextFragment
}

public class QTextFragment: Internal, QTextFragment_ITF {
    public func QTextFragment_PTR() -> QTextFragment { callLocalFunction(l: ["", Pointer(), ___className, "QTextFragment_PTR"]) as! QTextFragment }
    public func DestroyQTextFragment() { _ = callLocalFunction(l: ["", Pointer(), ___className, "DestroyQTextFragment"]) }
    public func CharFormat() -> QTextCharFormat { callLocalFunction(l: ["", Pointer(), ___className, "CharFormat"]) as! QTextCharFormat }
    public func CharFormatIndex() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "CharFormatIndex"]) as! Float) }
    public func Contains(position: Int) -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "Contains", position as Any]) as! Bool }
    public func GlyphRuns(pos: Int, l: Int) -> [QGlyphRun] { callLocalFunction(l: ["", Pointer(), ___className, "GlyphRuns", pos as Any, l as Any]) as! [QGlyphRun] }
    public func IsValid() -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "IsValid"]) as! Bool }
    public func Length() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "Length"]) as! Float) }
    public func Position() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "Position"]) as! Float) }
    public func Text() -> String { callLocalFunction(l: ["", Pointer(), ___className, "Text"]) as! String }
}

public func NewQTextFragmentFromPointer(ptr: String) -> QTextFragment { let r = QTextFragment(); r.initFrom(p: ptr, n: "gui.QTextFragment"); return r }
public func NewQTextFragment2() -> QTextFragment { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.NewQTextFragment2", ""]) as! QTextFragment }
public func NewQTextFragment3(other: QTextFragment_ITF? = nil) -> QTextFragment { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.NewQTextFragment3", "", other as Any]) as! QTextFragment }
public protocol QTextFrame_ITF: QTextObject_ITF {
    func QTextFrame_PTR() -> QTextFrame
}

public class QTextFrame: QTextObject, QTextFrame_ITF {
    public func QTextFrame_PTR() -> QTextFrame { callLocalFunction(l: ["", Pointer(), ___className, "QTextFrame_PTR"]) as! QTextFrame }
    public func ChildFrames() -> [QTextFrame] { callLocalFunction(l: ["", Pointer(), ___className, "ChildFrames"]) as! [QTextFrame] }
    public func FirstCursorPosition() -> QTextCursor { callLocalFunction(l: ["", Pointer(), ___className, "FirstCursorPosition"]) as! QTextCursor }
    public func FirstPosition() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "FirstPosition"]) as! Float) }
    public func FrameFormat() -> QTextFrameFormat { callLocalFunction(l: ["", Pointer(), ___className, "FrameFormat"]) as! QTextFrameFormat }
    public func LastCursorPosition() -> QTextCursor { callLocalFunction(l: ["", Pointer(), ___className, "LastCursorPosition"]) as! QTextCursor }
    public func LastPosition() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "LastPosition"]) as! Float) }
    public func ParentFrame() -> QTextFrame { callLocalFunction(l: ["", Pointer(), ___className, "ParentFrame"]) as! QTextFrame }
    public func SetFrameFormat(format: QTextFrameFormat_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetFrameFormat", format as Any]) }
    public func ConnectDestroyQTextFrame(f: @escaping () -> Void) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectDestroyQTextFrame", "___REMOTE_CALLBACK___"], f: { (_: [Any]) -> Any in f() } as Any) }
    public func DisconnectDestroyQTextFrame() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectDestroyQTextFrame"]) }
    public func DestroyQTextFrame() { _ = callLocalFunction(l: ["", Pointer(), ___className, "DestroyQTextFrame"]) }
    public func DestroyQTextFrameDefault() { _ = callLocalFunction(l: ["", Pointer(), ___className, "DestroyQTextFrameDefault"]) }
}

public func NewQTextFrameFromPointer(ptr: String) -> QTextFrame { let r = QTextFrame(); r.initFrom(p: ptr, n: "gui.QTextFrame"); return r }
public func NewQTextFrame(document: QTextDocument_ITF? = nil) -> QTextFrame { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.NewQTextFrame", "", document as Any]) as! QTextFrame }
public protocol QTextFrameFormat_ITF: QTextFormat_ITF {
    func QTextFrameFormat_PTR() -> QTextFrameFormat
}

public class QTextFrameFormat: QTextFormat, QTextFrameFormat_ITF {
    public func QTextFrameFormat_PTR() -> QTextFrameFormat { callLocalFunction(l: ["", Pointer(), ___className, "QTextFrameFormat_PTR"]) as! QTextFrameFormat }
    public func DestroyQTextFrameFormat() { _ = callLocalFunction(l: ["", Pointer(), ___className, "DestroyQTextFrameFormat"]) }
    public func Border() -> Float { callLocalFunction(l: ["", Pointer(), ___className, "Border"]) as! Float }
    public func BorderBrush() -> QBrush { callLocalFunction(l: ["", Pointer(), ___className, "BorderBrush"]) as! QBrush }
    public func BorderStyle() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "BorderStyle"]) as! Float) }
    public func BottomMargin() -> Float { callLocalFunction(l: ["", Pointer(), ___className, "BottomMargin"]) as! Float }
    public func Height() -> QTextLength { callLocalFunction(l: ["", Pointer(), ___className, "Height"]) as! QTextLength }
    public func LeftMargin() -> Float { callLocalFunction(l: ["", Pointer(), ___className, "LeftMargin"]) as! Float }
    public func Margin() -> Float { callLocalFunction(l: ["", Pointer(), ___className, "Margin"]) as! Float }
    public func Padding() -> Float { callLocalFunction(l: ["", Pointer(), ___className, "Padding"]) as! Float }
    public func PageBreakPolicy() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "PageBreakPolicy"]) as! Float) }
    public func Position() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "Position"]) as! Float) }
    public func RightMargin() -> Float { callLocalFunction(l: ["", Pointer(), ___className, "RightMargin"]) as! Float }
    public func SetBorder(width: Float) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetBorder", width as Any]) }
    public func SetBorderBrush(brush: QBrush_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetBorderBrush", brush as Any]) }
    public func SetBorderStyle(style: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetBorderStyle", style as Any]) }
    public func SetBottomMargin(margi: Float) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetBottomMargin", margi as Any]) }
    public func SetHeight(height: QTextLength_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetHeight", height as Any]) }
    public func SetHeight2(height: Float) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetHeight2", height as Any]) }
    public func SetLeftMargin(margi: Float) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetLeftMargin", margi as Any]) }
    public func SetMargin(margi: Float) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetMargin", margi as Any]) }
    public func SetPadding(width: Float) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetPadding", width as Any]) }
    public func SetPageBreakPolicy(policy: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetPageBreakPolicy", policy as Any]) }
    public func SetPosition(policy: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetPosition", policy as Any]) }
    public func SetRightMargin(margi: Float) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetRightMargin", margi as Any]) }
    public func SetTopMargin(margi: Float) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetTopMargin", margi as Any]) }
    public func SetWidth(width: QTextLength_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetWidth", width as Any]) }
    public func SetWidth2(width: Float) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetWidth2", width as Any]) }
    public func TopMargin() -> Float { callLocalFunction(l: ["", Pointer(), ___className, "TopMargin"]) as! Float }
    public func Width() -> QTextLength { callLocalFunction(l: ["", Pointer(), ___className, "Width"]) as! QTextLength }
}

public func NewQTextFrameFormatFromPointer(ptr: String) -> QTextFrameFormat { let r = QTextFrameFormat(); r.initFrom(p: ptr, n: "gui.QTextFrameFormat"); return r }
public func NewQTextFrameFormat() -> QTextFrameFormat { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.NewQTextFrameFormat", ""]) as! QTextFrameFormat }
public protocol QTextFrameLayoutData_ITF {
    func QTextFrameLayoutData_PTR() -> QTextFrameLayoutData
}

public class QTextFrameLayoutData: Internal, QTextFrameLayoutData_ITF {
    public func QTextFrameLayoutData_PTR() -> QTextFrameLayoutData { callLocalFunction(l: ["", Pointer(), ___className, "QTextFrameLayoutData_PTR"]) as! QTextFrameLayoutData }
    public func DestroyQTextFrameLayoutData() { _ = callLocalFunction(l: ["", Pointer(), ___className, "DestroyQTextFrameLayoutData"]) }
}

public func NewQTextFrameLayoutDataFromPointer(ptr: String) -> QTextFrameLayoutData { let r = QTextFrameLayoutData(); r.initFrom(p: ptr, n: "gui.QTextFrameLayoutData"); return r }
public protocol QTextImageFormat_ITF: QTextCharFormat_ITF {
    func QTextImageFormat_PTR() -> QTextImageFormat
}

public class QTextImageFormat: QTextCharFormat, QTextImageFormat_ITF {
    public func QTextImageFormat_PTR() -> QTextImageFormat { callLocalFunction(l: ["", Pointer(), ___className, "QTextImageFormat_PTR"]) as! QTextImageFormat }
    public func DestroyQTextImageFormat() { _ = callLocalFunction(l: ["", Pointer(), ___className, "DestroyQTextImageFormat"]) }
    public func Height() -> Float { callLocalFunction(l: ["", Pointer(), ___className, "Height"]) as! Float }
    public func Name() -> String { callLocalFunction(l: ["", Pointer(), ___className, "Name"]) as! String }
    public func Quality() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "Quality"]) as! Float) }
    public func SetHeight(height: Float) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetHeight", height as Any]) }
    public func SetName(name: String) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetName", name as Any]) }
    public func SetQuality(quality: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetQuality", quality as Any]) }
    public func SetWidth(width: Float) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetWidth", width as Any]) }
    public func Width() -> Float { callLocalFunction(l: ["", Pointer(), ___className, "Width"]) as! Float }
}

public func NewQTextImageFormatFromPointer(ptr: String) -> QTextImageFormat { let r = QTextImageFormat(); r.initFrom(p: ptr, n: "gui.QTextImageFormat"); return r }
public func NewQTextImageFormat() -> QTextImageFormat { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.NewQTextImageFormat", ""]) as! QTextImageFormat }
public protocol QTextInlineObject_ITF {
    func QTextInlineObject_PTR() -> QTextInlineObject
}

public class QTextInlineObject: Internal, QTextInlineObject_ITF {
    public func QTextInlineObject_PTR() -> QTextInlineObject { callLocalFunction(l: ["", Pointer(), ___className, "QTextInlineObject_PTR"]) as! QTextInlineObject }
    public func DestroyQTextInlineObject() { _ = callLocalFunction(l: ["", Pointer(), ___className, "DestroyQTextInlineObject"]) }
    public func Ascent() -> Float { callLocalFunction(l: ["", Pointer(), ___className, "Ascent"]) as! Float }
    public func Descent() -> Float { callLocalFunction(l: ["", Pointer(), ___className, "Descent"]) as! Float }
    public func Format() -> QTextFormat { callLocalFunction(l: ["", Pointer(), ___className, "Format"]) as! QTextFormat }
    public func FormatIndex() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "FormatIndex"]) as! Float) }
    public func Height() -> Float { callLocalFunction(l: ["", Pointer(), ___className, "Height"]) as! Float }
    public func IsValid() -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "IsValid"]) as! Bool }
    public func Rect() -> QRectF { callLocalFunction(l: ["", Pointer(), ___className, "Rect"]) as! QRectF }
    public func SetAscent(a: Float) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetAscent", a as Any]) }
    public func SetDescent(d: Float) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetDescent", d as Any]) }
    public func SetWidth(w: Float) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetWidth", w as Any]) }
    public func TextDirection() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "TextDirection"]) as! Float) }
    public func TextPosition() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "TextPosition"]) as! Float) }
    public func Width() -> Float { callLocalFunction(l: ["", Pointer(), ___className, "Width"]) as! Float }
}

public func NewQTextInlineObjectFromPointer(ptr: String) -> QTextInlineObject { let r = QTextInlineObject(); r.initFrom(p: ptr, n: "gui.QTextInlineObject"); return r }
public protocol QTextItem_ITF {
    func QTextItem_PTR() -> QTextItem
}

public class QTextItem: Internal, QTextItem_ITF {
    public func QTextItem_PTR() -> QTextItem { callLocalFunction(l: ["", Pointer(), ___className, "QTextItem_PTR"]) as! QTextItem }
    public func DestroyQTextItem() { _ = callLocalFunction(l: ["", Pointer(), ___className, "DestroyQTextItem"]) }
    public func Ascent() -> Float { callLocalFunction(l: ["", Pointer(), ___className, "Ascent"]) as! Float }
    public func Descent() -> Float { callLocalFunction(l: ["", Pointer(), ___className, "Descent"]) as! Float }
    public func Font() -> QFont { callLocalFunction(l: ["", Pointer(), ___className, "Font"]) as! QFont }
    public func RenderFlags() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "RenderFlags"]) as! Float) }
    public func Text() -> String { callLocalFunction(l: ["", Pointer(), ___className, "Text"]) as! String }
    public func Width() -> Float { callLocalFunction(l: ["", Pointer(), ___className, "Width"]) as! Float }
}

public func NewQTextItemFromPointer(ptr: String) -> QTextItem { let r = QTextItem(); r.initFrom(p: ptr, n: "gui.QTextItem"); return r }
public protocol QTextLayout_ITF {
    func QTextLayout_PTR() -> QTextLayout
}

public class QTextLayout: Internal, QTextLayout_ITF {
    public func QTextLayout_PTR() -> QTextLayout { callLocalFunction(l: ["", Pointer(), ___className, "QTextLayout_PTR"]) as! QTextLayout }
    public func BeginLayout() { _ = callLocalFunction(l: ["", Pointer(), ___className, "BeginLayout"]) }
    public func BoundingRect() -> QRectF { callLocalFunction(l: ["", Pointer(), ___className, "BoundingRect"]) as! QRectF }
    public func CacheEnabled() -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "CacheEnabled"]) as! Bool }
    public func ClearFormats() { _ = callLocalFunction(l: ["", Pointer(), ___className, "ClearFormats"]) }
    public func ClearLayout() { _ = callLocalFunction(l: ["", Pointer(), ___className, "ClearLayout"]) }
    public func CreateLine() -> QTextLine { callLocalFunction(l: ["", Pointer(), ___className, "CreateLine"]) as! QTextLine }
    public func CursorMoveStyle() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "CursorMoveStyle"]) as! Float) }
    public func DrawCursor(painter: QPainter_ITF? = nil, position: QPointF_ITF? = nil, cursorPosition: Int, width: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "DrawCursor", painter as Any, position as Any, cursorPosition as Any, width as Any]) }
    public func DrawCursor2(painter: QPainter_ITF? = nil, position: QPointF_ITF? = nil, cursorPosition: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "DrawCursor2", painter as Any, position as Any, cursorPosition as Any]) }
    public func EndLayout() { _ = callLocalFunction(l: ["", Pointer(), ___className, "EndLayout"]) }
    public func Font() -> QFont { callLocalFunction(l: ["", Pointer(), ___className, "Font"]) as! QFont }
    public func GlyphRuns(from: Int, length: Int) -> [QGlyphRun] { callLocalFunction(l: ["", Pointer(), ___className, "GlyphRuns", from as Any, length as Any]) as! [QGlyphRun] }
    public func IsValidCursorPosition(pos: Int) -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "IsValidCursorPosition", pos as Any]) as! Bool }
    public func LeftCursorPosition(oldPos: Int) -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "LeftCursorPosition", oldPos as Any]) as! Float) }
    public func LineAt(i: Int) -> QTextLine { callLocalFunction(l: ["", Pointer(), ___className, "LineAt", i as Any]) as! QTextLine }
    public func LineCount() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "LineCount"]) as! Float) }
    public func LineForTextPosition(pos: Int) -> QTextLine { callLocalFunction(l: ["", Pointer(), ___className, "LineForTextPosition", pos as Any]) as! QTextLine }
    public func MaximumWidth() -> Float { callLocalFunction(l: ["", Pointer(), ___className, "MaximumWidth"]) as! Float }
    public func MinimumWidth() -> Float { callLocalFunction(l: ["", Pointer(), ___className, "MinimumWidth"]) as! Float }
    public func NextCursorPosition(oldPos: Int, mode: Int) -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "NextCursorPosition", oldPos as Any, mode as Any]) as! Float) }
    public func Position() -> QPointF { callLocalFunction(l: ["", Pointer(), ___className, "Position"]) as! QPointF }
    public func PreeditAreaPosition() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "PreeditAreaPosition"]) as! Float) }
    public func PreeditAreaText() -> String { callLocalFunction(l: ["", Pointer(), ___className, "PreeditAreaText"]) as! String }
    public func PreviousCursorPosition(oldPos: Int, mode: Int) -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "PreviousCursorPosition", oldPos as Any, mode as Any]) as! Float) }
    public func RightCursorPosition(oldPos: Int) -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "RightCursorPosition", oldPos as Any]) as! Float) }
    public func SetCacheEnabled(enable: Bool) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetCacheEnabled", enable as Any]) }
    public func SetCursorMoveStyle(style: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetCursorMoveStyle", style as Any]) }
    public func SetFont(font: QFont_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetFont", font as Any]) }
    public func SetPosition(p: QPointF_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetPosition", p as Any]) }
    public func SetPreeditArea(position: Int, text: String) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetPreeditArea", position as Any, text as Any]) }
    public func SetText(stri: String) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetText", stri as Any]) }
    public func SetTextOption(option: QTextOption_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetTextOption", option as Any]) }
    public func Text() -> String { callLocalFunction(l: ["", Pointer(), ___className, "Text"]) as! String }
    public func TextOption() -> QTextOption { callLocalFunction(l: ["", Pointer(), ___className, "TextOption"]) as! QTextOption }
    public func DestroyQTextLayout() { _ = callLocalFunction(l: ["", Pointer(), ___className, "DestroyQTextLayout"]) }
}

public func NewQTextLayoutFromPointer(ptr: String) -> QTextLayout { let r = QTextLayout(); r.initFrom(p: ptr, n: "gui.QTextLayout"); return r }
public func NewQTextLayout() -> QTextLayout { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.NewQTextLayout", ""]) as! QTextLayout }
public func NewQTextLayout2(text: String) -> QTextLayout { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.NewQTextLayout2", "", text as Any]) as! QTextLayout }
public func NewQTextLayout4(text: String, font: QFont_ITF? = nil, paintdevice: QPaintDevice_ITF? = nil) -> QTextLayout { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.NewQTextLayout4", "", text as Any, font as Any, paintdevice as Any]) as! QTextLayout }
public protocol QTextLength_ITF {
    func QTextLength_PTR() -> QTextLength
}

public class QTextLength: Internal, QTextLength_ITF {
    public func QTextLength_PTR() -> QTextLength { callLocalFunction(l: ["", Pointer(), ___className, "QTextLength_PTR"]) as! QTextLength }
    public func DestroyQTextLength() { _ = callLocalFunction(l: ["", Pointer(), ___className, "DestroyQTextLength"]) }
    public func RawValue() -> Float { callLocalFunction(l: ["", Pointer(), ___className, "RawValue"]) as! Float }
    public func Type() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "Type"]) as! Float) }
    public func Value(maximumLength: Float) -> Float { callLocalFunction(l: ["", Pointer(), ___className, "Value", maximumLength as Any]) as! Float }
}

public func NewQTextLengthFromPointer(ptr: String) -> QTextLength { let r = QTextLength(); r.initFrom(p: ptr, n: "gui.QTextLength"); return r }
public func NewQTextLength() -> QTextLength { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.NewQTextLength", ""]) as! QTextLength }
public func NewQTextLength2(ty: Int, value: Float) -> QTextLength { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.NewQTextLength2", "", ty as Any, value as Any]) as! QTextLength }
public protocol QTextLine_ITF {
    func QTextLine_PTR() -> QTextLine
}

public class QTextLine: Internal, QTextLine_ITF {
    public func QTextLine_PTR() -> QTextLine { callLocalFunction(l: ["", Pointer(), ___className, "QTextLine_PTR"]) as! QTextLine }
    public func DestroyQTextLine() { _ = callLocalFunction(l: ["", Pointer(), ___className, "DestroyQTextLine"]) }
    public func Ascent() -> Float { callLocalFunction(l: ["", Pointer(), ___className, "Ascent"]) as! Float }
    public func CursorToX(cursorPos: Int, edge: Int) -> Float { callLocalFunction(l: ["", Pointer(), ___className, "CursorToX", cursorPos as Any, edge as Any]) as! Float }
    public func CursorToX2(cursorPos: Int, edge: Int) -> Float { callLocalFunction(l: ["", Pointer(), ___className, "CursorToX2", cursorPos as Any, edge as Any]) as! Float }
    public func Descent() -> Float { callLocalFunction(l: ["", Pointer(), ___className, "Descent"]) as! Float }
    public func GlyphRuns(from: Int, length: Int) -> [QGlyphRun] { callLocalFunction(l: ["", Pointer(), ___className, "GlyphRuns", from as Any, length as Any]) as! [QGlyphRun] }
    public func Height() -> Float { callLocalFunction(l: ["", Pointer(), ___className, "Height"]) as! Float }
    public func HorizontalAdvance() -> Float { callLocalFunction(l: ["", Pointer(), ___className, "HorizontalAdvance"]) as! Float }
    public func IsValid() -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "IsValid"]) as! Bool }
    public func Leading() -> Float { callLocalFunction(l: ["", Pointer(), ___className, "Leading"]) as! Float }
    public func LeadingIncluded() -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "LeadingIncluded"]) as! Bool }
    public func LineNumber() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "LineNumber"]) as! Float) }
    public func NaturalTextRect() -> QRectF { callLocalFunction(l: ["", Pointer(), ___className, "NaturalTextRect"]) as! QRectF }
    public func NaturalTextWidth() -> Float { callLocalFunction(l: ["", Pointer(), ___className, "NaturalTextWidth"]) as! Float }
    public func Position() -> QPointF { callLocalFunction(l: ["", Pointer(), ___className, "Position"]) as! QPointF }
    public func Rect() -> QRectF { callLocalFunction(l: ["", Pointer(), ___className, "Rect"]) as! QRectF }
    public func SetLeadingIncluded(included: Bool) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetLeadingIncluded", included as Any]) }
    public func SetLineWidth(width: Float) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetLineWidth", width as Any]) }
    public func SetNumColumns(numColumns: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetNumColumns", numColumns as Any]) }
    public func SetNumColumns2(numColumns: Int, alignmentWidth: Float) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetNumColumns2", numColumns as Any, alignmentWidth as Any]) }
    public func SetPosition(pos: QPointF_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetPosition", pos as Any]) }
    public func TextLength() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "TextLength"]) as! Float) }
    public func TextStart() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "TextStart"]) as! Float) }
    public func Width() -> Float { callLocalFunction(l: ["", Pointer(), ___className, "Width"]) as! Float }
    public func X() -> Float { callLocalFunction(l: ["", Pointer(), ___className, "X"]) as! Float }
    public func XToCursor(x: Float, cpos: Int) -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "XToCursor", x as Any, cpos as Any]) as! Float) }
    public func Y() -> Float { callLocalFunction(l: ["", Pointer(), ___className, "Y"]) as! Float }
}

public func NewQTextLineFromPointer(ptr: String) -> QTextLine { let r = QTextLine(); r.initFrom(p: ptr, n: "gui.QTextLine"); return r }
public func NewQTextLine() -> QTextLine { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.NewQTextLine", ""]) as! QTextLine }
public protocol QTextList_ITF: QTextBlockGroup_ITF {
    func QTextList_PTR() -> QTextList
}

public class QTextList: QTextBlockGroup, QTextList_ITF {
    public func QTextList_PTR() -> QTextList { callLocalFunction(l: ["", Pointer(), ___className, "QTextList_PTR"]) as! QTextList }
    public func Add(block: QTextBlock_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "Add", block as Any]) }
    public func Count() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "Count"]) as! Float) }
    public func Format_QTextBlockGroup() -> QTextListFormat { callLocalFunction(l: ["", Pointer(), ___className, "Format"]) as! QTextListFormat }
    public func Item(i: Int) -> QTextBlock { callLocalFunction(l: ["", Pointer(), ___className, "Item", i as Any]) as! QTextBlock }
    public func ItemNumber(block: QTextBlock_ITF? = nil) -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "ItemNumber", block as Any]) as! Float) }
    public func ItemText(block: QTextBlock_ITF? = nil) -> String { callLocalFunction(l: ["", Pointer(), ___className, "ItemText", block as Any]) as! String }
    public func Remove(block: QTextBlock_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "Remove", block as Any]) }
    public func RemoveItem(i: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "RemoveItem", i as Any]) }
    public func SetFormat_QTextBlockGroup(format: QTextListFormat_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetFormat", format as Any]) }
}

public func NewQTextListFromPointer(ptr: String) -> QTextList { let r = QTextList(); r.initFrom(p: ptr, n: "gui.QTextList"); return r }
public protocol QTextListFormat_ITF: QTextFormat_ITF {
    func QTextListFormat_PTR() -> QTextListFormat
}

public class QTextListFormat: QTextFormat, QTextListFormat_ITF {
    public func QTextListFormat_PTR() -> QTextListFormat { callLocalFunction(l: ["", Pointer(), ___className, "QTextListFormat_PTR"]) as! QTextListFormat }
    public func DestroyQTextListFormat() { _ = callLocalFunction(l: ["", Pointer(), ___className, "DestroyQTextListFormat"]) }
    public func Indent() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "Indent"]) as! Float) }
    public func NumberPrefix() -> String { callLocalFunction(l: ["", Pointer(), ___className, "NumberPrefix"]) as! String }
    public func NumberSuffix() -> String { callLocalFunction(l: ["", Pointer(), ___className, "NumberSuffix"]) as! String }
    public func SetIndent(indentation: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetIndent", indentation as Any]) }
    public func SetNumberPrefix(numberPrefix: String) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetNumberPrefix", numberPrefix as Any]) }
    public func SetNumberSuffix(numberSuffix: String) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetNumberSuffix", numberSuffix as Any]) }
    public func SetStyle(style: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetStyle", style as Any]) }
    public func Style() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "Style"]) as! Float) }
}

public func NewQTextListFormatFromPointer(ptr: String) -> QTextListFormat { let r = QTextListFormat(); r.initFrom(p: ptr, n: "gui.QTextListFormat"); return r }
public func NewQTextListFormat() -> QTextListFormat { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.NewQTextListFormat", ""]) as! QTextListFormat }
public protocol QTextObject_ITF: QObject_ITF {
    func QTextObject_PTR() -> QTextObject
}

public class QTextObject: QObject, QTextObject_ITF {
    public func QTextObject_PTR() -> QTextObject { callLocalFunction(l: ["", Pointer(), ___className, "QTextObject_PTR"]) as! QTextObject }
    public func Document() -> QTextDocument { callLocalFunction(l: ["", Pointer(), ___className, "Document"]) as! QTextDocument }
    public func Format() -> QTextFormat { callLocalFunction(l: ["", Pointer(), ___className, "Format"]) as! QTextFormat }
    public func FormatIndex() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "FormatIndex"]) as! Float) }
    public func ObjectIndex() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "ObjectIndex"]) as! Float) }
    public func SetFormat(format: QTextFormat_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetFormat", format as Any]) }
    public func ConnectDestroyQTextObject(f: @escaping () -> Void) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectDestroyQTextObject", "___REMOTE_CALLBACK___"], f: { (_: [Any]) -> Any in f() } as Any) }
    public func DisconnectDestroyQTextObject() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectDestroyQTextObject"]) }
    public func DestroyQTextObject() { _ = callLocalFunction(l: ["", Pointer(), ___className, "DestroyQTextObject"]) }
    public func DestroyQTextObjectDefault() { _ = callLocalFunction(l: ["", Pointer(), ___className, "DestroyQTextObjectDefault"]) }
    override public func ChildEventDefault(event: QChildEvent_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "ChildEventDefault", event as Any]) }
    override public func ConnectNotifyDefault(sign: QMetaMethod_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "ConnectNotifyDefault", sign as Any]) }
    override public func CustomEventDefault(event: QEvent_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "CustomEventDefault", event as Any]) }
    override public func DeleteLaterDefault() { _ = callLocalFunction(l: ["", Pointer(), ___className, "DeleteLaterDefault"]) }
    override public func DisconnectNotifyDefault(sign: QMetaMethod_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "DisconnectNotifyDefault", sign as Any]) }
    override public func EventDefault(e: QEvent_ITF? = nil) -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "EventDefault", e as Any]) as! Bool }
    override public func EventFilterDefault(watched: QObject_ITF? = nil, event: QEvent_ITF? = nil) -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "EventFilterDefault", watched as Any, event as Any]) as! Bool }
    override public func MetaObjectDefault() -> QMetaObject { callLocalFunction(l: ["", Pointer(), ___className, "MetaObjectDefault"]) as! QMetaObject }
    override public func TimerEventDefault(event: QTimerEvent_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "TimerEventDefault", event as Any]) }
}

public func NewQTextObjectFromPointer(ptr: String) -> QTextObject { let r = QTextObject(); r.initFrom(p: ptr, n: "gui.QTextObject"); return r }
public func NewQTextObject(document: QTextDocument_ITF? = nil) -> QTextObject { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.NewQTextObject", "", document as Any]) as! QTextObject }
public protocol QTextObjectInterface_ITF {
    func QTextObjectInterface_PTR() -> QTextObjectInterface
}

public class QTextObjectInterface: Internal, QTextObjectInterface_ITF {
    public func QTextObjectInterface_PTR() -> QTextObjectInterface { callLocalFunction(l: ["", Pointer(), ___className, "QTextObjectInterface_PTR"]) as! QTextObjectInterface }
    public func ConnectDrawObject(f: @escaping (_ painter: QPainter, _ rect: QRectF, _ doc: QTextDocument, _ posInDocument: Int, _ format: QTextFormat) -> Void) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectDrawObject", "___REMOTE_CALLBACK___"], f: { (inp: [Any]) -> Any in f(inp[0] as! QPainter, inp[1] as! QRectF, inp[2] as! QTextDocument, Int(inp[3] as! Float), inp[4] as! QTextFormat) } as Any) }
    public func DisconnectDrawObject() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectDrawObject"]) }
    public func DrawObject(painter: QPainter_ITF? = nil, rect: QRectF_ITF? = nil, doc: QTextDocument_ITF? = nil, posInDocument: Int, format: QTextFormat_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "DrawObject", painter as Any, rect as Any, doc as Any, posInDocument as Any, format as Any]) }
    public func ConnectIntrinsicSize(f: @escaping (_ doc: QTextDocument, _ posInDocument: Int, _ format: QTextFormat) -> QSizeF) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectIntrinsicSize", "___REMOTE_CALLBACK___"], f: { (inp: [Any]) -> Any in f(inp[0] as! QTextDocument, Int(inp[1] as! Float), inp[2] as! QTextFormat) } as Any) }
    public func DisconnectIntrinsicSize() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectIntrinsicSize"]) }
    public func IntrinsicSize(doc: QTextDocument_ITF? = nil, posInDocument: Int, format: QTextFormat_ITF? = nil) -> QSizeF { callLocalFunction(l: ["", Pointer(), ___className, "IntrinsicSize", doc as Any, posInDocument as Any, format as Any]) as! QSizeF }
    public func ConnectDestroyQTextObjectInterface(f: @escaping () -> Void) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectDestroyQTextObjectInterface", "___REMOTE_CALLBACK___"], f: { (_: [Any]) -> Any in f() } as Any) }
    public func DisconnectDestroyQTextObjectInterface() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectDestroyQTextObjectInterface"]) }
    public func DestroyQTextObjectInterface() { _ = callLocalFunction(l: ["", Pointer(), ___className, "DestroyQTextObjectInterface"]) }
    public func DestroyQTextObjectInterfaceDefault() { _ = callLocalFunction(l: ["", Pointer(), ___className, "DestroyQTextObjectInterfaceDefault"]) }
}

public func NewQTextObjectInterfaceFromPointer(ptr: String) -> QTextObjectInterface { let r = QTextObjectInterface(); r.initFrom(p: ptr, n: "gui.QTextObjectInterface"); return r }
public protocol QTextOption_ITF {
    func QTextOption_PTR() -> QTextOption
}

public class QTextOption: Internal, QTextOption_ITF {
    public func QTextOption_PTR() -> QTextOption { callLocalFunction(l: ["", Pointer(), ___className, "QTextOption_PTR"]) as! QTextOption }
    public func Alignment() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "Alignment"]) as! Float) }
    public func Flags() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "Flags"]) as! Float) }
    public func SetAlignment(alignment: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetAlignment", alignment as Any]) }
    public func SetFlags(flags: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetFlags", flags as Any]) }
    public func SetTabArray(tabStops: [Float]) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetTabArray", tabStops as Any]) }
    public func SetTabStopDistance(tabStopDistance: Float) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetTabStopDistance", tabStopDistance as Any]) }
    public func SetTextDirection(direction: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetTextDirection", direction as Any]) }
    public func SetUseDesignMetrics(enable: Bool) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetUseDesignMetrics", enable as Any]) }
    public func SetWrapMode(mode: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetWrapMode", mode as Any]) }
    public func TabArray() -> [Float] { callLocalFunction(l: ["", Pointer(), ___className, "TabArray"]) as! [Float] }
    public func TabStopDistance() -> Float { callLocalFunction(l: ["", Pointer(), ___className, "TabStopDistance"]) as! Float }
    public func TextDirection() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "TextDirection"]) as! Float) }
    public func UseDesignMetrics() -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "UseDesignMetrics"]) as! Bool }
    public func WrapMode() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "WrapMode"]) as! Float) }
    public func DestroyQTextOption() { _ = callLocalFunction(l: ["", Pointer(), ___className, "DestroyQTextOption"]) }
}

public func NewQTextOptionFromPointer(ptr: String) -> QTextOption { let r = QTextOption(); r.initFrom(p: ptr, n: "gui.QTextOption"); return r }
public func NewQTextOption() -> QTextOption { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.NewQTextOption", ""]) as! QTextOption }
public func NewQTextOption2(alignment: Int) -> QTextOption { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.NewQTextOption2", "", alignment as Any]) as! QTextOption }
public func NewQTextOption3(other: QTextOption_ITF? = nil) -> QTextOption { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.NewQTextOption3", "", other as Any]) as! QTextOption }
public protocol QTextTable_ITF: QTextFrame_ITF {
    func QTextTable_PTR() -> QTextTable
}

public class QTextTable: QTextFrame, QTextTable_ITF {
    public func QTextTable_PTR() -> QTextTable { callLocalFunction(l: ["", Pointer(), ___className, "QTextTable_PTR"]) as! QTextTable }
    public func AppendColumns(count: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "AppendColumns", count as Any]) }
    public func AppendRows(count: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "AppendRows", count as Any]) }
    public func CellAt(row: Int, column: Int) -> QTextTableCell { callLocalFunction(l: ["", Pointer(), ___className, "CellAt", row as Any, column as Any]) as! QTextTableCell }
    public func CellAt2(position: Int) -> QTextTableCell { callLocalFunction(l: ["", Pointer(), ___className, "CellAt2", position as Any]) as! QTextTableCell }
    public func CellAt3(cursor: QTextCursor_ITF? = nil) -> QTextTableCell { callLocalFunction(l: ["", Pointer(), ___className, "CellAt3", cursor as Any]) as! QTextTableCell }
    public func Columns() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "Columns"]) as! Float) }
    public func Format_QTextFrame() -> QTextTableFormat { callLocalFunction(l: ["", Pointer(), ___className, "Format"]) as! QTextTableFormat }
    public func InsertColumns(index: Int, columns: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "InsertColumns", index as Any, columns as Any]) }
    public func InsertRows(index: Int, rows: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "InsertRows", index as Any, rows as Any]) }
    public func MergeCells(row: Int, column: Int, numRows: Int, numCols: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "MergeCells", row as Any, column as Any, numRows as Any, numCols as Any]) }
    public func MergeCells2(cursor: QTextCursor_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "MergeCells2", cursor as Any]) }
    public func RemoveColumns(index: Int, columns: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "RemoveColumns", index as Any, columns as Any]) }
    public func RemoveRows(index: Int, rows: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "RemoveRows", index as Any, rows as Any]) }
    public func Resize(rows: Int, columns: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "Resize", rows as Any, columns as Any]) }
    public func RowEnd(cursor: QTextCursor_ITF? = nil) -> QTextCursor { callLocalFunction(l: ["", Pointer(), ___className, "RowEnd", cursor as Any]) as! QTextCursor }
    public func RowStart(cursor: QTextCursor_ITF? = nil) -> QTextCursor { callLocalFunction(l: ["", Pointer(), ___className, "RowStart", cursor as Any]) as! QTextCursor }
    public func Rows() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "Rows"]) as! Float) }
    public func SetFormat_QTextFrame(format: QTextTableFormat_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetFormat", format as Any]) }
    public func SplitCell(row: Int, column: Int, numRows: Int, numCols: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SplitCell", row as Any, column as Any, numRows as Any, numCols as Any]) }
}

public func NewQTextTableFromPointer(ptr: String) -> QTextTable { let r = QTextTable(); r.initFrom(p: ptr, n: "gui.QTextTable"); return r }
public protocol QTextTableCell_ITF {
    func QTextTableCell_PTR() -> QTextTableCell
}

public class QTextTableCell: Internal, QTextTableCell_ITF {
    public func QTextTableCell_PTR() -> QTextTableCell { callLocalFunction(l: ["", Pointer(), ___className, "QTextTableCell_PTR"]) as! QTextTableCell }
    public func Column() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "Column"]) as! Float) }
    public func ColumnSpan() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "ColumnSpan"]) as! Float) }
    public func FirstCursorPosition() -> QTextCursor { callLocalFunction(l: ["", Pointer(), ___className, "FirstCursorPosition"]) as! QTextCursor }
    public func Format() -> QTextCharFormat { callLocalFunction(l: ["", Pointer(), ___className, "Format"]) as! QTextCharFormat }
    public func IsValid() -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "IsValid"]) as! Bool }
    public func LastCursorPosition() -> QTextCursor { callLocalFunction(l: ["", Pointer(), ___className, "LastCursorPosition"]) as! QTextCursor }
    public func Row() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "Row"]) as! Float) }
    public func RowSpan() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "RowSpan"]) as! Float) }
    public func SetFormat(format: QTextCharFormat_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetFormat", format as Any]) }
    public func TableCellFormatIndex() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "TableCellFormatIndex"]) as! Float) }
    public func DestroyQTextTableCell() { _ = callLocalFunction(l: ["", Pointer(), ___className, "DestroyQTextTableCell"]) }
}

public func NewQTextTableCellFromPointer(ptr: String) -> QTextTableCell { let r = QTextTableCell(); r.initFrom(p: ptr, n: "gui.QTextTableCell"); return r }
public func NewQTextTableCell() -> QTextTableCell { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.NewQTextTableCell", ""]) as! QTextTableCell }
public func NewQTextTableCell2(other: QTextTableCell_ITF? = nil) -> QTextTableCell { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.NewQTextTableCell2", "", other as Any]) as! QTextTableCell }
public protocol QTextTableCellFormat_ITF: QTextCharFormat_ITF {
    func QTextTableCellFormat_PTR() -> QTextTableCellFormat
}

public class QTextTableCellFormat: QTextCharFormat, QTextTableCellFormat_ITF {
    public func QTextTableCellFormat_PTR() -> QTextTableCellFormat { callLocalFunction(l: ["", Pointer(), ___className, "QTextTableCellFormat_PTR"]) as! QTextTableCellFormat }
    public func DestroyQTextTableCellFormat() { _ = callLocalFunction(l: ["", Pointer(), ___className, "DestroyQTextTableCellFormat"]) }
    public func BottomPadding() -> Float { callLocalFunction(l: ["", Pointer(), ___className, "BottomPadding"]) as! Float }
    public func LeftPadding() -> Float { callLocalFunction(l: ["", Pointer(), ___className, "LeftPadding"]) as! Float }
    public func RightPadding() -> Float { callLocalFunction(l: ["", Pointer(), ___className, "RightPadding"]) as! Float }
    public func SetBottomPadding(padding: Float) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetBottomPadding", padding as Any]) }
    public func SetLeftPadding(padding: Float) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetLeftPadding", padding as Any]) }
    public func SetPadding(padding: Float) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetPadding", padding as Any]) }
    public func SetRightPadding(padding: Float) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetRightPadding", padding as Any]) }
    public func SetTopPadding(padding: Float) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetTopPadding", padding as Any]) }
    public func TopPadding() -> Float { callLocalFunction(l: ["", Pointer(), ___className, "TopPadding"]) as! Float }
}

public func NewQTextTableCellFormatFromPointer(ptr: String) -> QTextTableCellFormat { let r = QTextTableCellFormat(); r.initFrom(p: ptr, n: "gui.QTextTableCellFormat"); return r }
public func NewQTextTableCellFormat() -> QTextTableCellFormat { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.NewQTextTableCellFormat", ""]) as! QTextTableCellFormat }
public protocol QTextTableFormat_ITF: QTextFrameFormat_ITF {
    func QTextTableFormat_PTR() -> QTextTableFormat
}

public class QTextTableFormat: QTextFrameFormat, QTextTableFormat_ITF {
    public func QTextTableFormat_PTR() -> QTextTableFormat { callLocalFunction(l: ["", Pointer(), ___className, "QTextTableFormat_PTR"]) as! QTextTableFormat }
    public func DestroyQTextTableFormat() { _ = callLocalFunction(l: ["", Pointer(), ___className, "DestroyQTextTableFormat"]) }
    public func Alignment() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "Alignment"]) as! Float) }
    public func CellPadding() -> Float { callLocalFunction(l: ["", Pointer(), ___className, "CellPadding"]) as! Float }
    public func CellSpacing() -> Float { callLocalFunction(l: ["", Pointer(), ___className, "CellSpacing"]) as! Float }
    public func ClearColumnWidthConstraints() { _ = callLocalFunction(l: ["", Pointer(), ___className, "ClearColumnWidthConstraints"]) }
    public func Columns() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "Columns"]) as! Float) }
    public func HeaderRowCount() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "HeaderRowCount"]) as! Float) }
    public func SetAlignment(alignment: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetAlignment", alignment as Any]) }
    public func SetCellPadding(padding: Float) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetCellPadding", padding as Any]) }
    public func SetCellSpacing(spacing: Float) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetCellSpacing", spacing as Any]) }
    public func SetColumnWidthConstraints(constraints: [QTextLength]) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetColumnWidthConstraints", constraints as Any]) }
    public func SetHeaderRowCount(count: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetHeaderRowCount", count as Any]) }
}

public func NewQTextTableFormatFromPointer(ptr: String) -> QTextTableFormat { let r = QTextTableFormat(); r.initFrom(p: ptr, n: "gui.QTextTableFormat"); return r }
public func NewQTextTableFormat() -> QTextTableFormat { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.NewQTextTableFormat", ""]) as! QTextTableFormat }
public protocol QTouchDevice_ITF {
    func QTouchDevice_PTR() -> QTouchDevice
}

public class QTouchDevice: Internal, QTouchDevice_ITF {
    public func QTouchDevice_PTR() -> QTouchDevice { callLocalFunction(l: ["", Pointer(), ___className, "QTouchDevice_PTR"]) as! QTouchDevice }
    public func Capabilities() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "Capabilities"]) as! Float) }
    public func Devices() -> [QTouchDevice] { callLocalFunction(l: ["", Pointer(), ___className, "Devices"]) as! [QTouchDevice] }
    public func MaximumTouchPoints() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "MaximumTouchPoints"]) as! Float) }
    public func Name() -> String { callLocalFunction(l: ["", Pointer(), ___className, "Name"]) as! String }
    public func SetCapabilities(caps: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetCapabilities", caps as Any]) }
    public func SetMaximumTouchPoints(max: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetMaximumTouchPoints", max as Any]) }
    public func SetName(name: String) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetName", name as Any]) }
    public func SetType(devType: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetType", devType as Any]) }
    public func Type() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "Type"]) as! Float) }
    public func DestroyQTouchDevice() { _ = callLocalFunction(l: ["", Pointer(), ___className, "DestroyQTouchDevice"]) }
}

public func NewQTouchDeviceFromPointer(ptr: String) -> QTouchDevice { let r = QTouchDevice(); r.initFrom(p: ptr, n: "gui.QTouchDevice"); return r }
public func NewQTouchDevice() -> QTouchDevice { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.NewQTouchDevice", ""]) as! QTouchDevice }
public func QTouchDevice_Devices() -> [QTouchDevice] { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.QTouchDevice_Devices", ""]) as! [QTouchDevice] }
public protocol QTouchEvent_ITF: QInputEvent_ITF {
    func QTouchEvent_PTR() -> QTouchEvent
}

public class QTouchEvent: QInputEvent, QTouchEvent_ITF {
    public func QTouchEvent_PTR() -> QTouchEvent { callLocalFunction(l: ["", Pointer(), ___className, "QTouchEvent_PTR"]) as! QTouchEvent }
    public func Device() -> QTouchDevice { callLocalFunction(l: ["", Pointer(), ___className, "Device"]) as! QTouchDevice }
    public func Target() -> QObject { callLocalFunction(l: ["", Pointer(), ___className, "Target"]) as! QObject }
    public func TouchPointStates() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "TouchPointStates"]) as! Float) }
    public func Window() -> QWindow { callLocalFunction(l: ["", Pointer(), ___className, "Window"]) as! QWindow }
    public func ConnectDestroyQTouchEvent(f: @escaping () -> Void) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectDestroyQTouchEvent", "___REMOTE_CALLBACK___"], f: { (_: [Any]) -> Any in f() } as Any) }
    public func DisconnectDestroyQTouchEvent() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectDestroyQTouchEvent"]) }
    public func DestroyQTouchEvent() { _ = callLocalFunction(l: ["", Pointer(), ___className, "DestroyQTouchEvent"]) }
    public func DestroyQTouchEventDefault() { _ = callLocalFunction(l: ["", Pointer(), ___className, "DestroyQTouchEventDefault"]) }
}

public func NewQTouchEventFromPointer(ptr: String) -> QTouchEvent { let r = QTouchEvent(); r.initFrom(p: ptr, n: "gui.QTouchEvent"); return r }
public protocol QTransform_ITF {
    func QTransform_PTR() -> QTransform
}

public class QTransform: Internal, QTransform_ITF {
    public func QTransform_PTR() -> QTransform { callLocalFunction(l: ["", Pointer(), ___className, "QTransform_PTR"]) as! QTransform }
    public func DestroyQTransform() { _ = callLocalFunction(l: ["", Pointer(), ___className, "DestroyQTransform"]) }
    public func Adjoint() -> QTransform { callLocalFunction(l: ["", Pointer(), ___className, "Adjoint"]) as! QTransform }
    public func Determinant() -> Float { callLocalFunction(l: ["", Pointer(), ___className, "Determinant"]) as! Float }
    public func Dx() -> Float { callLocalFunction(l: ["", Pointer(), ___className, "Dx"]) as! Float }
    public func Dy() -> Float { callLocalFunction(l: ["", Pointer(), ___className, "Dy"]) as! Float }
    public func FromScale(sx: Float, sy: Float) -> QTransform { callLocalFunction(l: ["", Pointer(), ___className, "FromScale", sx as Any, sy as Any]) as! QTransform }
    public func FromTranslate(dx: Float, dy: Float) -> QTransform { callLocalFunction(l: ["", Pointer(), ___className, "FromTranslate", dx as Any, dy as Any]) as! QTransform }
    public func Inverted(invertible: Bool) -> QTransform { callLocalFunction(l: ["", Pointer(), ___className, "Inverted", invertible as Any]) as! QTransform }
    public func IsAffine() -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "IsAffine"]) as! Bool }
    public func IsIdentity() -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "IsIdentity"]) as! Bool }
    public func IsInvertible() -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "IsInvertible"]) as! Bool }
    public func IsRotating() -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "IsRotating"]) as! Bool }
    public func IsScaling() -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "IsScaling"]) as! Bool }
    public func IsTranslating() -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "IsTranslating"]) as! Bool }
    public func M11() -> Float { callLocalFunction(l: ["", Pointer(), ___className, "M11"]) as! Float }
    public func M12() -> Float { callLocalFunction(l: ["", Pointer(), ___className, "M12"]) as! Float }
    public func M13() -> Float { callLocalFunction(l: ["", Pointer(), ___className, "M13"]) as! Float }
    public func M21() -> Float { callLocalFunction(l: ["", Pointer(), ___className, "M21"]) as! Float }
    public func M22() -> Float { callLocalFunction(l: ["", Pointer(), ___className, "M22"]) as! Float }
    public func M23() -> Float { callLocalFunction(l: ["", Pointer(), ___className, "M23"]) as! Float }
    public func M31() -> Float { callLocalFunction(l: ["", Pointer(), ___className, "M31"]) as! Float }
    public func M32() -> Float { callLocalFunction(l: ["", Pointer(), ___className, "M32"]) as! Float }
    public func M33() -> Float { callLocalFunction(l: ["", Pointer(), ___className, "M33"]) as! Float }
    public func Map(x: Float, y: Float, tx: Float, ty: Float) { _ = callLocalFunction(l: ["", Pointer(), ___className, "Map", x as Any, y as Any, tx as Any, ty as Any]) }
    public func Map2(point: QPoint_ITF? = nil) -> QPoint { callLocalFunction(l: ["", Pointer(), ___className, "Map2", point as Any]) as! QPoint }
    public func Map3(p: QPointF_ITF? = nil) -> QPointF { callLocalFunction(l: ["", Pointer(), ___className, "Map3", p as Any]) as! QPointF }
    public func Map4(l: QLine_ITF? = nil) -> QLine { callLocalFunction(l: ["", Pointer(), ___className, "Map4", l as Any]) as! QLine }
    public func Map5(line: QLineF_ITF? = nil) -> QLineF { callLocalFunction(l: ["", Pointer(), ___className, "Map5", line as Any]) as! QLineF }
    public func Map6(polygon: QPolygonF_ITF? = nil) -> QPolygonF { callLocalFunction(l: ["", Pointer(), ___className, "Map6", polygon as Any]) as! QPolygonF }
    public func Map7(polygon: QPolygon_ITF? = nil) -> QPolygon { callLocalFunction(l: ["", Pointer(), ___className, "Map7", polygon as Any]) as! QPolygon }
    public func Map8(region: QRegion_ITF? = nil) -> QRegion { callLocalFunction(l: ["", Pointer(), ___className, "Map8", region as Any]) as! QRegion }
    public func Map9(path: QPainterPath_ITF? = nil) -> QPainterPath { callLocalFunction(l: ["", Pointer(), ___className, "Map9", path as Any]) as! QPainterPath }
    public func Map10(x: Int, y: Int, tx: Int, ty: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "Map10", x as Any, y as Any, tx as Any, ty as Any]) }
    public func MapRect(rectangle: QRectF_ITF? = nil) -> QRectF { callLocalFunction(l: ["", Pointer(), ___className, "MapRect", rectangle as Any]) as! QRectF }
    public func MapRect2(rectangle: QRect_ITF? = nil) -> QRect { callLocalFunction(l: ["", Pointer(), ___className, "MapRect2", rectangle as Any]) as! QRect }
    public func MapToPolygon(rectangle: QRect_ITF? = nil) -> QPolygon { callLocalFunction(l: ["", Pointer(), ___className, "MapToPolygon", rectangle as Any]) as! QPolygon }
    public func QuadToQuad(one: QPolygonF_ITF? = nil, two: QPolygonF_ITF? = nil, trans: QTransform_ITF? = nil) -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "QuadToQuad", one as Any, two as Any, trans as Any]) as! Bool }
    public func QuadToSquare(quad: QPolygonF_ITF? = nil, trans: QTransform_ITF? = nil) -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "QuadToSquare", quad as Any, trans as Any]) as! Bool }
    public func Reset() { _ = callLocalFunction(l: ["", Pointer(), ___className, "Reset"]) }
    public func Rotate(angle: Float, axis: Int) -> QTransform { callLocalFunction(l: ["", Pointer(), ___className, "Rotate", angle as Any, axis as Any]) as! QTransform }
    public func RotateRadians(angle: Float, axis: Int) -> QTransform { callLocalFunction(l: ["", Pointer(), ___className, "RotateRadians", angle as Any, axis as Any]) as! QTransform }
    public func Scale(sx: Float, sy: Float) -> QTransform { callLocalFunction(l: ["", Pointer(), ___className, "Scale", sx as Any, sy as Any]) as! QTransform }
    public func SetMatrix(m11: Float, m12: Float, m13: Float, m21: Float, m22: Float, m23: Float, m31: Float, m32: Float, m33: Float) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetMatrix", m11 as Any, m12 as Any, m13 as Any, m21 as Any, m22 as Any, m23 as Any, m31 as Any, m32 as Any, m33 as Any]) }
    public func Shear(sh: Float, sv: Float) -> QTransform { callLocalFunction(l: ["", Pointer(), ___className, "Shear", sh as Any, sv as Any]) as! QTransform }
    public func SquareToQuad(quad: QPolygonF_ITF? = nil, trans: QTransform_ITF? = nil) -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "SquareToQuad", quad as Any, trans as Any]) as! Bool }
    public func ToAffine() -> QMatrix { callLocalFunction(l: ["", Pointer(), ___className, "ToAffine"]) as! QMatrix }
    public func Translate(dx: Float, dy: Float) -> QTransform { callLocalFunction(l: ["", Pointer(), ___className, "Translate", dx as Any, dy as Any]) as! QTransform }
    public func Transposed() -> QTransform { callLocalFunction(l: ["", Pointer(), ___className, "Transposed"]) as! QTransform }
    public func Type() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "Type"]) as! Float) }
}

public func NewQTransformFromPointer(ptr: String) -> QTransform { let r = QTransform(); r.initFrom(p: ptr, n: "gui.QTransform"); return r }
public func NewQTransform2() -> QTransform { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.NewQTransform2", ""]) as! QTransform }
public func NewQTransform3(m11: Float, m12: Float, m13: Float, m21: Float, m22: Float, m23: Float, m31: Float, m32: Float, m33: Float) -> QTransform { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.NewQTransform3", "", m11 as Any, m12 as Any, m13 as Any, m21 as Any, m22 as Any, m23 as Any, m31 as Any, m32 as Any, m33 as Any]) as! QTransform }
public func NewQTransform4(m11: Float, m12: Float, m21: Float, m22: Float, dx: Float, dy: Float) -> QTransform { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.NewQTransform4", "", m11 as Any, m12 as Any, m21 as Any, m22 as Any, dx as Any, dy as Any]) as! QTransform }
public func NewQTransform5(matrix: QMatrix_ITF? = nil) -> QTransform { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.NewQTransform5", "", matrix as Any]) as! QTransform }
public func QTransform_FromScale(sx: Float, sy: Float) -> QTransform { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.QTransform_FromScale", "", sx as Any, sy as Any]) as! QTransform }
public func QTransform_FromTranslate(dx: Float, dy: Float) -> QTransform { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.QTransform_FromTranslate", "", dx as Any, dy as Any]) as! QTransform }
public func QTransform_QuadToQuad(one: QPolygonF_ITF? = nil, two: QPolygonF_ITF? = nil, trans: QTransform_ITF? = nil) -> Bool { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.QTransform_QuadToQuad", "", one as Any, two as Any, trans as Any]) as! Bool }
public func QTransform_QuadToSquare(quad: QPolygonF_ITF? = nil, trans: QTransform_ITF? = nil) -> Bool { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.QTransform_QuadToSquare", "", quad as Any, trans as Any]) as! Bool }
public func QTransform_SquareToQuad(quad: QPolygonF_ITF? = nil, trans: QTransform_ITF? = nil) -> Bool { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.QTransform_SquareToQuad", "", quad as Any, trans as Any]) as! Bool }
public protocol QValidator_ITF: QObject_ITF {
    func QValidator_PTR() -> QValidator
}

public class QValidator: QObject, QValidator_ITF {
    public func QValidator_PTR() -> QValidator { callLocalFunction(l: ["", Pointer(), ___className, "QValidator_PTR"]) as! QValidator }
    public func ConnectChanged(f: @escaping () -> Void) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectChanged", "___REMOTE_CALLBACK___"], f: { (_: [Any]) -> Any in f() } as Any) }
    public func DisconnectChanged() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectChanged"]) }
    public func Changed() { _ = callLocalFunction(l: ["", Pointer(), ___className, "Changed"]) }
    public func ConnectFixup(f: @escaping (_ input: String) -> Void) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectFixup", "___REMOTE_CALLBACK___"], f: { (inp: [Any]) -> Any in f(inp[0] as! String) } as Any) }
    public func DisconnectFixup() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectFixup"]) }
    public func Fixup(input: String) { _ = callLocalFunction(l: ["", Pointer(), ___className, "Fixup", input as Any]) }
    public func FixupDefault(input: String) { _ = callLocalFunction(l: ["", Pointer(), ___className, "FixupDefault", input as Any]) }
    public func Locale() -> QLocale { callLocalFunction(l: ["", Pointer(), ___className, "Locale"]) as! QLocale }
    public func SetLocale(locale: QLocale_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetLocale", locale as Any]) }
    public func ConnectValidate(f: @escaping (_ input: String, _ pos: Int) -> Int) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectValidate", "___REMOTE_CALLBACK___"], f: { (inp: [Any]) -> Any in f(inp[0] as! String, Int(inp[1] as! Float)) } as Any) }
    public func DisconnectValidate() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectValidate"]) }
    public func Validate(input: String, pos: Int) -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "Validate", input as Any, pos as Any]) as! Float) }
    public func ConnectDestroyQValidator(f: @escaping () -> Void) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectDestroyQValidator", "___REMOTE_CALLBACK___"], f: { (_: [Any]) -> Any in f() } as Any) }
    public func DisconnectDestroyQValidator() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectDestroyQValidator"]) }
    public func DestroyQValidator() { _ = callLocalFunction(l: ["", Pointer(), ___className, "DestroyQValidator"]) }
    public func DestroyQValidatorDefault() { _ = callLocalFunction(l: ["", Pointer(), ___className, "DestroyQValidatorDefault"]) }
    override public func ChildEventDefault(event: QChildEvent_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "ChildEventDefault", event as Any]) }
    override public func ConnectNotifyDefault(sign: QMetaMethod_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "ConnectNotifyDefault", sign as Any]) }
    override public func CustomEventDefault(event: QEvent_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "CustomEventDefault", event as Any]) }
    override public func DeleteLaterDefault() { _ = callLocalFunction(l: ["", Pointer(), ___className, "DeleteLaterDefault"]) }
    override public func DisconnectNotifyDefault(sign: QMetaMethod_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "DisconnectNotifyDefault", sign as Any]) }
    override public func EventDefault(e: QEvent_ITF? = nil) -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "EventDefault", e as Any]) as! Bool }
    override public func EventFilterDefault(watched: QObject_ITF? = nil, event: QEvent_ITF? = nil) -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "EventFilterDefault", watched as Any, event as Any]) as! Bool }
    override public func MetaObjectDefault() -> QMetaObject { callLocalFunction(l: ["", Pointer(), ___className, "MetaObjectDefault"]) as! QMetaObject }
    override public func TimerEventDefault(event: QTimerEvent_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "TimerEventDefault", event as Any]) }
}

public func NewQValidatorFromPointer(ptr: String) -> QValidator { let r = QValidator(); r.initFrom(p: ptr, n: "gui.QValidator"); return r }
public func NewQValidator(parent: QObject_ITF? = nil) -> QValidator { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.NewQValidator", "", parent as Any]) as! QValidator }
public protocol QVector2D_ITF {
    func QVector2D_PTR() -> QVector2D
}

public class QVector2D: Internal, QVector2D_ITF {
    public func QVector2D_PTR() -> QVector2D { callLocalFunction(l: ["", Pointer(), ___className, "QVector2D_PTR"]) as! QVector2D }
    public func DestroyQVector2D() { _ = callLocalFunction(l: ["", Pointer(), ___className, "DestroyQVector2D"]) }
    public func DistanceToLine(point: QVector2D_ITF? = nil, direction: QVector2D_ITF? = nil) -> Float { callLocalFunction(l: ["", Pointer(), ___className, "DistanceToLine", point as Any, direction as Any]) as! Float }
    public func DistanceToPoint(point: QVector2D_ITF? = nil) -> Float { callLocalFunction(l: ["", Pointer(), ___className, "DistanceToPoint", point as Any]) as! Float }
    public func DotProduct(v1: QVector2D_ITF? = nil, v2: QVector2D_ITF? = nil) -> Float { callLocalFunction(l: ["", Pointer(), ___className, "DotProduct", v1 as Any, v2 as Any]) as! Float }
    public func IsNull() -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "IsNull"]) as! Bool }
    public func Length() -> Float { callLocalFunction(l: ["", Pointer(), ___className, "Length"]) as! Float }
    public func LengthSquared() -> Float { callLocalFunction(l: ["", Pointer(), ___className, "LengthSquared"]) as! Float }
    public func Normalize() { _ = callLocalFunction(l: ["", Pointer(), ___className, "Normalize"]) }
    public func Normalized() -> QVector2D { callLocalFunction(l: ["", Pointer(), ___className, "Normalized"]) as! QVector2D }
    public func SetX(x: Float) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetX", x as Any]) }
    public func SetY(y: Float) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetY", y as Any]) }
    public func ToPoint() -> QPoint { callLocalFunction(l: ["", Pointer(), ___className, "ToPoint"]) as! QPoint }
    public func ToPointF() -> QPointF { callLocalFunction(l: ["", Pointer(), ___className, "ToPointF"]) as! QPointF }
    public func ToVector3D() -> QVector3D { callLocalFunction(l: ["", Pointer(), ___className, "ToVector3D"]) as! QVector3D }
    public func ToVector4D() -> QVector4D { callLocalFunction(l: ["", Pointer(), ___className, "ToVector4D"]) as! QVector4D }
    public func X() -> Float { callLocalFunction(l: ["", Pointer(), ___className, "X"]) as! Float }
    public func Y() -> Float { callLocalFunction(l: ["", Pointer(), ___className, "Y"]) as! Float }
}

public func NewQVector2DFromPointer(ptr: String) -> QVector2D { let r = QVector2D(); r.initFrom(p: ptr, n: "gui.QVector2D"); return r }
public func NewQVector2D() -> QVector2D { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.NewQVector2D", ""]) as! QVector2D }
public func NewQVector2D3(xpos: Float, ypos: Float) -> QVector2D { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.NewQVector2D3", "", xpos as Any, ypos as Any]) as! QVector2D }
public func NewQVector2D4(point: QPoint_ITF? = nil) -> QVector2D { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.NewQVector2D4", "", point as Any]) as! QVector2D }
public func NewQVector2D5(point: QPointF_ITF? = nil) -> QVector2D { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.NewQVector2D5", "", point as Any]) as! QVector2D }
public func NewQVector2D6(vector: QVector3D_ITF? = nil) -> QVector2D { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.NewQVector2D6", "", vector as Any]) as! QVector2D }
public func NewQVector2D7(vector: QVector4D_ITF? = nil) -> QVector2D { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.NewQVector2D7", "", vector as Any]) as! QVector2D }
public func QVector2D_DotProduct(v1: QVector2D_ITF? = nil, v2: QVector2D_ITF? = nil) -> Float { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.QVector2D_DotProduct", "", v1 as Any, v2 as Any]) as! Float }
public protocol QVector3D_ITF {
    func QVector3D_PTR() -> QVector3D
}

public class QVector3D: Internal, QVector3D_ITF {
    public func QVector3D_PTR() -> QVector3D { callLocalFunction(l: ["", Pointer(), ___className, "QVector3D_PTR"]) as! QVector3D }
    public func DestroyQVector3D() { _ = callLocalFunction(l: ["", Pointer(), ___className, "DestroyQVector3D"]) }
    public func CrossProduct(v1: QVector3D_ITF? = nil, v2: QVector3D_ITF? = nil) -> QVector3D { callLocalFunction(l: ["", Pointer(), ___className, "CrossProduct", v1 as Any, v2 as Any]) as! QVector3D }
    public func DistanceToLine(point: QVector3D_ITF? = nil, direction: QVector3D_ITF? = nil) -> Float { callLocalFunction(l: ["", Pointer(), ___className, "DistanceToLine", point as Any, direction as Any]) as! Float }
    public func DistanceToPlane(plane: QVector3D_ITF? = nil, normal: QVector3D_ITF? = nil) -> Float { callLocalFunction(l: ["", Pointer(), ___className, "DistanceToPlane", plane as Any, normal as Any]) as! Float }
    public func DistanceToPlane2(plane1: QVector3D_ITF? = nil, plane2: QVector3D_ITF? = nil, plane3: QVector3D_ITF? = nil) -> Float { callLocalFunction(l: ["", Pointer(), ___className, "DistanceToPlane2", plane1 as Any, plane2 as Any, plane3 as Any]) as! Float }
    public func DistanceToPoint(point: QVector3D_ITF? = nil) -> Float { callLocalFunction(l: ["", Pointer(), ___className, "DistanceToPoint", point as Any]) as! Float }
    public func DotProduct(v1: QVector3D_ITF? = nil, v2: QVector3D_ITF? = nil) -> Float { callLocalFunction(l: ["", Pointer(), ___className, "DotProduct", v1 as Any, v2 as Any]) as! Float }
    public func IsNull() -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "IsNull"]) as! Bool }
    public func Length() -> Float { callLocalFunction(l: ["", Pointer(), ___className, "Length"]) as! Float }
    public func LengthSquared() -> Float { callLocalFunction(l: ["", Pointer(), ___className, "LengthSquared"]) as! Float }
    public func Normal(v1: QVector3D_ITF? = nil, v2: QVector3D_ITF? = nil) -> QVector3D { callLocalFunction(l: ["", Pointer(), ___className, "Normal", v1 as Any, v2 as Any]) as! QVector3D }
    public func Normal2(v1: QVector3D_ITF? = nil, v2: QVector3D_ITF? = nil, v3: QVector3D_ITF? = nil) -> QVector3D { callLocalFunction(l: ["", Pointer(), ___className, "Normal2", v1 as Any, v2 as Any, v3 as Any]) as! QVector3D }
    public func Normalize() { _ = callLocalFunction(l: ["", Pointer(), ___className, "Normalize"]) }
    public func Normalized() -> QVector3D { callLocalFunction(l: ["", Pointer(), ___className, "Normalized"]) as! QVector3D }
    public func Project(modelView: QMatrix4x4_ITF? = nil, projection: QMatrix4x4_ITF? = nil, viewport: QRect_ITF? = nil) -> QVector3D { callLocalFunction(l: ["", Pointer(), ___className, "Project", modelView as Any, projection as Any, viewport as Any]) as! QVector3D }
    public func SetX(x: Float) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetX", x as Any]) }
    public func SetY(y: Float) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetY", y as Any]) }
    public func SetZ(z: Float) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetZ", z as Any]) }
    public func ToPoint() -> QPoint { callLocalFunction(l: ["", Pointer(), ___className, "ToPoint"]) as! QPoint }
    public func ToPointF() -> QPointF { callLocalFunction(l: ["", Pointer(), ___className, "ToPointF"]) as! QPointF }
    public func ToVector2D() -> QVector2D { callLocalFunction(l: ["", Pointer(), ___className, "ToVector2D"]) as! QVector2D }
    public func ToVector4D() -> QVector4D { callLocalFunction(l: ["", Pointer(), ___className, "ToVector4D"]) as! QVector4D }
    public func Unproject(modelView: QMatrix4x4_ITF? = nil, projection: QMatrix4x4_ITF? = nil, viewport: QRect_ITF? = nil) -> QVector3D { callLocalFunction(l: ["", Pointer(), ___className, "Unproject", modelView as Any, projection as Any, viewport as Any]) as! QVector3D }
    public func X() -> Float { callLocalFunction(l: ["", Pointer(), ___className, "X"]) as! Float }
    public func Y() -> Float { callLocalFunction(l: ["", Pointer(), ___className, "Y"]) as! Float }
    public func Z() -> Float { callLocalFunction(l: ["", Pointer(), ___className, "Z"]) as! Float }
}

public func NewQVector3DFromPointer(ptr: String) -> QVector3D { let r = QVector3D(); r.initFrom(p: ptr, n: "gui.QVector3D"); return r }
public func NewQVector3D() -> QVector3D { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.NewQVector3D", ""]) as! QVector3D }
public func NewQVector3D3(xpos: Float, ypos: Float, zpos: Float) -> QVector3D { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.NewQVector3D3", "", xpos as Any, ypos as Any, zpos as Any]) as! QVector3D }
public func NewQVector3D4(point: QPoint_ITF? = nil) -> QVector3D { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.NewQVector3D4", "", point as Any]) as! QVector3D }
public func NewQVector3D5(point: QPointF_ITF? = nil) -> QVector3D { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.NewQVector3D5", "", point as Any]) as! QVector3D }
public func NewQVector3D6(vector: QVector2D_ITF? = nil) -> QVector3D { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.NewQVector3D6", "", vector as Any]) as! QVector3D }
public func NewQVector3D7(vector: QVector2D_ITF? = nil, zpos: Float) -> QVector3D { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.NewQVector3D7", "", vector as Any, zpos as Any]) as! QVector3D }
public func NewQVector3D8(vector: QVector4D_ITF? = nil) -> QVector3D { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.NewQVector3D8", "", vector as Any]) as! QVector3D }
public func QVector3D_CrossProduct(v1: QVector3D_ITF? = nil, v2: QVector3D_ITF? = nil) -> QVector3D { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.QVector3D_CrossProduct", "", v1 as Any, v2 as Any]) as! QVector3D }
public func QVector3D_DotProduct(v1: QVector3D_ITF? = nil, v2: QVector3D_ITF? = nil) -> Float { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.QVector3D_DotProduct", "", v1 as Any, v2 as Any]) as! Float }
public func QVector3D_Normal(v1: QVector3D_ITF? = nil, v2: QVector3D_ITF? = nil) -> QVector3D { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.QVector3D_Normal", "", v1 as Any, v2 as Any]) as! QVector3D }
public func QVector3D_Normal2(v1: QVector3D_ITF? = nil, v2: QVector3D_ITF? = nil, v3: QVector3D_ITF? = nil) -> QVector3D { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.QVector3D_Normal2", "", v1 as Any, v2 as Any, v3 as Any]) as! QVector3D }
public protocol QVector4D_ITF {
    func QVector4D_PTR() -> QVector4D
}

public class QVector4D: Internal, QVector4D_ITF {
    public func QVector4D_PTR() -> QVector4D { callLocalFunction(l: ["", Pointer(), ___className, "QVector4D_PTR"]) as! QVector4D }
    public func DestroyQVector4D() { _ = callLocalFunction(l: ["", Pointer(), ___className, "DestroyQVector4D"]) }
    public func DotProduct(v1: QVector4D_ITF? = nil, v2: QVector4D_ITF? = nil) -> Float { callLocalFunction(l: ["", Pointer(), ___className, "DotProduct", v1 as Any, v2 as Any]) as! Float }
    public func IsNull() -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "IsNull"]) as! Bool }
    public func Length() -> Float { callLocalFunction(l: ["", Pointer(), ___className, "Length"]) as! Float }
    public func LengthSquared() -> Float { callLocalFunction(l: ["", Pointer(), ___className, "LengthSquared"]) as! Float }
    public func Normalize() { _ = callLocalFunction(l: ["", Pointer(), ___className, "Normalize"]) }
    public func Normalized() -> QVector4D { callLocalFunction(l: ["", Pointer(), ___className, "Normalized"]) as! QVector4D }
    public func SetW(w: Float) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetW", w as Any]) }
    public func SetX(x: Float) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetX", x as Any]) }
    public func SetY(y: Float) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetY", y as Any]) }
    public func SetZ(z: Float) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetZ", z as Any]) }
    public func ToPoint() -> QPoint { callLocalFunction(l: ["", Pointer(), ___className, "ToPoint"]) as! QPoint }
    public func ToPointF() -> QPointF { callLocalFunction(l: ["", Pointer(), ___className, "ToPointF"]) as! QPointF }
    public func ToVector2D() -> QVector2D { callLocalFunction(l: ["", Pointer(), ___className, "ToVector2D"]) as! QVector2D }
    public func ToVector2DAffine() -> QVector2D { callLocalFunction(l: ["", Pointer(), ___className, "ToVector2DAffine"]) as! QVector2D }
    public func ToVector3D() -> QVector3D { callLocalFunction(l: ["", Pointer(), ___className, "ToVector3D"]) as! QVector3D }
    public func ToVector3DAffine() -> QVector3D { callLocalFunction(l: ["", Pointer(), ___className, "ToVector3DAffine"]) as! QVector3D }
    public func W() -> Float { callLocalFunction(l: ["", Pointer(), ___className, "W"]) as! Float }
    public func X() -> Float { callLocalFunction(l: ["", Pointer(), ___className, "X"]) as! Float }
    public func Y() -> Float { callLocalFunction(l: ["", Pointer(), ___className, "Y"]) as! Float }
    public func Z() -> Float { callLocalFunction(l: ["", Pointer(), ___className, "Z"]) as! Float }
}

public func NewQVector4DFromPointer(ptr: String) -> QVector4D { let r = QVector4D(); r.initFrom(p: ptr, n: "gui.QVector4D"); return r }
public func NewQVector4D() -> QVector4D { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.NewQVector4D", ""]) as! QVector4D }
public func NewQVector4D3(xpos: Float, ypos: Float, zpos: Float, wpos: Float) -> QVector4D { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.NewQVector4D3", "", xpos as Any, ypos as Any, zpos as Any, wpos as Any]) as! QVector4D }
public func NewQVector4D4(point: QPoint_ITF? = nil) -> QVector4D { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.NewQVector4D4", "", point as Any]) as! QVector4D }
public func NewQVector4D5(point: QPointF_ITF? = nil) -> QVector4D { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.NewQVector4D5", "", point as Any]) as! QVector4D }
public func NewQVector4D6(vector: QVector2D_ITF? = nil) -> QVector4D { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.NewQVector4D6", "", vector as Any]) as! QVector4D }
public func NewQVector4D7(vector: QVector2D_ITF? = nil, zpos: Float, wpos: Float) -> QVector4D { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.NewQVector4D7", "", vector as Any, zpos as Any, wpos as Any]) as! QVector4D }
public func NewQVector4D8(vector: QVector3D_ITF? = nil) -> QVector4D { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.NewQVector4D8", "", vector as Any]) as! QVector4D }
public func NewQVector4D9(vector: QVector3D_ITF? = nil, wpos: Float) -> QVector4D { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.NewQVector4D9", "", vector as Any, wpos as Any]) as! QVector4D }
public func QVector4D_DotProduct(v1: QVector4D_ITF? = nil, v2: QVector4D_ITF? = nil) -> Float { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.QVector4D_DotProduct", "", v1 as Any, v2 as Any]) as! Float }
public protocol QVulkanDeviceFunctions_ITF {
    func QVulkanDeviceFunctions_PTR() -> QVulkanDeviceFunctions
}

public class QVulkanDeviceFunctions: Internal, QVulkanDeviceFunctions_ITF {
    public func QVulkanDeviceFunctions_PTR() -> QVulkanDeviceFunctions { callLocalFunction(l: ["", Pointer(), ___className, "QVulkanDeviceFunctions_PTR"]) as! QVulkanDeviceFunctions }
    public func DestroyQVulkanDeviceFunctions() { _ = callLocalFunction(l: ["", Pointer(), ___className, "DestroyQVulkanDeviceFunctions"]) }
}

public protocol QVulkanExtension_ITF {
    func QVulkanExtension_PTR() -> QVulkanExtension
}

public class QVulkanExtension: Internal, QVulkanExtension_ITF {
    public func QVulkanExtension_PTR() -> QVulkanExtension { callLocalFunction(l: ["", Pointer(), ___className, "QVulkanExtension_PTR"]) as! QVulkanExtension }
    public func DestroyQVulkanExtension() { _ = callLocalFunction(l: ["", Pointer(), ___className, "DestroyQVulkanExtension"]) }
}

public protocol QVulkanFunctions_ITF {
    func QVulkanFunctions_PTR() -> QVulkanFunctions
}

public class QVulkanFunctions: Internal, QVulkanFunctions_ITF {
    public func QVulkanFunctions_PTR() -> QVulkanFunctions { callLocalFunction(l: ["", Pointer(), ___className, "QVulkanFunctions_PTR"]) as! QVulkanFunctions }
    public func DestroyQVulkanFunctions() { _ = callLocalFunction(l: ["", Pointer(), ___className, "DestroyQVulkanFunctions"]) }
}

public protocol QVulkanInfoVector_ITF: QVector_ITF {
    func QVulkanInfoVector_PTR() -> QVulkanInfoVector
}

public class QVulkanInfoVector: QVector, QVulkanInfoVector_ITF {
    public func QVulkanInfoVector_PTR() -> QVulkanInfoVector { callLocalFunction(l: ["", Pointer(), ___className, "QVulkanInfoVector_PTR"]) as! QVulkanInfoVector }
    public func DestroyQVulkanInfoVector() { _ = callLocalFunction(l: ["", Pointer(), ___className, "DestroyQVulkanInfoVector"]) }
}

public protocol QVulkanInstance_ITF {
    func QVulkanInstance_PTR() -> QVulkanInstance
}

public class QVulkanInstance: Internal, QVulkanInstance_ITF {
    public func QVulkanInstance_PTR() -> QVulkanInstance { callLocalFunction(l: ["", Pointer(), ___className, "QVulkanInstance_PTR"]) as! QVulkanInstance }
}

public protocol QVulkanLayer_ITF {
    func QVulkanLayer_PTR() -> QVulkanLayer
}

public class QVulkanLayer: Internal, QVulkanLayer_ITF {
    public func QVulkanLayer_PTR() -> QVulkanLayer { callLocalFunction(l: ["", Pointer(), ___className, "QVulkanLayer_PTR"]) as! QVulkanLayer }
    public func DestroyQVulkanLayer() { _ = callLocalFunction(l: ["", Pointer(), ___className, "DestroyQVulkanLayer"]) }
}

public protocol QVulkanWindow_ITF: QWindow_ITF {
    func QVulkanWindow_PTR() -> QVulkanWindow
}

public class QVulkanWindow: QWindow, QVulkanWindow_ITF {
    public func QVulkanWindow_PTR() -> QVulkanWindow { callLocalFunction(l: ["", Pointer(), ___className, "QVulkanWindow_PTR"]) as! QVulkanWindow }
}

public protocol QVulkanWindowRenderer_ITF {
    func QVulkanWindowRenderer_PTR() -> QVulkanWindowRenderer
}

public class QVulkanWindowRenderer: Internal, QVulkanWindowRenderer_ITF {
    public func QVulkanWindowRenderer_PTR() -> QVulkanWindowRenderer { callLocalFunction(l: ["", Pointer(), ___className, "QVulkanWindowRenderer_PTR"]) as! QVulkanWindowRenderer }
}

public protocol QWhatsThisClickedEvent_ITF: QEvent_ITF {
    func QWhatsThisClickedEvent_PTR() -> QWhatsThisClickedEvent
}

public class QWhatsThisClickedEvent: QEvent, QWhatsThisClickedEvent_ITF {
    public func QWhatsThisClickedEvent_PTR() -> QWhatsThisClickedEvent { callLocalFunction(l: ["", Pointer(), ___className, "QWhatsThisClickedEvent_PTR"]) as! QWhatsThisClickedEvent }
    public func DestroyQWhatsThisClickedEvent() { _ = callLocalFunction(l: ["", Pointer(), ___className, "DestroyQWhatsThisClickedEvent"]) }
    public func Href() -> String { callLocalFunction(l: ["", Pointer(), ___className, "Href"]) as! String }
}

public func NewQWhatsThisClickedEventFromPointer(ptr: String) -> QWhatsThisClickedEvent { let r = QWhatsThisClickedEvent(); r.initFrom(p: ptr, n: "gui.QWhatsThisClickedEvent"); return r }
public func NewQWhatsThisClickedEvent(href: String) -> QWhatsThisClickedEvent { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.NewQWhatsThisClickedEvent", "", href as Any]) as! QWhatsThisClickedEvent }
public protocol QWheelEvent_ITF: QInputEvent_ITF {
    func QWheelEvent_PTR() -> QWheelEvent
}

public class QWheelEvent: QInputEvent, QWheelEvent_ITF {
    public func QWheelEvent_PTR() -> QWheelEvent { callLocalFunction(l: ["", Pointer(), ___className, "QWheelEvent_PTR"]) as! QWheelEvent }
    public func DestroyQWheelEvent() { _ = callLocalFunction(l: ["", Pointer(), ___className, "DestroyQWheelEvent"]) }
    public func AngleDelta() -> QPoint { callLocalFunction(l: ["", Pointer(), ___className, "AngleDelta"]) as! QPoint }
    public func Buttons() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "Buttons"]) as! Float) }
    public func GlobalPos() -> QPoint { callLocalFunction(l: ["", Pointer(), ___className, "GlobalPos"]) as! QPoint }
    public func GlobalPosF() -> QPointF { callLocalFunction(l: ["", Pointer(), ___className, "GlobalPosF"]) as! QPointF }
    public func GlobalX() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "GlobalX"]) as! Float) }
    public func GlobalY() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "GlobalY"]) as! Float) }
    public func Inverted() -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "Inverted"]) as! Bool }
    public func Phase() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "Phase"]) as! Float) }
    public func PixelDelta() -> QPoint { callLocalFunction(l: ["", Pointer(), ___className, "PixelDelta"]) as! QPoint }
    public func Pos() -> QPoint { callLocalFunction(l: ["", Pointer(), ___className, "Pos"]) as! QPoint }
    public func PosF() -> QPointF { callLocalFunction(l: ["", Pointer(), ___className, "PosF"]) as! QPointF }
    public func Source() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "Source"]) as! Float) }
    public func X() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "X"]) as! Float) }
    public func Y() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "Y"]) as! Float) }
}

public func NewQWheelEventFromPointer(ptr: String) -> QWheelEvent { let r = QWheelEvent(); r.initFrom(p: ptr, n: "gui.QWheelEvent"); return r }
public func NewQWheelEvent3(pos: QPointF_ITF? = nil, globalPos: QPointF_ITF? = nil, pixelDelta: QPoint_ITF? = nil, angleDelta: QPoint_ITF? = nil, qt4Delta: Int, qt4Orientation: Int, buttons: Int, modifiers: Int) -> QWheelEvent { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.NewQWheelEvent3", "", pos as Any, globalPos as Any, pixelDelta as Any, angleDelta as Any, qt4Delta as Any, qt4Orientation as Any, buttons as Any, modifiers as Any]) as! QWheelEvent }
public func NewQWheelEvent4(pos: QPointF_ITF? = nil, globalPos: QPointF_ITF? = nil, pixelDelta: QPoint_ITF? = nil, angleDelta: QPoint_ITF? = nil, qt4Delta: Int, qt4Orientation: Int, buttons: Int, modifiers: Int, phase: Int) -> QWheelEvent { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.NewQWheelEvent4", "", pos as Any, globalPos as Any, pixelDelta as Any, angleDelta as Any, qt4Delta as Any, qt4Orientation as Any, buttons as Any, modifiers as Any, phase as Any]) as! QWheelEvent }
public func NewQWheelEvent5(pos: QPointF_ITF? = nil, globalPos: QPointF_ITF? = nil, pixelDelta: QPoint_ITF? = nil, angleDelta: QPoint_ITF? = nil, qt4Delta: Int, qt4Orientation: Int, buttons: Int, modifiers: Int, phase: Int, source: Int) -> QWheelEvent { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.NewQWheelEvent5", "", pos as Any, globalPos as Any, pixelDelta as Any, angleDelta as Any, qt4Delta as Any, qt4Orientation as Any, buttons as Any, modifiers as Any, phase as Any, source as Any]) as! QWheelEvent }
public func NewQWheelEvent6(pos: QPointF_ITF? = nil, globalPos: QPointF_ITF? = nil, pixelDelta: QPoint_ITF? = nil, angleDelta: QPoint_ITF? = nil, qt4Delta: Int, qt4Orientation: Int, buttons: Int, modifiers: Int, phase: Int, source: Int, inverted: Bool) -> QWheelEvent { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.NewQWheelEvent6", "", pos as Any, globalPos as Any, pixelDelta as Any, angleDelta as Any, qt4Delta as Any, qt4Orientation as Any, buttons as Any, modifiers as Any, phase as Any, source as Any, inverted as Any]) as! QWheelEvent }
public func NewQWheelEvent7(pos: QPointF_ITF? = nil, globalPos: QPointF_ITF? = nil, pixelDelta: QPoint_ITF? = nil, angleDelta: QPoint_ITF? = nil, buttons: Int, modifiers: Int, phase: Int, inverted: Bool, source: Int) -> QWheelEvent { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.NewQWheelEvent7", "", pos as Any, globalPos as Any, pixelDelta as Any, angleDelta as Any, buttons as Any, modifiers as Any, phase as Any, inverted as Any, source as Any]) as! QWheelEvent }
public protocol QWindow_ITF: QSurface_ITF {
    func QWindow_PTR() -> QWindow
    func QObject_PTR() -> QObject
}

public class QWindow: QSurface, QWindow_ITF {
    public func QObject_PTR() -> QObject { callLocalFunction(l: ["", Pointer(), ___className, "QObject_PTR"]) as! QObject }
    public func QWindow_PTR() -> QWindow { callLocalFunction(l: ["", Pointer(), ___className, "QWindow_PTR"]) as! QWindow }
    public func ConnectActiveChanged(f: @escaping () -> Void) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectActiveChanged", "___REMOTE_CALLBACK___"], f: { (_: [Any]) -> Any in f() } as Any) }
    public func DisconnectActiveChanged() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectActiveChanged"]) }
    public func ActiveChanged() { _ = callLocalFunction(l: ["", Pointer(), ___className, "ActiveChanged"]) }
    public func ConnectAlert(f: @escaping (_ msec: Int) -> Void) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectAlert", "___REMOTE_CALLBACK___"], f: { (inp: [Any]) -> Any in f(Int(inp[0] as! Float)) } as Any) }
    public func DisconnectAlert() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectAlert"]) }
    public func Alert(msec: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "Alert", msec as Any]) }
    public func AlertDefault(msec: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "AlertDefault", msec as Any]) }
    public func BaseSize() -> QSize { callLocalFunction(l: ["", Pointer(), ___className, "BaseSize"]) as! QSize }
    public func ConnectClose(f: @escaping () -> Bool) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectClose", "___REMOTE_CALLBACK___"], f: { (_: [Any]) -> Any in f() } as Any) }
    public func DisconnectClose() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectClose"]) }
    public func Close() -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "Close"]) as! Bool }
    public func CloseDefault() -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "CloseDefault"]) as! Bool }
    public func ContentOrientation() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "ContentOrientation"]) as! Float) }
    public func ConnectContentOrientationChanged(f: @escaping (_ orientation: Int) -> Void) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectContentOrientationChanged", "___REMOTE_CALLBACK___"], f: { (inp: [Any]) -> Any in f(Int(inp[0] as! Float)) } as Any) }
    public func DisconnectContentOrientationChanged() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectContentOrientationChanged"]) }
    public func ContentOrientationChanged(orientation: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "ContentOrientationChanged", orientation as Any]) }
    public func Create() { _ = callLocalFunction(l: ["", Pointer(), ___className, "Create"]) }
    public func Cursor() -> QCursor { callLocalFunction(l: ["", Pointer(), ___className, "Cursor"]) as! QCursor }
    public func Destroy() { _ = callLocalFunction(l: ["", Pointer(), ___className, "Destroy"]) }
    public func DevicePixelRatio() -> Float { callLocalFunction(l: ["", Pointer(), ___className, "DevicePixelRatio"]) as! Float }
    public func ConnectEvent(f: @escaping (_ ev: QEvent) -> Bool) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectEvent", "___REMOTE_CALLBACK___"], f: { (inp: [Any]) -> Any in f(inp[0] as! QEvent) } as Any) }
    public func DisconnectEvent() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectEvent"]) }
    public func Event(ev: QEvent_ITF? = nil) -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "Event", ev as Any]) as! Bool }
    public func EventDefault(ev: QEvent_ITF? = nil) -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "EventDefault", ev as Any]) as! Bool }
    public func ConnectExposeEvent(f: @escaping (_ ev: QExposeEvent) -> Void) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectExposeEvent", "___REMOTE_CALLBACK___"], f: { (inp: [Any]) -> Any in f(inp[0] as! QExposeEvent) } as Any) }
    public func DisconnectExposeEvent() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectExposeEvent"]) }
    public func ExposeEvent(ev: QExposeEvent_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "ExposeEvent", ev as Any]) }
    public func ExposeEventDefault(ev: QExposeEvent_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "ExposeEventDefault", ev as Any]) }
    public func FilePath() -> String { callLocalFunction(l: ["", Pointer(), ___className, "FilePath"]) as! String }
    public func Flags() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "Flags"]) as! Float) }
    public func ConnectFocusInEvent(f: @escaping (_ ev: QFocusEvent) -> Void) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectFocusInEvent", "___REMOTE_CALLBACK___"], f: { (inp: [Any]) -> Any in f(inp[0] as! QFocusEvent) } as Any) }
    public func DisconnectFocusInEvent() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectFocusInEvent"]) }
    public func FocusInEvent(ev: QFocusEvent_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "FocusInEvent", ev as Any]) }
    public func FocusInEventDefault(ev: QFocusEvent_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "FocusInEventDefault", ev as Any]) }
    public func ConnectFocusObject(f: @escaping () -> QObject) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectFocusObject", "___REMOTE_CALLBACK___"], f: { (_: [Any]) -> Any in f() } as Any) }
    public func DisconnectFocusObject() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectFocusObject"]) }
    public func FocusObject() -> QObject { callLocalFunction(l: ["", Pointer(), ___className, "FocusObject"]) as! QObject }
    public func FocusObjectDefault() -> QObject { callLocalFunction(l: ["", Pointer(), ___className, "FocusObjectDefault"]) as! QObject }
    public func ConnectFocusObjectChanged(f: @escaping (_ object: QObject) -> Void) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectFocusObjectChanged", "___REMOTE_CALLBACK___"], f: { (inp: [Any]) -> Any in f(inp[0] as! QObject) } as Any) }
    public func DisconnectFocusObjectChanged() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectFocusObjectChanged"]) }
    public func FocusObjectChanged(object: QObject_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "FocusObjectChanged", object as Any]) }
    public func ConnectFocusOutEvent(f: @escaping (_ ev: QFocusEvent) -> Void) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectFocusOutEvent", "___REMOTE_CALLBACK___"], f: { (inp: [Any]) -> Any in f(inp[0] as! QFocusEvent) } as Any) }
    public func DisconnectFocusOutEvent() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectFocusOutEvent"]) }
    public func FocusOutEvent(ev: QFocusEvent_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "FocusOutEvent", ev as Any]) }
    public func FocusOutEventDefault(ev: QFocusEvent_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "FocusOutEventDefault", ev as Any]) }
    override public func ConnectFormat(f: @escaping () -> QSurfaceFormat) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectFormat", "___REMOTE_CALLBACK___"], f: { (_: [Any]) -> Any in f() } as Any) }
    override public func DisconnectFormat() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectFormat"]) }
    override public func Format() -> QSurfaceFormat { callLocalFunction(l: ["", Pointer(), ___className, "Format"]) as! QSurfaceFormat }
    public func FormatDefault() -> QSurfaceFormat { callLocalFunction(l: ["", Pointer(), ___className, "FormatDefault"]) as! QSurfaceFormat }
    public func FrameGeometry() -> QRect { callLocalFunction(l: ["", Pointer(), ___className, "FrameGeometry"]) as! QRect }
    public func FrameMargins() -> QMargins { callLocalFunction(l: ["", Pointer(), ___className, "FrameMargins"]) as! QMargins }
    public func FramePosition() -> QPoint { callLocalFunction(l: ["", Pointer(), ___className, "FramePosition"]) as! QPoint }
    public func FromWinId(id: Int) -> QWindow { callLocalFunction(l: ["", Pointer(), ___className, "FromWinId", id as Any]) as! QWindow }
    public func Geometry() -> QRect { callLocalFunction(l: ["", Pointer(), ___className, "Geometry"]) as! QRect }
    public func Height() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "Height"]) as! Float) }
    public func ConnectHeightChanged(f: @escaping (_ arg: Int) -> Void) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectHeightChanged", "___REMOTE_CALLBACK___"], f: { (inp: [Any]) -> Any in f(Int(inp[0] as! Float)) } as Any) }
    public func DisconnectHeightChanged() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectHeightChanged"]) }
    public func HeightChanged(arg: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "HeightChanged", arg as Any]) }
    public func ConnectHide(f: @escaping () -> Void) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectHide", "___REMOTE_CALLBACK___"], f: { (_: [Any]) -> Any in f() } as Any) }
    public func DisconnectHide() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectHide"]) }
    public func Hide() { _ = callLocalFunction(l: ["", Pointer(), ___className, "Hide"]) }
    public func HideDefault() { _ = callLocalFunction(l: ["", Pointer(), ___className, "HideDefault"]) }
    public func ConnectHideEvent(f: @escaping (_ ev: QHideEvent) -> Void) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectHideEvent", "___REMOTE_CALLBACK___"], f: { (inp: [Any]) -> Any in f(inp[0] as! QHideEvent) } as Any) }
    public func DisconnectHideEvent() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectHideEvent"]) }
    public func HideEvent(ev: QHideEvent_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "HideEvent", ev as Any]) }
    public func HideEventDefault(ev: QHideEvent_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "HideEventDefault", ev as Any]) }
    public func Icon() -> QIcon { callLocalFunction(l: ["", Pointer(), ___className, "Icon"]) as! QIcon }
    public func IsActive() -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "IsActive"]) as! Bool }
    public func IsAncestorOf(child: QWindow_ITF? = nil, mode: Int) -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "IsAncestorOf", child as Any, mode as Any]) as! Bool }
    public func IsExposed() -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "IsExposed"]) as! Bool }
    public func IsModal() -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "IsModal"]) as! Bool }
    public func IsTopLevel() -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "IsTopLevel"]) as! Bool }
    public func IsVisible() -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "IsVisible"]) as! Bool }
    public func ConnectKeyPressEvent(f: @escaping (_ ev: QKeyEvent) -> Void) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectKeyPressEvent", "___REMOTE_CALLBACK___"], f: { (inp: [Any]) -> Any in f(inp[0] as! QKeyEvent) } as Any) }
    public func DisconnectKeyPressEvent() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectKeyPressEvent"]) }
    public func KeyPressEvent(ev: QKeyEvent_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "KeyPressEvent", ev as Any]) }
    public func KeyPressEventDefault(ev: QKeyEvent_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "KeyPressEventDefault", ev as Any]) }
    public func ConnectKeyReleaseEvent(f: @escaping (_ ev: QKeyEvent) -> Void) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectKeyReleaseEvent", "___REMOTE_CALLBACK___"], f: { (inp: [Any]) -> Any in f(inp[0] as! QKeyEvent) } as Any) }
    public func DisconnectKeyReleaseEvent() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectKeyReleaseEvent"]) }
    public func KeyReleaseEvent(ev: QKeyEvent_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "KeyReleaseEvent", ev as Any]) }
    public func KeyReleaseEventDefault(ev: QKeyEvent_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "KeyReleaseEventDefault", ev as Any]) }
    public func ConnectLower(f: @escaping () -> Void) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectLower", "___REMOTE_CALLBACK___"], f: { (_: [Any]) -> Any in f() } as Any) }
    public func DisconnectLower() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectLower"]) }
    public func Lower() { _ = callLocalFunction(l: ["", Pointer(), ___className, "Lower"]) }
    public func LowerDefault() { _ = callLocalFunction(l: ["", Pointer(), ___className, "LowerDefault"]) }
    public func MapFromGlobal(pos: QPoint_ITF? = nil) -> QPoint { callLocalFunction(l: ["", Pointer(), ___className, "MapFromGlobal", pos as Any]) as! QPoint }
    public func MapToGlobal(pos: QPoint_ITF? = nil) -> QPoint { callLocalFunction(l: ["", Pointer(), ___className, "MapToGlobal", pos as Any]) as! QPoint }
    public func Mask() -> QRegion { callLocalFunction(l: ["", Pointer(), ___className, "Mask"]) as! QRegion }
    public func MaximumHeight() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "MaximumHeight"]) as! Float) }
    public func ConnectMaximumHeightChanged(f: @escaping (_ arg: Int) -> Void) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectMaximumHeightChanged", "___REMOTE_CALLBACK___"], f: { (inp: [Any]) -> Any in f(Int(inp[0] as! Float)) } as Any) }
    public func DisconnectMaximumHeightChanged() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectMaximumHeightChanged"]) }
    public func MaximumHeightChanged(arg: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "MaximumHeightChanged", arg as Any]) }
    public func MaximumSize() -> QSize { callLocalFunction(l: ["", Pointer(), ___className, "MaximumSize"]) as! QSize }
    public func MaximumWidth() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "MaximumWidth"]) as! Float) }
    public func ConnectMaximumWidthChanged(f: @escaping (_ arg: Int) -> Void) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectMaximumWidthChanged", "___REMOTE_CALLBACK___"], f: { (inp: [Any]) -> Any in f(Int(inp[0] as! Float)) } as Any) }
    public func DisconnectMaximumWidthChanged() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectMaximumWidthChanged"]) }
    public func MaximumWidthChanged(arg: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "MaximumWidthChanged", arg as Any]) }
    public func MinimumHeight() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "MinimumHeight"]) as! Float) }
    public func ConnectMinimumHeightChanged(f: @escaping (_ arg: Int) -> Void) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectMinimumHeightChanged", "___REMOTE_CALLBACK___"], f: { (inp: [Any]) -> Any in f(Int(inp[0] as! Float)) } as Any) }
    public func DisconnectMinimumHeightChanged() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectMinimumHeightChanged"]) }
    public func MinimumHeightChanged(arg: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "MinimumHeightChanged", arg as Any]) }
    public func MinimumSize() -> QSize { callLocalFunction(l: ["", Pointer(), ___className, "MinimumSize"]) as! QSize }
    public func MinimumWidth() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "MinimumWidth"]) as! Float) }
    public func ConnectMinimumWidthChanged(f: @escaping (_ arg: Int) -> Void) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectMinimumWidthChanged", "___REMOTE_CALLBACK___"], f: { (inp: [Any]) -> Any in f(Int(inp[0] as! Float)) } as Any) }
    public func DisconnectMinimumWidthChanged() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectMinimumWidthChanged"]) }
    public func MinimumWidthChanged(arg: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "MinimumWidthChanged", arg as Any]) }
    public func Modality() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "Modality"]) as! Float) }
    public func ConnectModalityChanged(f: @escaping (_ modality: Int) -> Void) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectModalityChanged", "___REMOTE_CALLBACK___"], f: { (inp: [Any]) -> Any in f(Int(inp[0] as! Float)) } as Any) }
    public func DisconnectModalityChanged() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectModalityChanged"]) }
    public func ModalityChanged(modality: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "ModalityChanged", modality as Any]) }
    public func ConnectMouseDoubleClickEvent(f: @escaping (_ ev: QMouseEvent) -> Void) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectMouseDoubleClickEvent", "___REMOTE_CALLBACK___"], f: { (inp: [Any]) -> Any in f(inp[0] as! QMouseEvent) } as Any) }
    public func DisconnectMouseDoubleClickEvent() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectMouseDoubleClickEvent"]) }
    public func MouseDoubleClickEvent(ev: QMouseEvent_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "MouseDoubleClickEvent", ev as Any]) }
    public func MouseDoubleClickEventDefault(ev: QMouseEvent_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "MouseDoubleClickEventDefault", ev as Any]) }
    public func ConnectMouseMoveEvent(f: @escaping (_ ev: QMouseEvent) -> Void) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectMouseMoveEvent", "___REMOTE_CALLBACK___"], f: { (inp: [Any]) -> Any in f(inp[0] as! QMouseEvent) } as Any) }
    public func DisconnectMouseMoveEvent() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectMouseMoveEvent"]) }
    public func MouseMoveEvent(ev: QMouseEvent_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "MouseMoveEvent", ev as Any]) }
    public func MouseMoveEventDefault(ev: QMouseEvent_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "MouseMoveEventDefault", ev as Any]) }
    public func ConnectMousePressEvent(f: @escaping (_ ev: QMouseEvent) -> Void) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectMousePressEvent", "___REMOTE_CALLBACK___"], f: { (inp: [Any]) -> Any in f(inp[0] as! QMouseEvent) } as Any) }
    public func DisconnectMousePressEvent() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectMousePressEvent"]) }
    public func MousePressEvent(ev: QMouseEvent_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "MousePressEvent", ev as Any]) }
    public func MousePressEventDefault(ev: QMouseEvent_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "MousePressEventDefault", ev as Any]) }
    public func ConnectMouseReleaseEvent(f: @escaping (_ ev: QMouseEvent) -> Void) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectMouseReleaseEvent", "___REMOTE_CALLBACK___"], f: { (inp: [Any]) -> Any in f(inp[0] as! QMouseEvent) } as Any) }
    public func DisconnectMouseReleaseEvent() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectMouseReleaseEvent"]) }
    public func MouseReleaseEvent(ev: QMouseEvent_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "MouseReleaseEvent", ev as Any]) }
    public func MouseReleaseEventDefault(ev: QMouseEvent_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "MouseReleaseEventDefault", ev as Any]) }
    public func ConnectMoveEvent(f: @escaping (_ ev: QMoveEvent) -> Void) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectMoveEvent", "___REMOTE_CALLBACK___"], f: { (inp: [Any]) -> Any in f(inp[0] as! QMoveEvent) } as Any) }
    public func DisconnectMoveEvent() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectMoveEvent"]) }
    public func MoveEvent(ev: QMoveEvent_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "MoveEvent", ev as Any]) }
    public func MoveEventDefault(ev: QMoveEvent_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "MoveEventDefault", ev as Any]) }
    public func ConnectNativeEvent(f: @escaping (_ eventType: QByteArray, _ message: Int, _ result: Int) -> Bool) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectNativeEvent", "___REMOTE_CALLBACK___"], f: { (inp: [Any]) -> Any in f(inp[0] as! QByteArray, Int(inp[1] as! Float), Int(inp[2] as! Float)) } as Any) }
    public func DisconnectNativeEvent() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectNativeEvent"]) }
    public func NativeEvent(eventType: QByteArray_ITF? = nil, message: Int, result: Int) -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "NativeEvent", eventType as Any, message as Any, result as Any]) as! Bool }
    public func NativeEventDefault(eventType: QByteArray_ITF? = nil, message: Int, result: Int) -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "NativeEventDefault", eventType as Any, message as Any, result as Any]) as! Bool }
    public func Opacity() -> Float { callLocalFunction(l: ["", Pointer(), ___className, "Opacity"]) as! Float }
    public func ConnectOpacityChanged(f: @escaping (_ opacity: Float) -> Void) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectOpacityChanged", "___REMOTE_CALLBACK___"], f: { (inp: [Any]) -> Any in f(inp[0] as! Float) } as Any) }
    public func DisconnectOpacityChanged() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectOpacityChanged"]) }
    public func OpacityChanged(opacity: Float) { _ = callLocalFunction(l: ["", Pointer(), ___className, "OpacityChanged", opacity as Any]) }
    public func Parent_QWindow(mode: Int) -> QWindow { callLocalFunction(l: ["", Pointer(), ___className, "Parent", mode as Any]) as! QWindow }
    public func Parent2() -> QWindow { callLocalFunction(l: ["", Pointer(), ___className, "Parent2"]) as! QWindow }
    public func Position() -> QPoint { callLocalFunction(l: ["", Pointer(), ___className, "Position"]) as! QPoint }
    public func ConnectRaise(f: @escaping () -> Void) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectRaise", "___REMOTE_CALLBACK___"], f: { (_: [Any]) -> Any in f() } as Any) }
    public func DisconnectRaise() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectRaise"]) }
    public func Raise() { _ = callLocalFunction(l: ["", Pointer(), ___className, "Raise"]) }
    public func RaiseDefault() { _ = callLocalFunction(l: ["", Pointer(), ___className, "RaiseDefault"]) }
    public func ReportContentOrientationChange(orientation: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "ReportContentOrientationChange", orientation as Any]) }
    public func ConnectRequestActivate(f: @escaping () -> Void) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectRequestActivate", "___REMOTE_CALLBACK___"], f: { (_: [Any]) -> Any in f() } as Any) }
    public func DisconnectRequestActivate() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectRequestActivate"]) }
    public func RequestActivate() { _ = callLocalFunction(l: ["", Pointer(), ___className, "RequestActivate"]) }
    public func RequestActivateDefault() { _ = callLocalFunction(l: ["", Pointer(), ___className, "RequestActivateDefault"]) }
    public func ConnectRequestUpdate(f: @escaping () -> Void) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectRequestUpdate", "___REMOTE_CALLBACK___"], f: { (_: [Any]) -> Any in f() } as Any) }
    public func DisconnectRequestUpdate() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectRequestUpdate"]) }
    public func RequestUpdate() { _ = callLocalFunction(l: ["", Pointer(), ___className, "RequestUpdate"]) }
    public func RequestUpdateDefault() { _ = callLocalFunction(l: ["", Pointer(), ___className, "RequestUpdateDefault"]) }
    public func RequestedFormat() -> QSurfaceFormat { callLocalFunction(l: ["", Pointer(), ___className, "RequestedFormat"]) as! QSurfaceFormat }
    public func Resize(newSize: QSize_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "Resize", newSize as Any]) }
    public func Resize2(w: Int, h: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "Resize2", w as Any, h as Any]) }
    public func ConnectResizeEvent(f: @escaping (_ ev: QResizeEvent) -> Void) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectResizeEvent", "___REMOTE_CALLBACK___"], f: { (inp: [Any]) -> Any in f(inp[0] as! QResizeEvent) } as Any) }
    public func DisconnectResizeEvent() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectResizeEvent"]) }
    public func ResizeEvent(ev: QResizeEvent_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "ResizeEvent", ev as Any]) }
    public func ResizeEventDefault(ev: QResizeEvent_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "ResizeEventDefault", ev as Any]) }
    public func Screen() -> QScreen { callLocalFunction(l: ["", Pointer(), ___className, "Screen"]) as! QScreen }
    public func ConnectScreenChanged(f: @escaping (_ screen: QScreen) -> Void) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectScreenChanged", "___REMOTE_CALLBACK___"], f: { (inp: [Any]) -> Any in f(inp[0] as! QScreen) } as Any) }
    public func DisconnectScreenChanged() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectScreenChanged"]) }
    public func ScreenChanged(screen: QScreen_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "ScreenChanged", screen as Any]) }
    public func SetBaseSize(size: QSize_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetBaseSize", size as Any]) }
    public func SetCursor(cursor: QCursor_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetCursor", cursor as Any]) }
    public func SetFilePath(filePath: String) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetFilePath", filePath as Any]) }
    public func SetFlag(flag: Int, on: Bool) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetFlag", flag as Any, on as Any]) }
    public func SetFlags(flags: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetFlags", flags as Any]) }
    public func SetFormat(format: QSurfaceFormat_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetFormat", format as Any]) }
    public func SetFramePosition(point: QPoint_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetFramePosition", point as Any]) }
    public func ConnectSetGeometry(f: @escaping (_ posx: Int, _ posy: Int, _ w: Int, _ h: Int) -> Void) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectSetGeometry", "___REMOTE_CALLBACK___"], f: { (inp: [Any]) -> Any in f(Int(inp[0] as! Float), Int(inp[1] as! Float), Int(inp[2] as! Float), Int(inp[3] as! Float)) } as Any) }
    public func DisconnectSetGeometry() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectSetGeometry"]) }
    public func SetGeometry(posx: Int, posy: Int, w: Int, h: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetGeometry", posx as Any, posy as Any, w as Any, h as Any]) }
    public func SetGeometryDefault(posx: Int, posy: Int, w: Int, h: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetGeometryDefault", posx as Any, posy as Any, w as Any, h as Any]) }
    public func ConnectSetGeometry2(f: @escaping (_ rect: QRect) -> Void) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectSetGeometry2", "___REMOTE_CALLBACK___"], f: { (inp: [Any]) -> Any in f(inp[0] as! QRect) } as Any) }
    public func DisconnectSetGeometry2() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectSetGeometry2"]) }
    public func SetGeometry2(rect: QRect_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetGeometry2", rect as Any]) }
    public func SetGeometry2Default(rect: QRect_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetGeometry2Default", rect as Any]) }
    public func ConnectSetHeight(f: @escaping (_ arg: Int) -> Void) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectSetHeight", "___REMOTE_CALLBACK___"], f: { (inp: [Any]) -> Any in f(Int(inp[0] as! Float)) } as Any) }
    public func DisconnectSetHeight() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectSetHeight"]) }
    public func SetHeight(arg: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetHeight", arg as Any]) }
    public func SetHeightDefault(arg: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetHeightDefault", arg as Any]) }
    public func SetIcon(icon: QIcon_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetIcon", icon as Any]) }
    public func SetKeyboardGrabEnabled(grab: Bool) -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "SetKeyboardGrabEnabled", grab as Any]) as! Bool }
    public func SetMask(region: QRegion_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetMask", region as Any]) }
    public func ConnectSetMaximumHeight(f: @escaping (_ h: Int) -> Void) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectSetMaximumHeight", "___REMOTE_CALLBACK___"], f: { (inp: [Any]) -> Any in f(Int(inp[0] as! Float)) } as Any) }
    public func DisconnectSetMaximumHeight() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectSetMaximumHeight"]) }
    public func SetMaximumHeight(h: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetMaximumHeight", h as Any]) }
    public func SetMaximumHeightDefault(h: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetMaximumHeightDefault", h as Any]) }
    public func SetMaximumSize(size: QSize_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetMaximumSize", size as Any]) }
    public func ConnectSetMaximumWidth(f: @escaping (_ w: Int) -> Void) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectSetMaximumWidth", "___REMOTE_CALLBACK___"], f: { (inp: [Any]) -> Any in f(Int(inp[0] as! Float)) } as Any) }
    public func DisconnectSetMaximumWidth() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectSetMaximumWidth"]) }
    public func SetMaximumWidth(w: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetMaximumWidth", w as Any]) }
    public func SetMaximumWidthDefault(w: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetMaximumWidthDefault", w as Any]) }
    public func ConnectSetMinimumHeight(f: @escaping (_ h: Int) -> Void) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectSetMinimumHeight", "___REMOTE_CALLBACK___"], f: { (inp: [Any]) -> Any in f(Int(inp[0] as! Float)) } as Any) }
    public func DisconnectSetMinimumHeight() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectSetMinimumHeight"]) }
    public func SetMinimumHeight(h: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetMinimumHeight", h as Any]) }
    public func SetMinimumHeightDefault(h: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetMinimumHeightDefault", h as Any]) }
    public func SetMinimumSize(size: QSize_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetMinimumSize", size as Any]) }
    public func ConnectSetMinimumWidth(f: @escaping (_ w: Int) -> Void) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectSetMinimumWidth", "___REMOTE_CALLBACK___"], f: { (inp: [Any]) -> Any in f(Int(inp[0] as! Float)) } as Any) }
    public func DisconnectSetMinimumWidth() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectSetMinimumWidth"]) }
    public func SetMinimumWidth(w: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetMinimumWidth", w as Any]) }
    public func SetMinimumWidthDefault(w: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetMinimumWidthDefault", w as Any]) }
    public func SetModality(modality: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetModality", modality as Any]) }
    public func SetMouseGrabEnabled(grab: Bool) -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "SetMouseGrabEnabled", grab as Any]) as! Bool }
    public func SetOpacity(level: Float) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetOpacity", level as Any]) }
    public func SetParent_QWindow(parent: QWindow_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetParent", parent as Any]) }
    public func SetPosition(pt: QPoint_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetPosition", pt as Any]) }
    public func SetPosition2(posx: Int, posy: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetPosition2", posx as Any, posy as Any]) }
    public func SetScreen(newScreen: QScreen_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetScreen", newScreen as Any]) }
    public func SetSizeIncrement(size: QSize_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetSizeIncrement", size as Any]) }
    public func SetSurfaceType(surfaceType: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetSurfaceType", surfaceType as Any]) }
    public func ConnectSetTitle(f: @escaping (_ vqs: String) -> Void) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectSetTitle", "___REMOTE_CALLBACK___"], f: { (inp: [Any]) -> Any in f(inp[0] as! String) } as Any) }
    public func DisconnectSetTitle() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectSetTitle"]) }
    public func SetTitle(vqs: String) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetTitle", vqs as Any]) }
    public func SetTitleDefault(vqs: String) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetTitleDefault", vqs as Any]) }
    public func SetVisibility(v: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetVisibility", v as Any]) }
    public func ConnectSetVisible(f: @escaping (_ visible: Bool) -> Void) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectSetVisible", "___REMOTE_CALLBACK___"], f: { (inp: [Any]) -> Any in f(inp[0] as! Bool) } as Any) }
    public func DisconnectSetVisible() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectSetVisible"]) }
    public func SetVisible(visible: Bool) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetVisible", visible as Any]) }
    public func SetVisibleDefault(visible: Bool) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetVisibleDefault", visible as Any]) }
    public func ConnectSetWidth(f: @escaping (_ arg: Int) -> Void) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectSetWidth", "___REMOTE_CALLBACK___"], f: { (inp: [Any]) -> Any in f(Int(inp[0] as! Float)) } as Any) }
    public func DisconnectSetWidth() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectSetWidth"]) }
    public func SetWidth(arg: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetWidth", arg as Any]) }
    public func SetWidthDefault(arg: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetWidthDefault", arg as Any]) }
    public func SetWindowState(state: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetWindowState", state as Any]) }
    public func SetWindowStates(state: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetWindowStates", state as Any]) }
    public func ConnectSetX(f: @escaping (_ arg: Int) -> Void) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectSetX", "___REMOTE_CALLBACK___"], f: { (inp: [Any]) -> Any in f(Int(inp[0] as! Float)) } as Any) }
    public func DisconnectSetX() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectSetX"]) }
    public func SetX(arg: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetX", arg as Any]) }
    public func SetXDefault(arg: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetXDefault", arg as Any]) }
    public func ConnectSetY(f: @escaping (_ arg: Int) -> Void) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectSetY", "___REMOTE_CALLBACK___"], f: { (inp: [Any]) -> Any in f(Int(inp[0] as! Float)) } as Any) }
    public func DisconnectSetY() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectSetY"]) }
    public func SetY(arg: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetY", arg as Any]) }
    public func SetYDefault(arg: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "SetYDefault", arg as Any]) }
    public func ConnectShow(f: @escaping () -> Void) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectShow", "___REMOTE_CALLBACK___"], f: { (_: [Any]) -> Any in f() } as Any) }
    public func DisconnectShow() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectShow"]) }
    public func Show() { _ = callLocalFunction(l: ["", Pointer(), ___className, "Show"]) }
    public func ShowDefault() { _ = callLocalFunction(l: ["", Pointer(), ___className, "ShowDefault"]) }
    public func ConnectShowEvent(f: @escaping (_ ev: QShowEvent) -> Void) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectShowEvent", "___REMOTE_CALLBACK___"], f: { (inp: [Any]) -> Any in f(inp[0] as! QShowEvent) } as Any) }
    public func DisconnectShowEvent() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectShowEvent"]) }
    public func ShowEvent(ev: QShowEvent_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "ShowEvent", ev as Any]) }
    public func ShowEventDefault(ev: QShowEvent_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "ShowEventDefault", ev as Any]) }
    public func ConnectShowFullScreen(f: @escaping () -> Void) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectShowFullScreen", "___REMOTE_CALLBACK___"], f: { (_: [Any]) -> Any in f() } as Any) }
    public func DisconnectShowFullScreen() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectShowFullScreen"]) }
    public func ShowFullScreen() { _ = callLocalFunction(l: ["", Pointer(), ___className, "ShowFullScreen"]) }
    public func ShowFullScreenDefault() { _ = callLocalFunction(l: ["", Pointer(), ___className, "ShowFullScreenDefault"]) }
    public func ConnectShowMaximized(f: @escaping () -> Void) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectShowMaximized", "___REMOTE_CALLBACK___"], f: { (_: [Any]) -> Any in f() } as Any) }
    public func DisconnectShowMaximized() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectShowMaximized"]) }
    public func ShowMaximized() { _ = callLocalFunction(l: ["", Pointer(), ___className, "ShowMaximized"]) }
    public func ShowMaximizedDefault() { _ = callLocalFunction(l: ["", Pointer(), ___className, "ShowMaximizedDefault"]) }
    public func ConnectShowMinimized(f: @escaping () -> Void) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectShowMinimized", "___REMOTE_CALLBACK___"], f: { (_: [Any]) -> Any in f() } as Any) }
    public func DisconnectShowMinimized() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectShowMinimized"]) }
    public func ShowMinimized() { _ = callLocalFunction(l: ["", Pointer(), ___className, "ShowMinimized"]) }
    public func ShowMinimizedDefault() { _ = callLocalFunction(l: ["", Pointer(), ___className, "ShowMinimizedDefault"]) }
    public func ConnectShowNormal(f: @escaping () -> Void) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectShowNormal", "___REMOTE_CALLBACK___"], f: { (_: [Any]) -> Any in f() } as Any) }
    public func DisconnectShowNormal() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectShowNormal"]) }
    public func ShowNormal() { _ = callLocalFunction(l: ["", Pointer(), ___className, "ShowNormal"]) }
    public func ShowNormalDefault() { _ = callLocalFunction(l: ["", Pointer(), ___className, "ShowNormalDefault"]) }
    override public func ConnectSize(f: @escaping () -> QSize) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectSize", "___REMOTE_CALLBACK___"], f: { (_: [Any]) -> Any in f() } as Any) }
    override public func DisconnectSize() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectSize"]) }
    override public func Size() -> QSize { callLocalFunction(l: ["", Pointer(), ___className, "Size"]) as! QSize }
    public func SizeDefault() -> QSize { callLocalFunction(l: ["", Pointer(), ___className, "SizeDefault"]) as! QSize }
    public func SizeIncrement() -> QSize { callLocalFunction(l: ["", Pointer(), ___className, "SizeIncrement"]) as! QSize }
    override public func ConnectSurfaceType(f: @escaping () -> Int) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectSurfaceType", "___REMOTE_CALLBACK___"], f: { (_: [Any]) -> Any in f() } as Any) }
    override public func DisconnectSurfaceType() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectSurfaceType"]) }
    override public func SurfaceType() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "SurfaceType"]) as! Float) }
    public func SurfaceTypeDefault() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "SurfaceTypeDefault"]) as! Float) }
    public func ConnectTabletEvent(f: @escaping (_ ev: QTabletEvent) -> Void) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectTabletEvent", "___REMOTE_CALLBACK___"], f: { (inp: [Any]) -> Any in f(inp[0] as! QTabletEvent) } as Any) }
    public func DisconnectTabletEvent() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectTabletEvent"]) }
    public func TabletEvent(ev: QTabletEvent_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "TabletEvent", ev as Any]) }
    public func TabletEventDefault(ev: QTabletEvent_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "TabletEventDefault", ev as Any]) }
    public func Title() -> String { callLocalFunction(l: ["", Pointer(), ___className, "Title"]) as! String }
    public func ConnectTouchEvent(f: @escaping (_ ev: QTouchEvent) -> Void) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectTouchEvent", "___REMOTE_CALLBACK___"], f: { (inp: [Any]) -> Any in f(inp[0] as! QTouchEvent) } as Any) }
    public func DisconnectTouchEvent() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectTouchEvent"]) }
    public func TouchEvent(ev: QTouchEvent_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "TouchEvent", ev as Any]) }
    public func TouchEventDefault(ev: QTouchEvent_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "TouchEventDefault", ev as Any]) }
    public func Type() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "Type"]) as! Float) }
    public func UnsetCursor() { _ = callLocalFunction(l: ["", Pointer(), ___className, "UnsetCursor"]) }
    public func Visibility() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "Visibility"]) as! Float) }
    public func ConnectVisibilityChanged(f: @escaping (_ visibility: Int) -> Void) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectVisibilityChanged", "___REMOTE_CALLBACK___"], f: { (inp: [Any]) -> Any in f(Int(inp[0] as! Float)) } as Any) }
    public func DisconnectVisibilityChanged() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectVisibilityChanged"]) }
    public func VisibilityChanged(visibility: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "VisibilityChanged", visibility as Any]) }
    public func ConnectVisibleChanged(f: @escaping (_ arg: Bool) -> Void) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectVisibleChanged", "___REMOTE_CALLBACK___"], f: { (inp: [Any]) -> Any in f(inp[0] as! Bool) } as Any) }
    public func DisconnectVisibleChanged() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectVisibleChanged"]) }
    public func VisibleChanged(arg: Bool) { _ = callLocalFunction(l: ["", Pointer(), ___className, "VisibleChanged", arg as Any]) }
    public func ConnectWheelEvent(f: @escaping (_ ev: QWheelEvent) -> Void) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectWheelEvent", "___REMOTE_CALLBACK___"], f: { (inp: [Any]) -> Any in f(inp[0] as! QWheelEvent) } as Any) }
    public func DisconnectWheelEvent() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectWheelEvent"]) }
    public func WheelEvent(ev: QWheelEvent_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "WheelEvent", ev as Any]) }
    public func WheelEventDefault(ev: QWheelEvent_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "WheelEventDefault", ev as Any]) }
    public func Width() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "Width"]) as! Float) }
    public func ConnectWidthChanged(f: @escaping (_ arg: Int) -> Void) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectWidthChanged", "___REMOTE_CALLBACK___"], f: { (inp: [Any]) -> Any in f(Int(inp[0] as! Float)) } as Any) }
    public func DisconnectWidthChanged() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectWidthChanged"]) }
    public func WidthChanged(arg: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "WidthChanged", arg as Any]) }
    public func WinId() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "WinId"]) as! Float) }
    public func WindowState() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "WindowState"]) as! Float) }
    public func ConnectWindowStateChanged(f: @escaping (_ windowState: Int) -> Void) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectWindowStateChanged", "___REMOTE_CALLBACK___"], f: { (inp: [Any]) -> Any in f(Int(inp[0] as! Float)) } as Any) }
    public func DisconnectWindowStateChanged() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectWindowStateChanged"]) }
    public func WindowStateChanged(windowState: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "WindowStateChanged", windowState as Any]) }
    public func WindowStates() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "WindowStates"]) as! Float) }
    public func ConnectWindowTitleChanged(f: @escaping (_ title: String) -> Void) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectWindowTitleChanged", "___REMOTE_CALLBACK___"], f: { (inp: [Any]) -> Any in f(inp[0] as! String) } as Any) }
    public func DisconnectWindowTitleChanged() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectWindowTitleChanged"]) }
    public func WindowTitleChanged(title: String) { _ = callLocalFunction(l: ["", Pointer(), ___className, "WindowTitleChanged", title as Any]) }
    public func X() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "X"]) as! Float) }
    public func ConnectXChanged(f: @escaping (_ arg: Int) -> Void) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectXChanged", "___REMOTE_CALLBACK___"], f: { (inp: [Any]) -> Any in f(Int(inp[0] as! Float)) } as Any) }
    public func DisconnectXChanged() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectXChanged"]) }
    public func XChanged(arg: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "XChanged", arg as Any]) }
    public func Y() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "Y"]) as! Float) }
    public func ConnectYChanged(f: @escaping (_ arg: Int) -> Void) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectYChanged", "___REMOTE_CALLBACK___"], f: { (inp: [Any]) -> Any in f(Int(inp[0] as! Float)) } as Any) }
    public func DisconnectYChanged() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectYChanged"]) }
    public func YChanged(arg: Int) { _ = callLocalFunction(l: ["", Pointer(), ___className, "YChanged", arg as Any]) }
    public func ConnectDestroyQWindow(f: @escaping () -> Void) { _ = callLocalAndRegisterRemoteFunction(l: ["", Pointer(), ___className, "ConnectDestroyQWindow", "___REMOTE_CALLBACK___"], f: { (_: [Any]) -> Any in f() } as Any) }
    public func DisconnectDestroyQWindow() { _ = callLocalAndDeregisterRemoteFunction(l: ["", Pointer(), ___className, "DisconnectDestroyQWindow"]) }
    public func DestroyQWindow() { _ = callLocalFunction(l: ["", Pointer(), ___className, "DestroyQWindow"]) }
    public func DestroyQWindowDefault() { _ = callLocalFunction(l: ["", Pointer(), ___className, "DestroyQWindowDefault"]) }
    public func ChildEvent(event: QChildEvent_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "ChildEvent", event as Any]) }
    public func ChildEventDefault(event: QChildEvent_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "ChildEventDefault", event as Any]) }
    public func ConnectNotify(sign: QMetaMethod_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "ConnectNotify", sign as Any]) }
    public func ConnectNotifyDefault(sign: QMetaMethod_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "ConnectNotifyDefault", sign as Any]) }
    public func CustomEvent(event: QEvent_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "CustomEvent", event as Any]) }
    public func CustomEventDefault(event: QEvent_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "CustomEventDefault", event as Any]) }
    public func DeleteLater() { _ = callLocalFunction(l: ["", Pointer(), ___className, "DeleteLater"]) }
    public func DeleteLaterDefault() { _ = callLocalFunction(l: ["", Pointer(), ___className, "DeleteLaterDefault"]) }
    public func DisconnectNotify(sign: QMetaMethod_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "DisconnectNotify", sign as Any]) }
    public func DisconnectNotifyDefault(sign: QMetaMethod_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "DisconnectNotifyDefault", sign as Any]) }
    public func EventFilter(watched: QObject_ITF? = nil, event: QEvent_ITF? = nil) -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "EventFilter", watched as Any, event as Any]) as! Bool }
    public func EventFilterDefault(watched: QObject_ITF? = nil, event: QEvent_ITF? = nil) -> Bool { callLocalFunction(l: ["", Pointer(), ___className, "EventFilterDefault", watched as Any, event as Any]) as! Bool }
    public func MetaObject() -> QMetaObject { callLocalFunction(l: ["", Pointer(), ___className, "MetaObject"]) as! QMetaObject }
    public func MetaObjectDefault() -> QMetaObject { callLocalFunction(l: ["", Pointer(), ___className, "MetaObjectDefault"]) as! QMetaObject }
    public func TimerEvent(event: QTimerEvent_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "TimerEvent", event as Any]) }
    public func TimerEventDefault(event: QTimerEvent_ITF? = nil) { _ = callLocalFunction(l: ["", Pointer(), ___className, "TimerEventDefault", event as Any]) }
}

public func NewQWindowFromPointer(ptr: String) -> QWindow { let r = QWindow(); r.initFrom(p: ptr, n: "gui.QWindow"); return r }
public func NewQWindow(targetScreen: QScreen_ITF? = nil) -> QWindow { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.NewQWindow", "", targetScreen as Any]) as! QWindow }
public func NewQWindow2(parent: QWindow_ITF? = nil) -> QWindow { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.NewQWindow2", "", parent as Any]) as! QWindow }
public func QWindow_FromWinId(id: Int) -> QWindow { Gui.initModule(); return callLocalFunction(l: ["", "", "gui.QWindow_FromWinId", "", id as Any]) as! QWindow }
public protocol QWindowStateChangeEvent_ITF: QEvent_ITF {
    func QWindowStateChangeEvent_PTR() -> QWindowStateChangeEvent
}

public class QWindowStateChangeEvent: QEvent, QWindowStateChangeEvent_ITF {
    public func QWindowStateChangeEvent_PTR() -> QWindowStateChangeEvent { callLocalFunction(l: ["", Pointer(), ___className, "QWindowStateChangeEvent_PTR"]) as! QWindowStateChangeEvent }
    public func DestroyQWindowStateChangeEvent() { _ = callLocalFunction(l: ["", Pointer(), ___className, "DestroyQWindowStateChangeEvent"]) }
    public func OldState() -> Int { Int(callLocalFunction(l: ["", Pointer(), ___className, "OldState"]) as! Float) }
}

public func NewQWindowStateChangeEventFromPointer(ptr: String) -> QWindowStateChangeEvent { let r = QWindowStateChangeEvent(); r.initFrom(p: ptr, n: "gui.QWindowStateChangeEvent"); return r }
